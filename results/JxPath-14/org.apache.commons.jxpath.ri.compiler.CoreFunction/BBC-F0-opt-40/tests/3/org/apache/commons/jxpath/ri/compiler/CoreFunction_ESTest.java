/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:24:48 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.IdentityManager;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      coreOperationNotEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)103, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(103, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationMod0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)103, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(103, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EvalContext evalContext0 = null;
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationNegate0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      boolean boolean0 = coreOperationNegate0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(890, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-1), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-1), coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("()");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      assertNotNull(coreOperationDivide0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      assertNotNull(coreOperationNegate0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "()");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertEquals("()", nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-3505), nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertEquals("()", nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3505), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(122, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertEquals("()", nodeNameTest0.getNamespaceURI());
      assertEquals("()", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(122, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertNull(qName0.getPrefix());
      assertEquals("()", qName0.getName());
      assertEquals("()", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant0 = new Constant("58i");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-3505), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-3505), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("0,s");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      assertEquals(1, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      boolean boolean0 = nameAttributeTest0.isContextDependent();
      assertTrue(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-110)}, byteArray0);
      
      boolean boolean2 = expressionPath0.computeContextDependent();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      nameAttributeTest0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(1, int0);
      assertEquals(1, expressionArray0.length);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("0,s");
      assertNotNull(qName0);
      assertEquals("0,s", qName0.toString());
      assertEquals("0,s", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0,s", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0,s", qName0.toString());
      assertEquals("0,s", qName0.getName());
      assertNull(qName0.getPrefix());
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, (-490), nodeNameTest0);
      assertEquals(1, expressionArray0.length);
      assertNull(evalContext1);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0,s", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("0,s", qName0.toString());
      assertEquals("0,s", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("0,s", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("0,s", qName0.toString());
      assertEquals("0,s", qName0.getName());
      assertNull(qName0.getPrefix());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(parentContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationMod0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-511), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-511), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-1812);
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "trueInfinity";
      Constant constant0 = new Constant("trueInfinity");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1812), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1812), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string1 = constant0.toString();
      assertFalse(string1.equals((Object)string0));
      assertEquals("'trueInfinity'", string1);
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertEquals(2, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1023, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1023, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("-28", "-28");
      assertNotNull(qName0);
      assertEquals("-28:-28", qName0.toString());
      assertEquals("-28", qName0.getPrefix());
      assertEquals("-28", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("-28:-28", qName0.toString());
      assertEquals("-28", qName0.getPrefix());
      assertEquals("-28", qName0.getName());
      assertEquals("-28:-28", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals("-28:-28", qName0.toString());
      assertEquals("-28", qName0.getPrefix());
      assertEquals("-28", qName0.getName());
      assertEquals("-28:-28", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("-28:-28", qName0.toString());
      assertEquals("-28", qName0.getPrefix());
      assertEquals("-28", qName0.getName());
      assertEquals("-28:-28", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(attributeContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("falseNaN");
      assertNotNull(processingInstructionTest0);
      assertEquals("falseNaN", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-87), processingInstructionTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("falseNaN", processingInstructionTest0.getTarget());
      assertEquals((-87), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      QName qName0 = new QName("position");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("position", qName0.getName());
      assertEquals("position", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("position", qName0.getName());
      assertEquals("position", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-87), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-87), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-87()", string0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(string0);
      assertEquals((-87), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("falseNaN", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      coreFunction0.functionRound(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = coreOperationLessThan0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      boolean boolean1 = coreOperationLessThan0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1214), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1214), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreOperationLessThan coreOperationLessThan1 = (CoreOperationLessThan)coreFunction0.getArg1();
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertSame(coreOperationLessThan1, coreOperationLessThan0);
      assertEquals((-1214), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction1 = new CoreFunction((-1214), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-1214), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      String string0 = (String)coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", string0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(string0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1214), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Object object0 = coreOperationLessThan0.computeValue((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("", object1);
      assertEquals(3, expressionArray1.length);
      assertNotNull(object1);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionTranslate((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(object2.equals((Object)object1));
      assertEquals("NaN", object2);
      assertEquals(3, expressionArray1.length);
      assertNotNull(object2);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      expressionArray0[5] = (Expression) coreOperationAnd0;
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(397, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(397, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperation", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-982), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-982), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-982), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-982), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals((-982), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("false1");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("false1", qName0.getName());
      assertEquals("false1", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "NaN");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("false1", qName0.getName());
      assertEquals("false1", qName0.toString());
      assertEquals("false1", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaN", nodeNameTest0.getNamespaceURI());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertNotNull(childContext0);
      assertNull(qName0.getPrefix());
      assertEquals("false1", qName0.getName());
      assertEquals("false1", qName0.toString());
      assertEquals("false1", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaN", nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction1.functionTranslate(childContext0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("true", object1);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-982), coreFunction1.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("false1", qName0.getName());
      assertEquals("false1", qName0.toString());
      assertEquals("false1", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaN", nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant0, coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      Object object0 = coreOperationLessThan0.computeValue((EvalContext) null);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertEquals(false, object0);
      assertNotNull(object0);
      assertNotSame(coreOperationLessThan0, coreOperationLessThan1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction((-1214), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1214), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("1", object1);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1214), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionTranslate((EvalContext) null);
      assertTrue(object2.equals((Object)object1));
      assertEquals("1", object2);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1214), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("1false", "1false");
      assertNotNull(qName0);
      assertEquals("1false:1false", qName0.toString());
      assertEquals("1false", qName0.getPrefix());
      assertEquals("1false", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("1false:1false", qName0.toString());
      assertEquals("1false", qName0.getPrefix());
      assertEquals("1false", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1077, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, processingInstructionTest0, false);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(precedingOrFollowingContext0, basicNodeSet0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(nodeSetContext0);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(526, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(526, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1339);
      assertNotNull(nodeTypeTest0);
      assertEquals(1339, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1074), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(step0);
      assertEquals(1339, nodeTypeTest0.getNodeType());
      assertEquals((-1074), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1074, nodeTypeTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(step1);
      assertEquals(1074, step1.getAxis());
      assertEquals(1339, nodeTypeTest0.getNodeType());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(evalContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionSubstring(evalContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(3, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(526, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Expression.ONE;
      assertEquals(1.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(9, expressionArray0.length);
      assertNotNull(expression0);
      assertSame(expression0, constant0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      expressionArray0[7] = expression0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-1546), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals((-1546), coreFunction1.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      assertNotNull(nodeTypeTest0);
      assertEquals(25, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(25, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      coreFunction1.functionCount(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-982), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-982), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-1899), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-1899), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-1899), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("#9Uf7J{!K~]|Z");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Float float0 = new Float((-700.13367F));
      assertEquals((-700.13367F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant1 = new Constant(float0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationMultiply0);
      assertFalse(constant1.equals((Object)constant0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1903, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1903, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) constant0);
      assertFalse(constant0.equals((Object)constant1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(constant0, constant1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) null);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(constant0, constant1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, decimalFormat0, (Pointer) null);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertNotSame(constant0, constant1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      boolean boolean0 = false;
      String string0 = "Q?qDI";
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, true, (NodeTest) null);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(ancestorContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      RootContext rootContext0 = ancestorContext0.getRootContext();
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertNotSame(constant0, constant1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(rootContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      Iterator iterator0 = coreOperationLessThan0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      coreOperationLessThan0.args = expressionArray1;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("trueInfinity");
      assertNotNull(qName0);
      assertEquals("trueInfinity", qName0.getName());
      assertEquals("trueInfinity", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("trueInfinity", qName0.getName());
      assertEquals("trueInfinity", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(595);
      assertNotNull(nodeTypeTest0);
      assertEquals(595, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(595, nodeTypeTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(595, nodeTypeTest0.getNodeType());
      assertEquals(595, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2439), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(595, nodeTypeTest0.getNodeType());
      assertEquals((-2439), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(980, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(595, nodeTypeTest0.getNodeType());
      assertEquals(980, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-750), (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step3);
      assertEquals((-750), step3.getAxis());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)8, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3365, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3365, coreFunction0.getFunctionCode());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionString(rootContext1);
      assertEquals("1", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3365, coreFunction0.getFunctionCode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 24);
      assertEquals(24.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, expressionArray0[0]);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationEqual0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      QName qName0 = new QName("}w%35");
      assertNotNull(qName0);
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      assertEquals("}w%35", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, nodeNameTest0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(ancestorContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      assertEquals("}w%35", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, nodeNameTest0, false);
      assertEquals(1, expressionArray0.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      assertEquals("}w%35", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "}w%35");
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      assertEquals("}w%35", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("}w%35", nodeNameTest1.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeNameTest1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(namespaceContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals("}w%35", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("}w%35", qName0.getName());
      assertEquals("}w%35", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("}w%35", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("}w%35", nodeNameTest1.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short)8);
      assertEquals((short)8, (short)short0);
      assertNotNull(short0);
      
      CoreFunction coreFunction0 = new CoreFunction((-1368), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1368), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals((-1368), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals((-1368), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals((-1368), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(53, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      boolean boolean0 = unionContext0.setPosition((-1));
      assertFalse(boolean0);
      assertEquals(0, evalContextArray0.length);
      assertEquals((-1), unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1), unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      QName qName0 = new QName("Fz9k%Kg");
      assertNotNull(qName0);
      assertEquals("Fz9k%Kg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Fz9k%Kg", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Fz9k%Kg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Fz9k%Kg", qName0.getName());
      assertEquals("Fz9k%Kg", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("Fz9k%Kg", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Fz9k%Kg", qName0.getName());
      assertEquals("Fz9k%Kg", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction53()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("Not a collection: ");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("Not a collection: ", processingInstructionTest1.getTarget());
      
      NamespaceContext namespaceContext1 = new NamespaceContext(namespaceContext0, processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(namespaceContext1.equals((Object)namespaceContext0));
      assertNotNull(namespaceContext1);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("Not a collection: ", processingInstructionTest1.getTarget());
      assertEquals(0, namespaceContext1.getPosition());
      assertEquals(0, namespaceContext1.getDocumentOrder());
      assertFalse(namespaceContext1.isChildOrderingRequired());
      
      Object object0 = coreFunction0.compute(namespaceContext1);
      assertFalse(namespaceContext0.equals((Object)namespaceContext1));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(namespaceContext1.equals((Object)namespaceContext0));
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(namespaceContext0, namespaceContext1);
      assertNotSame(processingInstructionTest1, processingInstructionTest0);
      assertNotSame(namespaceContext1, namespaceContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("Not a collection: ", processingInstructionTest1.getTarget());
      assertEquals(0, namespaceContext1.getPosition());
      assertEquals(0, namespaceContext1.getDocumentOrder());
      assertFalse(namespaceContext1.isChildOrderingRequired());
      
      Object object1 = coreFunction0.functionCount(parentContext0);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertEquals(0.0, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(processingInstructionTest0, processingInstructionTest1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext1, expressionArray0[0]);
      assertFalse(namespaceContext0.equals((Object)namespaceContext1));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(namespaceContext1.equals((Object)namespaceContext0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("Not a collection: ", processingInstructionTest1.getTarget());
      assertEquals(0, namespaceContext1.getPosition());
      assertEquals(0, namespaceContext1.getDocumentOrder());
      assertFalse(namespaceContext1.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      coreOperationLessThan0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2284, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2284, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-564), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertNull(object0);
      assertEquals((-564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals("0", object1);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object1);
      assertEquals((-564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-564()(-org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 0, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66q~9)", "2E>bdv66q~9)");
      assertNotNull(qName0);
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66q~9)", "2E>bdv66q~9)");
      assertNotNull(qName0);
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66q~9)", qName0.getPrefix());
      assertEquals("2E>bdv66q~9):2E>bdv66q~9)", qName0.toString());
      assertEquals("2E>bdv66q~9)", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("contains");
      assertNotNull(processingInstructionTest0);
      assertEquals("contains", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(514, processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("contains", processingInstructionTest0.getTarget());
      assertEquals(514, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1109), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertEquals((-1109), step1.getAxis());
      assertEquals("contains", processingInstructionTest0.getTarget());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step2 = new Step(2362, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(0, expressionArray1.length);
      assertNotNull(step2);
      assertEquals(2362, step2.getAxis());
      assertEquals("contains", processingInstructionTest0.getTarget());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionLast(evalContextArray0[2]);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("Invalid expression type. '");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      assertNotNull(coreOperationSubtract0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], variableReference0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Invalid expression type. '");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertEquals("Invalid expression type. '", nodeNameTest0.getNamespaceURI());
      assertEquals("Invalid expression type. '", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-2702), nodeNameTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("Invalid expression type. '", qName0.toString());
      assertEquals("Invalid expression type. '", qName0.getName());
      assertEquals("Invalid expression type. '", nodeNameTest0.getNamespaceURI());
      assertEquals("Invalid expression type. '", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2702), step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((IdentityManager) null).when(jXPathContextReferenceImpl0).getIdentityManager();
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(" to ", "not");
      assertNotNull(qName0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "11");
      assertNotNull(nodeNameTest0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" to :not", nodeNameTest0.toString());
      assertEquals("11", nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeNameTest0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(ancestorContext0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" to :not", nodeNameTest0.toString());
      assertEquals("11", nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      JXPathContext jXPathContext1 = ancestorContext0.getJXPathContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContext1);
      assertSame(jXPathContext1, jXPathContext0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" to :not", nodeNameTest0.toString());
      assertEquals("11", nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(jXPathContext1.isLenient());
      
      IdentityManager identityManager0 = jXPathContext1.getIdentityManager();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(identityManager0);
      assertSame(jXPathContext1, jXPathContext0);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(" to :not", nodeNameTest0.toString());
      assertEquals("11", nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(jXPathContext1.isLenient());
      
      jXPathContext0.setIdentityManager((IdentityManager) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertSame(jXPathContext0, jXPathContext1);
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      QName qName1 = new QName(" to ");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeNameTest1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest1, true, true);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(childContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(parentContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      NodePointer nodePointer0 = parentContext0.getCurrentNodePointer();
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(nodePointer0);
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(evalContext0);
      assertNotSame(qName0, qName1);
      assertSame(jXPathContext0, jXPathContext1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      Object object0 = coreFunction0.functionLast(evalContext0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1.0, object0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(object0);
      assertNotSame(qName0, qName1);
      assertSame(jXPathContext0, jXPathContext1);
      assertNotSame(qName1, qName0);
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(" to ", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals(" to :not", qName0.toString());
      assertEquals(2, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertEquals(" to ", qName1.toString());
      assertEquals(" to ", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals(" to ", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1518, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("o-^)$tq-=nI3:C8 H");
      assertNotNull(qName0);
      assertEquals("o-^)$tq-=nI3", qName0.getPrefix());
      assertEquals("o-^)$tq-=nI3:C8 H", qName0.toString());
      assertEquals("C8 H", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("o-^)$tq-=nI3", qName0.getPrefix());
      assertEquals("o-^)$tq-=nI3:C8 H", qName0.toString());
      assertEquals("C8 H", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("o-^)$tq-=nI3", qName0.getPrefix());
      assertEquals("o-^)$tq-=nI3:C8 H", qName0.toString());
      assertEquals("C8 H", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(double0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionName(rootContext0);
      assertEquals("o-^)$tq-=nI3:C8 H", string0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1518, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("o-^)$tq-=nI3", qName0.getPrefix());
      assertEquals("o-^)$tq-=nI3:C8 H", qName0.toString());
      assertEquals("C8 H", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1518()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("format-number");
      assertNotNull(qName0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "J3=(-<F!r92");
      assertNotNull(nodeNameTest0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-2114), nodeNameTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2114), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1541, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1541, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd1;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAdd1;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-330), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-330), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(2, expressionArray1.length);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(expressionArray0, expressionArray1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) "format-number");
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, ancestorContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, step0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step0.equals((Object)step1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals((-2114), step0.getAxis());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(step0, step1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals((-2114), step0.getAxis());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = (PredicateContext)expressionPath0.evalSteps(initialContext0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(step0.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(2, expressionArray1.length);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(predicateContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreOperationAdd0, coreOperationAdd1);
      assertNotSame(step0, step1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("format-number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("J3=(-<F!r92", nodeNameTest0.getNamespaceURI());
      assertEquals("format-number", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2114), step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionPosition(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(266, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("falsefalse");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationLessThan0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(47, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(47, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(47, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction266()('falsefalse', 'falsefalse', org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003), 'falsefalse')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66~9)", "2E>bdv66~9)");
      assertNotNull(qName0);
      assertEquals("2E>bdv66~9)", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):2E>bdv66~9)", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("2E>bdv66~9)", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):2E>bdv66~9)", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66~9)", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):2E>bdv66~9)", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction1553()", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(unionContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66~9)", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):2E>bdv66~9)", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(266, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Double double1 = Expression.ZERO;
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      Constant constant0 = new Constant(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1987, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1987, coreFunction0.getFunctionCode());
      
      coreFunction0.args = expressionArray0;
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1987, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1987, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1987, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[1] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertEquals(6, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionArray0[3]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-5097), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-5097), coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2129));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2129), nodeTypeTest0.getNodeType());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-2129), nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals((-2129), nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      coreFunction0.functionCeiling(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("wgN\u0005a*=7Q<r4", "a/60/N*o;5f8\u0006dW'V");
      assertNotNull(qName0);
      assertEquals("wgN\u0005a*=7Q<r4:a/60/N*o;5f8\u0006dW'V", qName0.toString());
      assertEquals("wgN\u0005a*=7Q<r4", qName0.getPrefix());
      assertEquals("a/60/N*o;5f8\u0006dW'V", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("wgN\u0005a*=7Q<r4:a/60/N*o;5f8\u0006dW'V", qName0.toString());
      assertEquals("wgN\u0005a*=7Q<r4", qName0.getPrefix());
      assertEquals("a/60/N*o;5f8\u0006dW'V", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName1 = new QName("qsr{e'xAT", "a/60/N*o;5f8\u0006dW'V");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("qsr{e'xAT:a/60/N*o;5f8\u0006dW'V", qName1.toString());
      assertEquals("a/60/N*o;5f8\u0006dW'V", qName1.getName());
      assertEquals("qsr{e'xAT", qName1.getPrefix());
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertEquals("qsr{e'xAT:a/60/N*o;5f8\u0006dW'V", qName1.toString());
      assertEquals("a/60/N*o;5f8\u0006dW'V", qName1.getName());
      assertEquals("qsr{e'xAT", qName1.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[4], extensionFunction1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("qsr{e'xAT:a/60/N*o;5f8\u0006dW'V", qName1.toString());
      assertEquals("a/60/N*o;5f8\u0006dW'V", qName1.getName());
      assertEquals("qsr{e'xAT", qName1.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      boolean boolean0 = coreOperationLessThan0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(266, coreFunction0.getFunctionCode());
      
      Object object0 = coreOperationLessThan0.compute((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertNotNull(object0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      coreOperationLessThan0.args = expressionArray1;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("falsefalse");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("'falsefalse'", string0);
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Short short0 = new Short((short)9);
      assertEquals((short)9, (short)short0);
      assertNotNull(short0);
      
      Constant constant1 = new Constant(short0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant1);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)9, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000002, 9, 'falsefalse')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)97;
      byteArray0[0] = (byte)95;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)0;
      byteArray0[6] = (byte)89;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      QName qName0 = new QName(")S", "R-Gd&(]tQjl.");
      assertNotNull(qName0);
      assertEquals(")S:R-Gd&(]tQjl.", qName0.toString());
      assertEquals(")S", qName0.getPrefix());
      assertEquals("R-Gd&(]tQjl.", qName0.getName());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-823), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-823), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("0", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals((-823), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals((-823), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationOr1;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      expressionArray1[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg2();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(expression0);
      assertSame(expression0, constant0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = expression0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(1, 1, 1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("ancestor");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ancestor", nodeNameTest0.toString());
      
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(parentContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(selfContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, false, false);
      assertEquals(2, expressionArray0.length);
      assertNotNull(childContext0);
      assertNull(qName0.getPrefix());
      assertEquals("ancestor", qName0.getName());
      assertEquals("ancestor", qName0.toString());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("ancestor", nodeNameTest0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 34;
      Expression[] expressionArray0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte) (-126);
      CoreFunction coreFunction0 = new CoreFunction((byte) (-126), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-126), coreFunction0.getFunctionCode());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertNotNull(predicateContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-126), coreFunction0.getFunctionCode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-126), coreFunction0.getFunctionCode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNull(nodeNameTest0.toString());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66~9)", "g:/xfm-;3Yp5f");
      assertNotNull(qName0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 2E>bdv66~9):g:/xfm-;3Yp5f
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(59, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(59, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = coreFunction0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertEquals(59, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(59, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("unknownFunction59()", string0);
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(59, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(true, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction59()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">{35wIG}sq,z3H8aMP+");
      assertNotNull(processingInstructionTest0);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(32, processingInstructionTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step3);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step4);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(32, processingInstructionTest0, expressionArray0);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step5);
      assertEquals(32, step5.getAxis());
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step5);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertNotSame(step5, step0);
      assertNotSame(step5, step3);
      assertNotSame(step5, step4);
      assertNotSame(step5, step1);
      assertNotSame(step5, step2);
      assertEquals(32, step5.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) step3);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step4));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertNotSame(step5, step0);
      assertNotSame(step5, step3);
      assertNotSame(step5, step4);
      assertNotSame(step5, step1);
      assertNotSame(step5, step2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(step3, step1);
      assertNotSame(step3, step4);
      assertNotSame(step3, step2);
      assertNotSame(step3, step5);
      assertNotSame(step3, step0);
      assertEquals(32, step5.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(32, step3.getAxis());
      
      QName qName0 = new QName(">{35wIG}sq,z3H8aMP+", "value");
      assertNotNull(qName0);
      assertEquals(">{35wIG}sq,z3H8aMP+", qName0.getPrefix());
      assertEquals("value", qName0.getName());
      assertEquals(">{35wIG}sq,z3H8aMP+:value", qName0.toString());
      
      Locale locale0 = Locale.forLanguageTag("value");
      assertNotNull(locale0);
      assertEquals("value", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("value", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step1, locale0);
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertNotSame(step1, step2);
      assertNotSame(step1, step5);
      assertNotSame(step1, step3);
      assertNotSame(step1, step4);
      assertNotSame(step1, step0);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(">{35wIG}sq,z3H8aMP+", qName0.getPrefix());
      assertEquals("value", qName0.getName());
      assertEquals(">{35wIG}sq,z3H8aMP+:value", qName0.toString());
      assertEquals("value", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("value", locale0.getLanguage());
      assertEquals(32, step1.getAxis());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      
      BeanPointer beanPointer1 = (BeanPointer)NodePointer.newChildNodePointer(beanPointer0, qName0, locale0);
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step0));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertEquals(3, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer1);
      assertNotSame(step1, step2);
      assertNotSame(step1, step5);
      assertNotSame(step1, step3);
      assertNotSame(step1, step4);
      assertNotSame(step1, step0);
      assertNotSame(beanPointer0, beanPointer1);
      assertNotSame(beanPointer1, beanPointer0);
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(">{35wIG}sq,z3H8aMP+", qName0.getPrefix());
      assertEquals("value", qName0.getName());
      assertEquals(">{35wIG}sq,z3H8aMP+:value", qName0.toString());
      assertEquals("value", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("value", locale0.getLanguage());
      assertEquals(32, step1.getAxis());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isRoot());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, coreOperationOr0, beanPointer1);
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step4));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      assertEquals(32, step3.getAxis());
      assertEquals(32, step5.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(">{35wIG}sq,z3H8aMP+", qName0.getPrefix());
      assertEquals("value", qName0.getName());
      assertEquals(">{35wIG}sq,z3H8aMP+:value", qName0.toString());
      assertEquals("value", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("value", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isRoot());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(step1.equals((Object)step2));
      assertFalse(step1.equals((Object)step5));
      assertFalse(step1.equals((Object)step3));
      assertFalse(step1.equals((Object)step4));
      assertFalse(step1.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step4));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step5));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(beanPointer0.equals((Object)beanPointer1));
      assertFalse(beanPointer1.equals((Object)beanPointer0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertEquals(3, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">{35wIG}sq,z3H8aMP+", processingInstructionTest0.getTarget());
      assertEquals(32, step1.getAxis());
      assertEquals(32, step3.getAxis());
      assertEquals(32, step5.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(">{35wIG}sq,z3H8aMP+", qName0.getPrefix());
      assertEquals("value", qName0.getName());
      assertEquals(">{35wIG}sq,z3H8aMP+:value", qName0.toString());
      assertEquals("value", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("value", locale0.getLanguage());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer1.isContainer());
      assertFalse(beanPointer1.isCollection());
      assertFalse(beanPointer1.isAttribute());
      assertFalse(beanPointer1.isRoot());
      assertNull(beanPointer1.getNamespaceURI());
      assertTrue(beanPointer1.isNode());
      assertEquals(1, beanPointer1.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer1.getIndex());
      assertFalse(beanPointer1.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionFalse(rootContext0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66~9)", "g:/xfm-;3Yp5f");
      assertNotNull(qName0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 2E>bdv66~9):g:/xfm-;3Yp5f
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(43, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(43, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(43, coreFunction0.getFunctionCode());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 17;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("Infi1");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Infi1");
      assertNotNull(processingInstructionTest0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(14, processingInstructionTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-502), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-502), coreFunction0.getFunctionCode());
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg3();
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-502), coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd1;
      Step[] stepArray1 = new Step[5];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      stepArray1[2] = step0;
      stepArray1[3] = step0;
      stepArray1[4] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(5, stepArray1.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step0);
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, step0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("Infi1");
      assertNotNull(qName0);
      assertEquals("Infi1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Infi1", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("Infi1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Infi1", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("Infi1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Infi1", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("Infi1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Infi1", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, expressionArray0[4]);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(predicateContext0);
      assertEquals("Infi1", processingInstructionTest0.getTarget());
      assertEquals(14, step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("Infi1", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("Infi1", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Step[] stepArray1 = new Step[2];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertNotNull(nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      Step step0 = new Step(596, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(596, step0.getAxis());
      
      stepArray1[0] = step0;
      Step step1 = new Step(596, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(596, step1.getAxis());
      
      stepArray1[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertEquals(4, expressionArray0.length);
      assertEquals(2, stepArray1.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(596, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(596, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      coreFunction0.functionNull(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1553, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("2E>bdv66~9)", "g:/xfm-;3Yp5f");
      assertNotNull(qName0);
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variablePointer0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(string0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(1553, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("2E>bdv66~9):g:/xfm-;3Yp5f", qName0.toString());
      assertEquals("2E>bdv66~9)", qName0.getPrefix());
      assertEquals("g:/xfm-;3Yp5f", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Constant constant0 = new Constant(",.B~4J");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals(",.B~4J,.B~4J", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("1", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(266, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(266, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("111", object0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(266, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertTrue(object1.equals((Object)string0));
      assertEquals("1", object1);
      assertEquals(3, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(266, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction266()(1, 1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = (-2701);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      coreOperationNotEqual0.args = expressionArray0;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2701), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2701), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-2701()", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2701), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-925), processingInstructionTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-925), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2519, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(2519, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      Step step2 = new Step((-925), (NodeTest) null, expressionArray1);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step2);
      assertEquals((-925), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-925), processingInstructionTest0, expressionArray1);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step3);
      assertEquals((-925), step3.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step(2054, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step4);
      assertEquals(2054, step4.getAxis());
      
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("", processingInstructionTest1.getTarget());
      
      Step step5 = new Step(269, processingInstructionTest1, expressionArray1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step5);
      assertEquals("", processingInstructionTest1.getTarget());
      assertEquals(269, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(269, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step6);
      assertEquals(269, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(2054, (NodeTest) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step6));
      assertEquals(8, expressionArray1.length);
      assertNotNull(step7);
      assertEquals(2054, step7.getAxis());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationUnion1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[3], expressionArray1[7]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[5], expressionArray1[6]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[5] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[6] = (Expression) variableReference1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference1, coreOperationMultiply0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals(8, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2519, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2519, coreFunction0.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      // Undeclared exception!
      coreFunction0.functionTrue(parentContext0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4169, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4169, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4169, coreFunction0.getFunctionCode());
      
      coreOperationDivide0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(59, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(59, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Constant constant0 = new Constant(";Wyim");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(59, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(59, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("eRW");
      assertNotNull(qName0);
      assertEquals("eRW", qName0.getName());
      assertEquals("eRW", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("eRW", qName0.getName());
      assertEquals("eRW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertEquals("eRW", qName0.getName());
      assertEquals("eRW", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAdd1;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction2.equals((Object)extensionFunction0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction1));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction2);
      assertTrue(extensionFunction2.computeContextDependent());
      assertEquals("eRW", qName0.getName());
      assertEquals("eRW", qName0.toString());
      assertNull(qName0.getPrefix());
      
      expressionArray0[6] = (Expression) extensionFunction2;
      CoreFunction coreFunction0 = new CoreFunction(115, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(115, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      coreOperationUnion0.args = expressionArray0;
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      Object object0 = coreOperationAdd0.computeValue((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals(0.0, object0);
      assertEquals(0, expressionArray1.length);
      assertNotNull(object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreOperationAdd0, coreOperationAdd1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2441));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2441), nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-2441), nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Long long0 = new Long((-5643));
      assertEquals((-5643L), (long)long0);
      assertNotNull(long0);
      
      Long long1 = Long.getLong("8i^6Qwu-z>aD:7`#HLB", long0);
      assertEquals((-5643L), (long)long1);
      assertNotNull(long1);
      
      Constant constant0 = new Constant(long1);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-5643), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(7, expressionArray0.length);
      assertNotNull(expression0);
      assertSame(expression0, constant0);
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expression0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, expressionArray0[2]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      Expression expression1 = coreFunction0.getArg2();
      assertEquals(7, expressionArray0.length);
      assertNotNull(expression1);
      assertSame(expression1, expressionPath0);
      assertEquals((-5643), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      expressionArray0[6] = expression1;
      CoreFunction coreFunction1 = new CoreFunction((-5643), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals((-5643), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationMod0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, expressionArray0[0]);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMod1);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], (Expression) null);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(79, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(79, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, constant0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("trueInfinity", "/>]");
      assertNotNull(qName0);
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "trueInfinity");
      assertNotNull(nodeNameTest0);
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("trueInfinity", nodeNameTest0.getNamespaceURI());
      assertEquals("trueInfinity:/>]", nodeNameTest0.toString());
      
      Step step0 = new Step(14, nodeNameTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("trueInfinity", nodeNameTest0.getNamespaceURI());
      assertEquals("trueInfinity:/>]", nodeNameTest0.toString());
      assertEquals(14, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1238), nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("trueInfinity", nodeNameTest0.getNamespaceURI());
      assertEquals("trueInfinity:/>]", nodeNameTest0.toString());
      assertEquals((-1238), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("trueInfinity", nodeNameTest0.getNamespaceURI());
      assertEquals("trueInfinity:/>]", nodeNameTest0.toString());
      assertEquals(3, step2.getAxis());
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("trueInfinity:/>]", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      Step step3 = new Step((-1238), nodeNameTest1, expressionArray1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step3);
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("trueInfinity:/>]", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals((-1238), step3.getAxis());
      assertEquals("/>]", qName0.getName());
      assertEquals("trueInfinity:/>]", qName0.toString());
      assertEquals("trueInfinity", qName0.getPrefix());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationEqual0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("!JFCI]XYVj2Y,,MmW}P", "!JFCI]XYVj2Y,,MmW}P");
      assertNotNull(qName0);
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getName());
      assertEquals("!JFCI]XYVj2Y,,MmW}P:!JFCI]XYVj2Y,,MmW}P", qName0.toString());
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getName());
      assertEquals("!JFCI]XYVj2Y,,MmW}P:!JFCI]XYVj2Y,,MmW}P", qName0.toString());
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getName());
      assertEquals("!JFCI]XYVj2Y,,MmW}P:!JFCI]XYVj2Y,,MmW}P", qName0.toString());
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getName());
      assertEquals("!JFCI]XYVj2Y,,MmW}P:!JFCI]XYVj2Y,,MmW}P", qName0.toString());
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("!JFCI]XYVj2Y,,MmW}P");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[0]);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getName());
      assertEquals("!JFCI]XYVj2Y,,MmW}P:!JFCI]XYVj2Y,,MmW}P", qName0.toString());
      assertEquals("!JFCI]XYVj2Y,,MmW}P", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[16];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationAdd0);
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationSubtract0);
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(16, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[2]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd1;
      Expression expression0 = coreFunction0.getArg3();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(16, expressionArray0.length);
      assertNotNull(expression0);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(expression0, expressionPath0);
      assertEquals(16, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      expressionArray0[5] = expression0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(16, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(16, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      coreOperationLessThan0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1808, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(1808, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("new");
      assertNotNull(qName0);
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("new", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("new", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, precedingOrFollowingContext0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("new", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, precedingOrFollowingContext0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("new", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("new", qName0.toString());
      assertEquals("new", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("new", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: new
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("", "RAQGz");
      assertNotNull(qName0);
      assertEquals(":RAQGz", qName0.toString());
      assertEquals("RAQGz", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(":RAQGz", qName0.toString());
      assertEquals("RAQGz", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-670), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-670), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreOperationLessThan1.computeValue((EvalContext) null);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreOperationLessThan0, coreOperationLessThan1);
      assertNotSame(coreOperationLessThan1, coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object1));
      assertEquals("unknownFunction4201()", string1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(false, object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object3 = coreFunction0.functionSubstring((EvalContext) null);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)string1));
      assertFalse(object3.equals((Object)string0));
      assertEquals("Infinity", object3);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object3);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("ub");
      assertNotNull(qName0);
      assertEquals("ub", qName0.getName());
      assertEquals("ub", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("ub", qName0.getName());
      assertEquals("ub", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[0] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertNotNull(nodeTypeTest0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(12, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2093), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step1);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals((-2093), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2093), nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals((-2093), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(34, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(2, expressionArray1.length);
      assertNotNull(step3);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(34, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("ub", qName0.getName());
      assertEquals("ub", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2297, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2297, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(2, expressionArray1.length);
      assertNull(object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2297, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Constant constant0 = new Constant(",.B~4J");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("',.B~4J'", string0);
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals(",.B~4J,.B~4J", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1682, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1682, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName(".}G;a]xa[#h^Wau{,^/", "9Vbm|H3");
      assertNotNull(qName0);
      assertEquals(".}G;a]xa[#h^Wau{,^/", qName0.getPrefix());
      assertEquals(".}G;a]xa[#h^Wau{,^/:9Vbm|H3", qName0.toString());
      assertEquals("9Vbm|H3", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(".}G;a]xa[#h^Wau{,^/", qName0.getPrefix());
      assertEquals(".}G;a]xa[#h^Wau{,^/:9Vbm|H3", qName0.toString());
      assertEquals("9Vbm|H3", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1332, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1332, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(7, expressionArray0.length);
      assertNull(expression0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1332, coreFunction0.getFunctionCode());
      
      expressionArray0[1] = null;
      CoreFunction coreFunction1 = new CoreFunction((-580), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals((-580), coreFunction1.getFunctionCode());
      
      expressionArray0[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = (CoreFunction)coreFunction2.getArg3();
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction3);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertSame(coreFunction3, coreFunction1);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(5, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction3.getArgumentCount());
      assertEquals((-580), coreFunction3.getFunctionCode());
      
      expressionArray0[3] = (Expression) coreFunction3;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("]G0?W`gNT%to");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals((-580), coreFunction1.getFunctionCode());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction4 = new CoreFunction((-3183), expressionArray0);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction4);
      assertEquals(7, coreFunction4.getArgumentCount());
      assertEquals((-3183), coreFunction4.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-580));
      assertNotNull(nodeTypeTest0);
      assertEquals((-580), nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals((-580), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      coreFunction2.functionString(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      boolean boolean0 = unionContext0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, evalContextArray0.length);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(3, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-630));
      assertNotNull(nodeTypeTest0);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-630), nodeTypeTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals((-630), step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      Step step1 = new Step((-44), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step1);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals((-44), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3051), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step2);
      assertEquals((-3051), step2.getAxis());
      assertEquals((-630), nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-44), nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step3);
      assertEquals((-44), step3.getAxis());
      assertEquals((-630), nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-630), nodeTypeTest0, expressionArray1);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step4);
      assertEquals((-630), step4.getAxis());
      assertEquals((-630), nodeTypeTest0.getNodeType());
      
      stepArray0[4] = step4;
      Step step5 = new Step(442, nodeTypeTest0, expressionArray1);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step5);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals(442, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-3051), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step6);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals((-3051), step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-44), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step7);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals((-44), step7.getAxis());
      
      stepArray0[7] = step7;
      Step step8 = new Step((-630), nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step7));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step8);
      assertEquals((-630), nodeTypeTest0.getNodeType());
      assertEquals((-630), step8.getAxis());
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(9, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[5], expressionArray1[3]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-630), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-630), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("\"true\"", " %}U");
      assertNotNull(qName0);
      assertEquals("\"true\"", qName0.getPrefix());
      assertEquals(" %}U", qName0.getName());
      assertEquals("\"true\": %}U", qName0.toString());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("^-U]j:", "^-U]j:");
      assertNotNull(qName0);
      assertEquals("^-U]j::^-U]j:", qName0.toString());
      assertEquals("^-U]j:", qName0.getPrefix());
      assertEquals("^-U]j:", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("^-U]j::^-U]j:", qName0.toString());
      assertEquals("^-U]j:", qName0.getPrefix());
      assertEquals("^-U]j:", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, coreOperationAnd0);
      assertFalse(coreOperationAnd0.equals((Object)coreOperationAnd1));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("^-U]j::^-U]j:", qName0.toString());
      assertEquals("^-U]j:", qName0.getPrefix());
      assertEquals("^-U]j:", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)object0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("unknownFunction4201()", string1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean1));
      assertEquals(false, object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("NaN", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("-D_/}B7>f}");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("-D_/}B7>f}", qName0.toString());
      assertEquals("-D_/}B7>f}", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("-D_/}B7>f}", qName0.toString());
      assertEquals("-D_/}B7>f}", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(68, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(68, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      assertNotNull(nodeTypeTest0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(1, nodeTypeTest0.getNodeType());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionNull(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(16, (NodeTest) null, (Expression[]) null);
      assertNotNull(step0);
      assertEquals(16, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(8, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(8, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(16, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("true", "true");
      assertNotNull(qName0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, (Expression) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2200, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(2200, coreFunction0.getFunctionCode());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      assertEquals(3, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(unionContext0);
      assertEquals(7, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(evalContext0);
      assertSame(unionContext0, evalContext0);
      assertSame(evalContext0, unionContext0);
      assertEquals("true:true", qName0.toString());
      assertEquals("true", qName0.getPrefix());
      assertEquals("true", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(1, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionLang(evalContext0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(1820, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1820, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((IdentityManager) null).when(jXPathContextReferenceImpl0).getIdentityManager();
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl1);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "contains");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(1, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction0.functionLast(unionContext0);
      assertTrue(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object1);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object2 = coreFunction0.functionPosition(unionContext0);
      assertEquals(1, object2);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object2);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      
      Object object3 = coreFunction0.functionTrue((EvalContext) null);
      assertEquals(true, object3);
      assertNotNull(object3);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationMultiply0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("parent::");
      assertNotNull(qName0);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      
      Step step0 = new Step(85, nodeNameTest0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      assertEquals(85, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(85, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      assertEquals(85, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(85, nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      assertEquals(85, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(3850, nodeNameTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step3);
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      assertEquals(3850, step3.getAxis());
      
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("parent::", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      
      Step step4 = new Step(4201, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step4);
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("parent::", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(4201, step4.getAxis());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3850, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step5);
      assertEquals(3850, step5.getAxis());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("parent::", nodeNameTest0.toString());
      
      stepArray0[5] = step5;
      QName qName1 = new QName("");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest2);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("", nodeNameTest2.toString());
      
      Step step6 = new Step(2574, nodeNameTest2, expressionArray0);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertEquals(8, expressionArray0.length);
      assertNotNull(step6);
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("", nodeNameTest2.toString());
      assertEquals(2574, step6.getAxis());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(8, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationGreaterThan0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[4], expressionPath0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(8, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("parent", qName0.getPrefix());
      assertEquals("parent::", qName0.toString());
      assertEquals(":", qName0.getName());
      
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(85, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(85, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Byte byte0 = new Byte((byte)2);
      assertEquals((byte)2, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(489, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(489, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      CoreOperationNegate coreOperationNegate1 = (CoreOperationNegate)coreFunction0.getArg2();
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate1);
      assertSame(coreOperationNegate1, coreOperationNegate0);
      assertEquals(489, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate1;
      CoreOperationNegate coreOperationNegate2 = (CoreOperationNegate)coreFunction0.getArg3();
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate2);
      assertSame(coreOperationNegate2, coreOperationNegate1);
      assertSame(coreOperationNegate2, coreOperationNegate0);
      assertEquals(489, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate2.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate2;
      QName qName0 = new QName("sz:iS7>");
      assertNotNull(qName0);
      assertEquals("sz:iS7>", qName0.toString());
      assertEquals("sz", qName0.getPrefix());
      assertEquals("iS7>", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("sz:iS7>", qName0.toString());
      assertEquals("sz", qName0.getPrefix());
      assertEquals("iS7>", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate3 = (CoreOperationNegate)coreFunction0.getArg2();
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate3);
      assertSame(coreOperationNegate3, coreOperationNegate1);
      assertSame(coreOperationNegate3, coreOperationNegate2);
      assertSame(coreOperationNegate3, coreOperationNegate0);
      assertEquals(489, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate3.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate3;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[2]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, -(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), -(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), -(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), $sz:iS7>, -(org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) > org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, expressionArray0[0]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction0.getArg1();
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest1);
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest2 = new NameAttributeTest(coreOperationMultiply0, nameAttributeTest1);
      assertFalse(nameAttributeTest2.equals((Object)nameAttributeTest0));
      assertFalse(nameAttributeTest2.equals((Object)nameAttributeTest1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(nameAttributeTest2);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertTrue(nameAttributeTest2.computeContextDependent());
      assertEquals("=", nameAttributeTest2.getSymbol());
      
      expressionArray0[4] = (Expression) nameAttributeTest2;
      QName qName0 = new QName("\"parent::\"");
      assertNotNull(qName0);
      assertEquals(":\"", qName0.getName());
      assertEquals("\"parent::\"", qName0.toString());
      assertEquals("\"parent", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(":\"", qName0.getName());
      assertEquals("\"parent::\"", qName0.toString());
      assertEquals("\"parent", qName0.getPrefix());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual1 = (CoreOperationNotEqual)coreFunction0.getArg2();
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNotEqual1);
      assertSame(coreOperationNotEqual1, coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertFalse(object0.equals((Object)string0));
      assertEquals("Infinitytrue", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      String string1 = coreFunction0.getFunctionName();
      assertFalse(string1.equals((Object)object1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)object0));
      assertEquals("unknownFunction4201()", string1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string1);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertTrue(object2.equals((Object)boolean0));
      assertEquals(false, object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("Infinitytrue", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertFalse(string0.equals((Object)object1));
      assertFalse(string0.equals((Object)object0));
      assertEquals("unknownFunction4201()", string0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationAdd0);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], coreOperationGreaterThan0);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[5] = (Expression) expressionPath1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      ExpressionPath expressionPath2 = new ExpressionPath(coreOperationAdd0, expressionArray0, (Step[]) null);
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath2);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) expressionPath2;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[3]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(23);
      assertEquals(23L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[0]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("false");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("false", qName0.toString());
      assertEquals("false", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("false", qName0.toString());
      assertEquals("false", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(10, (NodeTest) null, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(5, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(5, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual1, expressionArray0[3]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1118, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1118, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = (CoreOperationGreaterThan)coreFunction0.getArg3();
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
      assertEquals(1118, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, expressionArray0[3]);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[4], expressionArray0[3]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, nameAttributeTest0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[3] = (Expression) expressionPath0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[4] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction0.getArg1();
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationEqual1);
      assertSame(coreOperationEqual1, coreOperationEqual0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("=", coreOperationEqual1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[1]);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("normalize-space");
      assertNotNull(processingInstructionTest0);
      assertEquals("normalize-space", processingInstructionTest0.getTarget());
      
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, constant0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan1, (Expression) null);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      expressionArray0[3] = null;
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      expressionArray0[7] = null;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1055), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1055), coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[8]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionConcat(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, nameAttributeTest0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("id");
      assertNotNull(qName0);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("id", qName0.getName());
      assertEquals("id", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[1]);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      QName qName0 = new QName("format-number");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.toString());
      assertEquals("format-number", qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      QName qName0 = new QName("format-number");
      assertNotNull(qName0);
      assertEquals("format-number", qName0.toString());
      assertEquals("format-number", qName0.getName());
      assertNull(qName0.getPrefix());
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = (-4273);
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName(":");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-4273), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-4273), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-4273()", string0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-4273), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("46", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string1 = constant0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("46", string1);
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1840, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1840, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertNotNull(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-4273), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-4273), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-4273), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("46", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string1 = constant0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("46", string1);
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Object object0 = coreOperationDivide0.computeValue((EvalContext) null);
      assertEquals(1.0, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-358), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-358), coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)string1));
      assertFalse(object1.equals((Object)string0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-358), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertTrue(object2.equals((Object)string0));
      assertTrue(object2.equals((Object)string1));
      assertFalse(object2.equals((Object)object1));
      assertEquals("46", object2);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-358), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-358()(46, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("Eu4tnd[", "Eu4tnd[");
      assertNotNull(qName0);
      assertEquals("Eu4tnd[", qName0.getPrefix());
      assertEquals("Eu4tnd[:Eu4tnd[", qName0.toString());
      assertEquals("Eu4tnd[", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("Eu4tnd[", qName0.getPrefix());
      assertEquals("Eu4tnd[:Eu4tnd[", qName0.toString());
      assertEquals("Eu4tnd[", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(8, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1048576, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(1048576, step1.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      Step step2 = new Step((-1238), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step2);
      assertEquals((-1238), step2.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1048576, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step3);
      assertEquals(1048576, step3.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1238), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step4);
      assertEquals((-1238), step4.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[4] = step4;
      Step step5 = new Step(18, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step5);
      assertEquals(18, step5.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1493), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertEquals(1, expressionArray1.length);
      assertNotNull(step6);
      assertEquals((-1493), step6.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[6] = step6;
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationUnion0;
      expressionArray2[1] = (Expression) extensionFunction0;
      expressionArray2[2] = (Expression) coreOperationMultiply0;
      expressionArray2[3] = (Expression) extensionFunction0;
      Step step7 = new Step(2736, nodeNameTest0, expressionArray2);
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals(4, expressionArray2.length);
      assertNotNull(step7);
      assertEquals(2736, step7.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(8, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(466, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(466, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName(".;Q5c", ".;Q5c");
      assertNotNull(qName0);
      assertEquals(".;Q5c:.;Q5c", qName0.toString());
      assertEquals(".;Q5c", qName0.getPrefix());
      assertEquals(".;Q5c", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(".;Q5c:.;Q5c", qName0.toString());
      assertEquals(".;Q5c", qName0.getPrefix());
      assertEquals(".;Q5c", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(".;Q5c");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, (Step[]) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(".;Q5c:.;Q5c", qName0.toString());
      assertEquals(".;Q5c", qName0.getPrefix());
      assertEquals(".;Q5c", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, expressionArray0[5]);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1902, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1902, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(393, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(393, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("Infinitytrue", object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4201, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThan0);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThan1);
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number((org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) div org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3842));
      assertNotNull(nodeTypeTest0);
      assertEquals((-3842), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1063, nodeTypeTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertEquals((-3842), nodeTypeTest0.getNodeType());
      assertEquals(1063, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationDivide0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-3842), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-3842), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      assertNotNull(processingInstructionTest0);
      assertEquals("translate", processingInstructionTest0.getTarget());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(substring-after(), substring-after(), substring-after(), substring-after(), substring-after())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, expressionArray0[3]);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[4], expressionArray0[3]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, nameAttributeTest0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"attribute::\"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\"attribute::\"", processingInstructionTest0.getTarget());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction1);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction1, extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationDivide1);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("div", coreOperationDivide1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationOr0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationOr1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationGreaterThan0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2281, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2281, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(40, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Object object0 = coreFunction2.functionNumber(nodeSetContext0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)double0));
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(14, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(1797, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1797, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction3);
      assertEquals(14, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
      
      boolean boolean0 = coreFunction3.computeContextDependent();
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction3, coreFunction1);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertEquals(14, coreFunction3.getFunctionCode());
      assertEquals(1, coreFunction3.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("contains");
      assertNotNull(qName0);
      assertEquals("contains", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("contains", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-3), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1430, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1430, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("\f", "\f");
      assertNotNull(qName0);
      assertEquals("\f", qName0.getName());
      assertEquals("\f:\f", qName0.toString());
      assertEquals("\f", qName0.getPrefix());
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("unknownFunction1430()(1)", string0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1430, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("0)dTXIW=e_5");
      assertNotNull(processingInstructionTest0);
      assertEquals("0)dTXIW=e_5", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(88, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(88, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Constant constant0 = new Constant("containFs");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Byte byte0 = new Byte((byte)4);
      assertEquals((byte)4, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant1 = new Constant(byte0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction((byte)4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7?TvfU4m70#gI");
      assertNotNull(processingInstructionTest0);
      assertEquals("7?TvfU4m70#gI", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("7?TvfU4m70#gI", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNull(namespaceContext0);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals("7?TvfU4m70#gI", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", "");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual:", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual:", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual:", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1430, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(80, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(80, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[3];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step(84, (NodeTest) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(step0);
      assertEquals(84, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2090), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step1);
      assertEquals((-2090), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(15, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(15, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      assertEquals(3, stepArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNotEqual0, expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction((-2090), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2090), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, (NodeSet) null);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(nodeSetContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, (NodeTest) null);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(ancestorContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, true, (NodeTest) null);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(descendantContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      assertEquals(0, evalContextArray0.length);
      assertNotNull(parentContext0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      boolean boolean0 = parentContext0.setPosition((-773));
      assertFalse(boolean0);
      assertEquals(0, evalContextArray0.length);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals((-773), parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      assertNotNull(processingInstructionTest0);
      assertEquals("translate", processingInstructionTest0.getTarget());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("d:P");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("d:P", processingInstructionTest1.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest1, true);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("d:P", processingInstructionTest1.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest2 = new ProcessingInstructionTest("translate");
      assertFalse(processingInstructionTest2.equals((Object)processingInstructionTest0));
      assertFalse(processingInstructionTest2.equals((Object)processingInstructionTest1));
      assertNotNull(processingInstructionTest2);
      assertEquals("translate", processingInstructionTest2.getTarget());
      
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, processingInstructionTest2);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest2));
      assertFalse(processingInstructionTest2.equals((Object)processingInstructionTest0));
      assertFalse(processingInstructionTest2.equals((Object)processingInstructionTest1));
      assertNotNull(selfContext0);
      assertEquals("d:P", processingInstructionTest1.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("translate", processingInstructionTest2.getTarget());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      QName qName0 = new QName("T:J<^5BY4<kc#f", "T:J<^5BY4<kc#f");
      assertNotNull(qName0);
      assertEquals("T:J<^5BY4<kc#f", qName0.getPrefix());
      assertEquals("T:J<^5BY4<kc#f", qName0.getName());
      assertEquals("T:J<^5BY4<kc#f:T:J<^5BY4<kc#f", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("T:J<^5BY4<kc#f", qName0.getPrefix());
      assertEquals("T:J<^5BY4<kc#f", qName0.getName());
      assertEquals("T:J<^5BY4<kc#f:T:J<^5BY4<kc#f", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T:J<^5BY4<kc#f:T:J<^5BY4<kc#f", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext(evalContextArray0[0], true, nodeNameTest0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(descendantContext0);
      assertEquals("T:J<^5BY4<kc#f", qName0.getPrefix());
      assertEquals("T:J<^5BY4<kc#f", qName0.getName());
      assertEquals("T:J<^5BY4<kc#f:T:J<^5BY4<kc#f", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("T:J<^5BY4<kc#f:T:J<^5BY4<kc#f", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      evalContextArray0[3] = (EvalContext) descendantContext0;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionNumber((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction1.functionCount((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)double0));
      assertTrue(object2.equals((Object)object0));
      assertEquals(1.0, object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("contains");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<)QFS<");
      assertNotNull(processingInstructionTest0);
      assertEquals("<)QFS<", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(772, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(772, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(19, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(false, object0);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "PfJ;cs13 BOR");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      expressionArray1[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float(27.71086523093);
      assertEquals(27.710865F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("", "owD}+|#H6q.");
      assertNotNull(qName0);
      assertEquals(":owD}+|#H6q.", qName0.toString());
      assertEquals("owD}+|#H6q.", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(":owD}+|#H6q.", qName0.toString());
      assertEquals("owD}+|#H6q.", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":owD}+|#H6q.", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      QName qName1 = new QName("BO(_&iQia._G", "BO(_&iQia._G");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("BO(_&iQia._G", qName1.getName());
      assertEquals("BO(_&iQia._G:BO(_&iQia._G", qName1.toString());
      assertEquals("BO(_&iQia._G", qName1.getPrefix());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-250), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-250), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isActual());
      
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = null;
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      assertNotNull(qName0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      String string0 = "S\"V)k^p:=[6m]I\\umaQ";
      QName qName1 = new QName(string0, "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:", qName1.toString());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      int int0 = 23;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("()");
      assertNotNull(processingInstructionTest0);
      assertEquals("()", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(true, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionNumber((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(1.0, object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "Nyko");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", nodeNameTest0.toString());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("boolean", "SQ;^P r");
      assertNotNull(qName0);
      assertEquals("boolean:SQ;^P r", qName0.toString());
      assertEquals("SQ;^P r", qName0.getName());
      assertEquals("boolean", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("boolean:SQ;^P r", qName0.toString());
      assertEquals("SQ;^P r", qName0.getName());
      assertEquals("boolean", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("boolean:SQ;^P r", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      QName qName1 = new QName(";-U:m 8\"KOh", "^A!;7)hu-QE/&#&");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(";-U:m 8\"KOh:^A!;7)hu-QE/&#&", qName1.toString());
      assertEquals("^A!;7)hu-QE/&#&", qName1.getName());
      assertEquals(";-U:m 8\"KOh", qName1.getPrefix());
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray0[0]);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      assertNotNull(nodeTypeTest0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(40, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionFloor(selfContext0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1516, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1516, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1516, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("cbeB%.k.U5P");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Constant constant0 = new Constant("h");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(variableReference0, coreOperationAnd0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply1);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      
      expressionArray0[4] = (Expression) variableReference1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      String string0 = variableReference1.toString();
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("$cbeB%.k.U5P", string0);
      assertNotNull(string0);
      assertNotSame(variableReference1, variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      
      expressionArray0[6] = (Expression) constant1;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-2378), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2378), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNull(object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals((-2378), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4201);
      assertNotNull(nodeTypeTest0);
      assertEquals(4201, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(4201, nodeTypeTest0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(4201, nodeTypeTest0.getNodeType());
      assertEquals(4201, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(4201, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step1);
      assertEquals(4201, nodeTypeTest0.getNodeType());
      assertEquals(4201, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(12, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(4201, nodeTypeTest0.getNodeType());
      assertEquals(12, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      assertEquals(3, stepArray0.length);
      assertNotNull(coreOperationDivide0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], locationPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(4201, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4201, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4201()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000005 div org.apache.commons.jxpath.ri.compiler.LocationPath@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 >= org.apache.commons.jxpath.ri.compiler.LocationPath@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000007) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(true, object0);
      assertNotNull(object0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", nodeNameTest0.toString());
      
      String string0 = "S\"V)k^p:=[6m]I\\umaQ";
      QName qName1 = new QName(string0, "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:", qName1.toString());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      QName qName1 = new QName("a#Z( *B'<:3DX", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      String string0 = "S\"V)k^p:=[6m]I\\umaQ";
      QName qName2 = new QName(string0, string0);
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertNotNull(qName2);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", qName2.toString());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getName());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getPrefix());
      
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName2);
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest2);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", qName2.toString());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getName());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getPrefix());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", nodeNameTest2.toString());
      assertNull(nodeNameTest2.getNamespaceURI());
      
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction((-214), (Expression[]) null);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      assertEquals((-214), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest2));
      assertNotNull(namespaceContext0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, nodeNameTest1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest2));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest2));
      assertNotNull(ancestorContext0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest2);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest2));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest2));
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertNotNull(attributeContext0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", qName2.toString());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getName());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getPrefix());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", nodeNameTest2.toString());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 10;
      Expression[] expressionArray1 = new Expression[7];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("8\"|`t{d:0p-$", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("8\"|`t{d:0p-$:", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-xvGlJwVy");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("8\"|`t{d:0p-$:", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("-xvGlJwVy", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(9, nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertEquals("8\"|`t{d:0p-$:", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("-xvGlJwVy", nodeNameTest0.getNamespaceURI());
      assertEquals(9, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", qName0.getName());
      assertEquals("8\"|`t{d:0p-$:", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("-xvGlJwVy", nodeNameTest0.getNamespaceURI());
      assertEquals(9, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      assertEquals(2, stepArray0.length);
      assertNotNull(nameAttributeTest0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, locationPath0);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(759, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(759, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Short short0 = new Short((short)40);
      assertEquals((short)40, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant("+%J@-~D%]>+@MiLL");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum('+%J@-~D%]>+@MiLL', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(759, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(759, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1656), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals((-1656), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1656()(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Constant constant0 = new Constant("M\"%i}:CEI=CXG,");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationDivide0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      int int0 = 18;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("AW-[xB$!Q2n{<+", "AW-[xB$!Q2n{<+");
      assertNotNull(qName0);
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", qName0.toString());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getPrefix());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", qName0.toString());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getPrefix());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", nodeNameTest0.toString());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", qName0.toString());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getPrefix());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", nodeNameTest0.toString());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", qName0.toString());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getPrefix());
      assertEquals("AW-[xB$!Q2n{<+", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("AW-[xB$!Q2n{<+:AW-[xB$!Q2n{<+", nodeNameTest0.toString());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      QName qName1 = new QName("ceiling");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertNull(qName1.getPrefix());
      assertEquals("ceiling", qName1.toString());
      assertEquals("ceiling", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, " b*IzB}z|AG ");
      assertNotNull(nodeNameTest0);
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(initialContext0, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(namespaceContext0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(ancestorContext0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      RootContext rootContext0 = ancestorContext0.getRootContext();
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      assertNotSame(qName0, qName1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(qName0.equals((Object)qName1));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      assertNotSame(qName0, qName1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      
      InitialContext initialContext1 = (InitialContext)rootContext1.getVariableContext(qName1);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(initialContext1);
      assertNotSame(qName0, qName1);
      assertNotSame(initialContext0, initialContext1);
      assertNotSame(qName1, qName0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(initialContext1, initialContext0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.getName());
      assertEquals(":org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", qName0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNull(qName1.getPrefix());
      assertEquals("ceiling", qName1.toString());
      assertEquals("ceiling", qName1.getName());
      assertEquals(" b*IzB}z|AG ", nodeNameTest0.getNamespaceURI());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertEquals(0, initialContext1.getPosition());
      assertEquals(0, initialContext1.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvalContext evalContext0 = null;
      String string0 = "wfPQ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      String string1 = "sum";
      QName qName0 = new QName("4jg=sK[NU8khx", "H7IrI@_A%jg&@1A");
      assertNotNull(qName0);
      assertEquals("4jg=sK[NU8khx", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A", qName0.getName());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("4jg=sK[NU8khx", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A", qName0.getName());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", nodeNameTest0.toString());
      
      QName qName1 = new QName("H7IrI@_A%jg&@1A", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.getName());
      assertEquals("H7IrI@_A%jg&@1A", qName1.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A:", qName1.toString());
      
      QName qName2 = new QName("4jg=sK[NU8khx", "");
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertNotNull(qName2);
      assertEquals("4jg=sK[NU8khx", qName2.getPrefix());
      assertEquals("4jg=sK[NU8khx:", qName2.toString());
      assertEquals("", qName2.getName());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("4jg=sK[NU8khx", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A", qName0.getName());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext1 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("4jg=sK[NU8khx", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A", qName0.getName());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("4jg=sK[NU8khx:H7IrI@_A%jg&@1A", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(9, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Byte byte0 = new Byte((byte)6);
      assertEquals((byte)6, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction((byte)6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName((String) null, "8\"|`t{d:0p-$");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getName());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(2107, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2107, coreFunction1.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Constant constant0 = new Constant("Cannot set value of an element of a ");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot set value of an element of a ");
      assertNotNull(processingInstructionTest0);
      assertEquals("Cannot set value of an element of a ", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("Cannot set value of an element of a ", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(4, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName((String) null, "id(");
      assertNotNull(qName0);
      assertEquals("id(", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("id(", qName0.toString());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction2 = new CoreFunction((short)46, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(46, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(0, key(0, 0, 0, 0), 0, 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Short short0 = new Short((short)40);
      assertEquals((short)40, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("org)apache.commons.jxpath.ri.compiler.CoreFunction", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      assertNotNull(qName0);
      assertEquals("org)apache.commons.jxpath.ri.compiler.CoreFunction:org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org)apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org)apache.commons.jxpath.ri.compiler.CoreFunction:org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org)apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org)apache.commons.jxpath.ri.compiler.CoreFunction:org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      
      QName qName1 = new QName("*}%\u0000D<", "Invalid argument type for 'sum': ");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("*}%\u0000D<:Invalid argument type for 'sum': ", qName1.toString());
      assertEquals("Invalid argument type for 'sum': ", qName1.getName());
      assertEquals("*}%\u0000D<", qName1.getPrefix());
      
      QName qName2 = new QName("i3KCiFS4pScQ&}kLD&&", "Namespace registration is not implemented by ");
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      assertEquals("Namespace registration is not implemented by ", qName2.getName());
      assertEquals("i3KCiFS4pScQ&}kLD&&:Namespace registration is not implemented by ", qName2.toString());
      assertEquals("i3KCiFS4pScQ&}kLD&&", qName2.getPrefix());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("*}%\u0000D<:Invalid argument type for 'sum': ", qName1.toString());
      assertEquals("Invalid argument type for 'sum': ", qName1.getName());
      assertEquals("*}%\u0000D<", qName1.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("*}%\u0000D<:Invalid argument type for 'sum': ", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, false);
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("*}%\u0000D<:Invalid argument type for 'sum': ", qName1.toString());
      assertEquals("Invalid argument type for 'sum': ", qName1.getName());
      assertEquals("*}%\u0000D<", qName1.getPrefix());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("*}%\u0000D<:Invalid argument type for 'sum': ", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(7, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(7, step0.getAxis());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2431, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(2431, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      Object object0 = coreFunction0.functionSum(namespaceContext0);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) expressionPath0;
      expressionArray1[5] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(2431, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(2431, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2431()('null', 'null', 'null'['null']/preceding::null['null']/preceding::processing-instruction('null')['null']/UNKNOWN::null['null'], 'null', 'null'['null']/preceding::null['null']/preceding::processing-instruction('null')['null']/UNKNOWN::null['null'], 'null'['null']/preceding::null['null']/preceding::processing-instruction('null')['null']/UNKNOWN::null['null'])
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName("H7IrI@_A%jg&@1A", "sum");
      assertNotNull(qName0);
      assertEquals("H7IrI@_A%jg&@1A", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("H7IrI@_A%jg&@1A", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H7IrI@_A%jg&@1A:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      QName qName1 = new QName("j", "j");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("j:j", qName1.toString());
      assertEquals("j", qName1.getPrefix());
      assertEquals("j", qName1.getName());
      
      QName qName2 = new QName("id(", "sum");
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      assertEquals("id(:sum", qName2.toString());
      assertEquals("id(", qName2.getPrefix());
      assertEquals("sum", qName2.getName());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("j:j", qName1.toString());
      assertEquals("j", qName1.getPrefix());
      assertEquals("j", qName1.getName());
      assertEquals("j:j", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      CoreFunction coreFunction2 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(boolean0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      
      boolean boolean1 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("H7IrI@_A%jg&@1A", qName0.getPrefix());
      assertEquals("H7IrI@_A%jg&@1A:sum", qName0.toString());
      assertEquals("sum", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("H7IrI@_A%jg&@1A:sum", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = "org.apache.commons.jxpath.ri.compiler.CoreFunction";
      String string1 = "Nyko";
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "Nyko");
      assertNotNull(qName0);
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("cbeB%.k.U5P");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      assertNotNull(coreOperationNegate0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant("h");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(variableReference0, coreOperationAnd0);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationMultiply1);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      
      expressionArray0[4] = (Expression) variableReference1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("cbeB%.k.U5P", qName0.getName());
      assertEquals("cbeB%.k.U5P", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[6] = (Expression) constant1;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, expressionArray1.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-2378), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-2378), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNull(object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-2378), coreFunction0.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionKey(selfContext0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName((String) null, "8\"|`t{d:0p-$");
      assertNotNull(qName0);
      assertEquals("8\"|`t{d:0p-$", qName0.getName());
      assertEquals("8\"|`t{d:0p-$", qName0.toString());
      assertNull(qName0.getPrefix());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(2107, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2107, coreFunction1.getFunctionCode());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "Nyko");
      assertNotNull(qName0);
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", nodeNameTest0.toString());
      
      QName qName1 = new QName("Nyko", "pd=|bH115m");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("Nyko:pd=|bH115m", qName1.toString());
      assertEquals("Nyko", qName1.getPrefix());
      assertEquals("pd=|bH115m", qName1.getName());
      
      QName qName2 = new QName("", "{");
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertNotNull(qName2);
      assertEquals("{", qName2.getName());
      assertEquals(":{", qName2.toString());
      assertEquals("", qName2.getPrefix());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName2);
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("{", qName2.getName());
      assertEquals(":{", qName2.toString());
      assertEquals("", qName2.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(":{", nodeNameTest1.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(qName0.equals((Object)qName2));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("Nyko", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:Nyko", nodeNameTest0.toString());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(7, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(7, step0.getAxis());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2431, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(2431, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 9, (NodeTest) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionCeiling(evalContext0);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(object0);
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.compute(parentContext0);
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Object object2 = coreFunction0.computeValue(namespaceContext0);
      assertEquals("", object2);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object2);
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName((String) null, "8\"|`t{d:0p-$");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("8\"|`t{d:0p-$", qName0.toString());
      assertEquals("8\"|`t{d:0p-$", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8\"|`t{d:0p-$", nodeNameTest0.toString());
      
      QName qName1 = new QName("The specified collection element does not exist: ", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.getName());
      assertEquals("The specified collection element does not exist: :", qName1.toString());
      assertEquals("The specified collection element does not exist: ", qName1.getPrefix());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("", qName1.getName());
      assertEquals("The specified collection element does not exist: :", qName1.toString());
      assertEquals("The specified collection element does not exist: ", qName1.getPrefix());
      assertEquals("The specified collection element does not exist: :", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) expressionPath0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) locationPath0;
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) expressionPath0;
      expressionArray1[4] = (Expression) expressionPath0;
      expressionArray1[5] = (Expression) expressionPath0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1543));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1543), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(12, nodeTypeTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals((-1543), nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      
      boolean boolean0 = expressionPath0.isSimpleStep(step0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(boolean0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals((-1543), nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      
      expressionArray1[6] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(locationPath0, expressionArray1, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, stepArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNotNull(expressionPath1);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], locationPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(coreOperationEqual0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[1], expressionArray1[2]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Long long0 = new Long(30);
      assertEquals(30L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expressionArray0[0]);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction2);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction2.compute(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(format-number(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000002, format-number(), format-number(), format-number(), format-number())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 0;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(7, (NodeTest) null, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(7, step0.getAxis());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2431, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(step2);
      assertEquals(2431, step2.getAxis());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 9, (NodeTest) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(evalContext1);
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      
      Object object0 = coreFunction0.functionCeiling(evalContext1);
      assertEquals(0.0, object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(object0);
      assertTrue(evalContext1.isChildOrderingRequired());
      assertEquals(0, evalContext1.getDocumentOrder());
      assertEquals(0, evalContext1.getPosition());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.compute(parentContext0);
      assertEquals("", object1);
      assertEquals(1, expressionArray0.length);
      assertNotNull(object1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        parentContext0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Constant constant0 = new Constant("ancestor");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      String string0 = constant0.toString();
      assertEquals("'ancestor'", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[2], expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      expressionArray1[8] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(9, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      int int0 = 18;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("ES");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      QName qName0 = new QName((String) null, "ES");
      assertNotNull(qName0);
      assertEquals("ES", qName0.toString());
      assertEquals("ES", qName0.getName());
      assertNull(qName0.getPrefix());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg1();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(8, expressionArray0.length);
      assertNull(expression0);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = expression0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      expressionArray1[4] = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(extensionFunction0);
      assertEquals("ES", qName0.toString());
      assertEquals("ES", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expression0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(8, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("ES", qName0.toString());
      assertEquals("ES", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(4366, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4366, coreFunction0.getFunctionCode());
      
      Constant constant0 = new Constant("JOHdWVlyGY+");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4366, coreFunction0.getFunctionCode());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("JOHdWVlyGY+");
      assertNotNull(processingInstructionTest0);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(4366, processingInstructionTest0, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals(4366, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(18, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step1);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals(18, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1659), processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step2);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals((-1659), step2.getAxis());
      
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      expressionArray1[5] = (Expression) coreFunction0;
      Step step3 = new Step(2877, processingInstructionTest0, expressionArray1);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step3);
      assertEquals(2877, step3.getAxis());
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step(18, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals(2, expressionArray0.length);
      assertNotNull(step4);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals(18, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-633), processingInstructionTest0, expressionArray1);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(step5);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals((-633), step5.getAxis());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 2877, processingInstructionTest0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNull(evalContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals("JOHdWVlyGY+", processingInstructionTest0.getTarget());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, expressionArray0.length);
      assertNull(object0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(4366, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(8, nodeTypeTest0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(8, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(4201, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step1);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(4201, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(4201, nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step2);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(4201, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-1), nodeTypeTest0, expressionArray0);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step3);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals((-1), step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(64, nodeTypeTest0, expressionArray0);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(step4);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(64, step4.getAxis());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(5, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      assertNotNull(processingInstructionTest0);
      assertEquals("substring-before", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      QName qName1 = new QName("a#Z( *B'<:3DX", "");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("a#Z( *B'<:3DX:", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      String string0 = "S\"V)k^p:=[6m]I\\umaQ";
      QName qName2 = new QName(string0, string0);
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertNotNull(qName2);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getPrefix());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", qName2.toString());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getName());
      
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName2);
      assertFalse(qName2.equals((Object)qName0));
      assertFalse(qName2.equals((Object)qName1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest1));
      assertFalse(nodeNameTest2.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest2);
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getPrefix());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", qName2.toString());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ", qName2.getName());
      assertNull(nodeNameTest2.getNamespaceURI());
      assertFalse(nodeNameTest2.isWildcard());
      assertEquals("S\"V)k^p:=[6m]I\\umaQ:S\"V)k^p:=[6m]I\\umaQ", nodeNameTest2.toString());
      
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName1);
      assertFalse(qName1.equals((Object)qName2));
      assertFalse(qName1.equals((Object)qName0));
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      assertEquals("a#Z( *B'<:3DX", qName1.getPrefix());
      assertEquals("a#Z( *B'<:3DX:", qName1.toString());
      assertEquals("", qName1.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, variablePointer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1378, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(1378, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      assertNotNull(processingInstructionTest0);
      assertEquals("translate", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(unionContext0, processingInstructionTest0);
      assertEquals(5, evalContextArray0.length);
      assertNotNull(parentContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("translate", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      
      CoreFunction coreFunction2 = new CoreFunction(1378, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(1378, coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction2.compute(evalContextArray0[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(5, evalContextArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNull(object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(1378, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1378()(1, unknownFunction1378()(1), unknownFunction1378()(1), unknownFunction1378()(1), 1, 1, unknownFunction1378()(1))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationSubtract0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray0[1]);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationDivide0;
      String string0 = coreOperationGreaterThan0.toString();
      assertEquals(7, expressionArray0.length);
      assertNotNull(string0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[4], coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan1;
      boolean boolean2 = extensionFunction0.isContextDependent();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(7, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationDivide0, expressionArray0[0]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationSubtract1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationSubtract1;
      expressionArray1[5] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray1.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      boolean boolean3 = coreOperationOr0.computeContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(6, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2074, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2074, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction2074()()", string0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2074, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Constant constant0 = new Constant("ES");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("h");
      assertNotNull(processingInstructionTest0);
      assertEquals("h", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1378, coreFunction0.getFunctionCode());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1378, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(1378, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(5, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("translate");
      assertNotNull(processingInstructionTest0);
      assertEquals("translate", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(unionContext0, processingInstructionTest0);
      assertEquals(5, evalContextArray0.length);
      assertNotNull(parentContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("translate", processingInstructionTest0.getTarget());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      
      CoreFunction coreFunction2 = new CoreFunction(1378, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(7, expressionArray1.length);
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(1378, coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction2.compute(evalContextArray0[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(5, evalContextArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNull(object0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(1378, coreFunction2.getFunctionCode());
      
      Object object1 = coreFunction2.functionConcat(evalContextArray0[4]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals("111", object1);
      assertEquals(5, evalContextArray0.length);
      assertEquals(7, expressionArray1.length);
      assertNotNull(object1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(1378, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1378()(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      String string0 = constant0.toString();
      assertEquals("46", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-358), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-358), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-358()(46, 46, 46, 46, 46, 46, 46, 46, 46)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)46, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertEquals(9, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      QName qName0 = new QName("\"CpvQZ< [2OB");
      assertNotNull(qName0);
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "s)E}>H6`^N[\"");
      assertNotNull(nodeNameTest0);
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("s)E}>H6`^N[\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"CpvQZ< [2OB", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("s)E}>H6`^N[\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"CpvQZ< [2OB", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(descendantContext0, (short)46, nodeNameTest0);
      assertEquals(9, expressionArray0.length);
      assertNull(evalContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("s)E}>H6`^N[\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"CpvQZ< [2OB", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("s)E}>H6`^N[\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"CpvQZ< [2OB", nodeNameTest0.toString());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(9, expressionArray0.length);
      assertNull(object0);
      assertEquals(46, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(981, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(981, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      DescendantContext descendantContext1 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertFalse(descendantContext1.equals((Object)descendantContext0));
      assertNotNull(descendantContext1);
      assertEquals("\"CpvQZ< [2OB", qName0.toString());
      assertEquals("\"CpvQZ< [2OB", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("s)E}>H6`^N[\"", nodeNameTest0.getNamespaceURI());
      assertEquals("\"CpvQZ< [2OB", nodeNameTest0.toString());
      assertTrue(descendantContext1.isChildOrderingRequired());
      assertEquals(0, descendantContext1.getDocumentOrder());
      assertEquals(0, descendantContext1.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(46, 46, 46, 46, 46, 46, 46)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(".vI7' c");
      assertNotNull(processingInstructionTest0);
      assertEquals(".vI7' c", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1381));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1381), nodeTypeTest0.getNodeType());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("", processingInstructionTest1.getTarget());
      
      Object object0 = coreFunction0.compute(nodeSetContext0);
      assertEquals(1, expressionArray0.length);
      assertNull(object0);
      assertEquals(1378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1378, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Short short0 = new Short((short)46);
      assertEquals((short)46, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1729, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1729, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(1729, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(1729, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1729()(46, 46, 46)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(evalContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionString(evalContext0);
      assertEquals("", object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(object0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        parentContext0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(false, object0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction((-1376), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1376), coreFunction1.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreFunction2);
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(unknownFunction-1376()(), 1, last(), unknownFunction-1376()(), 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[18];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(18, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(18, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(18, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      String string0 = "wfP}EQ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfP}EQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfP}EQ", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("5H&]");
      assertNotNull(qName0);
      assertEquals("5H&]", qName0.getName());
      assertEquals("5H&]", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("5H&]", qName0.getName());
      assertEquals("5H&]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("5H&]", qName0.getName());
      assertEquals("5H&]", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName1 = new QName("5H&]");
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("5H&]", qName1.getName());
      assertEquals("5H&]", qName1.toString());
      assertNull(qName1.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName1.equals((Object)qName0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("5H&]", qName1.getName());
      assertEquals("5H&]", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray1[1] = (Expression) extensionFunction0;
      Byte byte0 = new Byte((byte)3);
      assertEquals((byte)3, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(qName1.equals((Object)qName0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      assertEquals("5H&]", qName1.getName());
      assertEquals("5H&]", qName1.toString());
      assertNull(qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = null;
      String string0 = "wfPQ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      int int0 = (-1578);
      CoreFunction coreFunction1 = new CoreFunction((-1578), (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1578), coreFunction1.getFunctionCode());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      String string0 = "\\uddd  ";
      QName qName0 = new QName(string0, "");
      assertNotNull(qName0);
      assertEquals("\\uddd  :", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("\\uddd  ", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("\\uddd  :", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("\\uddd  ", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("\\uddd  :", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertNotNull(parentContext0);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction(4201, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(4201, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("substring-before");
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertEquals("substring-before", processingInstructionTest1.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      String string0 = "wfPQ";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      assertNotNull(processingInstructionTest0);
      assertEquals("wfPQ", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[0]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1674, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1674, coreFunction0.getFunctionCode());
      
      CoreOperationNotEqual coreOperationNotEqual1 = (CoreOperationNotEqual)coreFunction0.getArg3();
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual1);
      assertSame(coreOperationNotEqual1, coreOperationNotEqual0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1674, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual1, coreOperationMod0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1674, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual0));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual2);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1674, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual2.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual2;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(46, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(46, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      
      EvalContext evalContext0 = null;
      int int0 = (-2113);
      int int1 = 8;
      // Undeclared exception!
      try { 
        coreOperationMod0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(45, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction1;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction2.compute((EvalContext) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[2]);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "starts-with";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(1, 1, 1, 1, 1, 1, 1, 1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeTypeTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      coreFunction0.compute(nodeSetContext0);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      Object object0 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals("1", object0);
      assertEquals(28, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Expression expression0 = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Constant constant0 = new Constant("");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(4201, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("Not a collection: ");
      NamespaceContext namespaceContext1 = new NamespaceContext(namespaceContext0, processingInstructionTest1);
      Object object0 = coreFunction0.compute(namespaceContext1);
      assertNotNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      coreFunction1.functionNormalizeSpace(parentContext0);
      assertEquals(28, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(42, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2113), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(187, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      QName qName0 = new QName("y[We)s:a^'/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "+zo~?aa");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-2212), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2212()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 1378;
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Double double1 = Expression.ONE;
      Constant constant0 = new Constant(double1);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      coreFunction1.functionNumber((EvalContext) null);
      coreFunction0.functionRound((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("Not a collection: ");
      NamespaceContext namespaceContext1 = new NamespaceContext(namespaceContext0, processingInstructionTest1);
      coreFunction0.compute(namespaceContext1);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext1, expressionArray0[0]);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      Byte byte0 = new Byte((byte)21);
      Constant constant0 = new Constant(byte0);
      CoreFunction coreFunction1 = new CoreFunction(4201, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("substring-before");
      CoreFunction coreFunction2 = new CoreFunction((byte)21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction1.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      int int0 = 0;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(parentContext0);
      // Undeclared exception!
      try { 
        parentContext0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Double double0 = Expression.ONE;
      Short short0 = new Short((short)46);
      Constant constant0 = new Constant(short0);
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "\" could not be added as content to \"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      QName qName1 = new QName("C\"J<L><1G6`\"[|Jy", "C\"J<L><1G6`\"[|Jy");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      CoreFunction coreFunction1 = new CoreFunction((short)46, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(46, 46, 46, 46, 46, 46, 46, 46, 46)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray1);
      QName qName0 = new QName("\" could not be added as content to \"", "\" could not be added as content to \"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      QName qName1 = new QName("\" could not be added as content to \"", "");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(40, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("o)Irbl{$]9'pvIn5%");
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction34()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getArgumentCount();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      int int0 = 4;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wfPQ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(40, (Expression[]) null);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction2 = new CoreFunction(34, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Object object0 = coreFunction0.functionFloor(namespaceContext0);
      assertEquals(1.0, object0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      coreFunction1.getArgumentCount();
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(5, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = 5;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      int int1 = (-1643);
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "substring");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1643), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" could not create an object for path: ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Object object0 = coreFunction0.compute(namespaceContext0);
      assertNotNull(object0);
      assertEquals(5, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      Object object1 = coreFunction0.functionRound(namespaceContext0);
      assertEquals(1.0, object1);
      
      coreFunction0.functionStringLength((EvalContext) null);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray1[2]);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2212));
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray1[2]);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("ceiling");
      InitialContext initialContext0 = new InitialContext(evalContext0);
      coreFunction0.functionNull(initialContext0);
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Object object0 = coreFunction0.compute(namespaceContext0);
      assertNotNull(object0);
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(false, object1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[4];
      String string0 = "I";
      QName qName0 = new QName("I");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[0] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      expressionArray1[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1507), expressionArray0);
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1507), expressionArray1);
      expressionArray1[3] = (Expression) coreFunction1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationLessThanOrEqual0);
      Expression[] expressionArray2 = new Expression[0];
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray2);
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray2);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray1[1], coreOperationUnion0);
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      coreFunction2.getArgumentCount();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(9, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction3.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Constant constant0 = new Constant("");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray1[2]);
      QName qName0 = new QName("IvsWmp>n\u0002g");
      QName qName1 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "number");
      CoreFunction coreFunction0 = new CoreFunction((-3191), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(namespaceContext0);
      assertEquals(46, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(1, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray1[2]);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, " b*IzB}z|AG ");
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, (NodeTest) null);
      coreFunction0.functionName(evalContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathAbstractFactoryException", "org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      QName qName1 = new QName("org.apache.commons.jxpath.JXPathAbstractFactoryException", "C\"J<L><1G6`\"[|Jy");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest1);
      coreFunction0.functionName(attributeContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathAbstractFactoryException", "jkun");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(37, expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.model.beans.NullPointer");
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName((String) null, "vcP{m");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual", "org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual");
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-538), expressionArray0);
      QName qName1 = new QName("name", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      String string0 = "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual";
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(1378, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      CoreFunction coreFunction1 = new CoreFunction((-2672), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray1[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual((Expression) null, coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationEqual1;
      QName qName0 = new QName("TN", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationUnion0);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[7] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Locale locale0 = Locale.FRANCE;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreOperationAnd0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      Object object0 = coreFunction0.compute(namespaceContext0);
      assertNotNull(object0);
      
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      coreFunction1.functionNamespaceURI((EvalContext) null);
      assertEquals(2, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(34, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.functionLast(unionContext0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("o\"3^_KaD02Y5!\"2Fk");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(namespaceContext0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      QName qName0 = new QName("name", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Constant constant0 = new Constant("+%J@-~D%]>+@MiLL");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("h");
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[7] = (Expression) coreOperationAnd0;
      expressionArray1[8] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionLocalName(namespaceContext0);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(namespaceContext0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      processingInstructionTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(1, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(1, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, " b*IzB}z|AG ");
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeNameTest0);
      coreFunction0.functionName(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1504), expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      coreFunction0.functionNumber((EvalContext) null);
      assertEquals((-1504), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreFunction coreFunction0 = new CoreFunction((-1050), expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1050()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(46, expressionArray0);
      coreFunction1.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.NullPointer", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName1 = new QName("2FrC:L9", "u][B");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd1;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1254, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(1254, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getArgumentCount();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionPosition(parentContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, " b*IzB}z|AG ");
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeNameTest0);
      coreFunction0.functionName(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      String string0 = "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual";
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathAbstractFactoryException", "org.apache.commons.jxpath.JXPathAbstractFactoryException");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionName(attributeContext0);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.NullPointer", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("An EntityRef is not allowed at the document root");
      processingInstructionTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.compute((EvalContext) null);
      UnionContext unionContext0 = new UnionContext(namespaceContext0, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 >= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1504), expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      Object object0 = coreFunction0.functionNot(namespaceContext0);
      assertEquals((-1504), coreFunction0.getFunctionCode());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.NullPointer", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      coreOperationGreaterThanOrEqual0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 >= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-600), (Expression[]) null);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-203));
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreFunction0;
      Step step0 = new Step((-209), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(606, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-209), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      Step step6 = new Step(606, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) descendantContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps(unionContext0);
      coreFunction0.functionNull(evalContext0);
      assertEquals((-600), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-538), expressionArray0);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-538()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-1), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationLessThan0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction(1373, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "+]V8|f5|?4PRiBhH$F");
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest1);
      // Undeclared exception!
      coreFunction0.functionName(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("substring", "substring");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-177), expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.getFunctionCode();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationUnion0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-177()(|org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2261, expressionArray0);
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(309, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step1 = new Step((-330), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      Locale locale0 = Locale.GERMANY;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName1 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, " b*IzB}z|AG ");
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, expressionArray1[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual((Expression) null, coreOperationUnion1);
      expressionArray0[4] = (Expression) coreOperationEqual1;
      QName qName0 = new QName("TN", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationUnion1);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      expressionArray0[7] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null, (NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreOperationAnd0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("g*%");
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("S^");
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("XYFn}:oxA?|\"dK$J");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("XYFn}:oxA?|\"dK$J");
      Step step0 = new Step(100, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(100, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step(100, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(100, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-651), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(40, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      expressionPath0.createContextForStep(descendantContext0, 40, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      coreFunction0.functionBoolean(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(579, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expression0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationMultiply0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, expression0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, nodeNameTest0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("number");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[1] = null;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expression0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("number", "number");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(2291, expressionArray1);
      expressionArray0[4] = (Expression) coreFunction1;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, coreOperationSubtract0);
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer(0);
      Constant constant0 = new Constant(integer0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, nodeTypeTest0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        ancestorContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
