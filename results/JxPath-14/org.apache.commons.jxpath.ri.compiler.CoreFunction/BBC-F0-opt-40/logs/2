* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-40
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 11174
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 1918496325
* Starting evolution
bbc usage percentage is: 40%
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 08:06:30.277 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 08:06:35.386 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was [METHODNOEX] org.apache.commons.jxpath.ri.compiler.CoreFunction.getArg3()Lorg/apache/commons/jxpath/ri/compiler/Expression;
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
[MASTER] 08:08:50.382 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.NamespaceResolver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 601s and 1105 generations, 477068 statements, best individual has fitness: 467.0
* Minimizing test suite
[MASTER] 08:17:33.901 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 344
* Number of covered goals: 285
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 86%
* Total number of goals: 355
* Number of covered goals: 307
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 156
* Number of covered goals: 156
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 82%
* Total number of goals: 616
* Number of covered goals: 504
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 38%
* Total number of goals: 82
* Number of covered goals: 31
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 95%
* Total number of goals: 40
* Number of covered goals: 38
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 86%
* Total number of goals: 355
* Number of covered goals: 307
* Generated 328 tests with total length 5720
* Resulting test suite's coverage: 78% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:18:16.870 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.68335% of time used, but only 160/328 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 08:18:37.134 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:18:37.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:18:37.544 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
Constant constant0 = new Constant("");
expressionArray0[0] = (Expression) constant0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
expressionArray0[1] = (Expression) nameAttributeTest0;
Step[] stepArray0 = new Step[0];
ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
expressionArray0[2] = (Expression) expressionPath0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[3] = (Expression) coreOperationOr0;
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[4] = (Expression) coreOperationUnion0;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, expressionPath0);
expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationUnion0);
expressionArray0[6] = (Expression) coreOperationSubtract0;
CoreFunction coreFunction0 = new CoreFunction((-5544), expressionArray0);
coreFunction0.functionRound((EvalContext) null);

[MASTER] 08:18:45.046 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:18:45.048 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
Constant constant0 = new Constant("");
expressionArray0[0] = (Expression) constant0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
expressionArray0[1] = (Expression) nameAttributeTest0;
Step[] stepArray0 = new Step[0];
ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
expressionArray0[2] = (Expression) expressionPath0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[3] = (Expression) coreOperationOr0;
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[4] = (Expression) coreOperationUnion0;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, expressionPath0);
expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationUnion0);
expressionArray0[6] = (Expression) coreOperationSubtract0;
CoreFunction coreFunction0 = new CoreFunction((-5544), expressionArray0);
coreFunction0.functionTrue((EvalContext) null);

[MASTER] 08:18:50.032 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:18:50.034 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
Constant constant0 = new Constant("");
expressionArray0[0] = (Expression) constant0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
expressionArray0[1] = (Expression) nameAttributeTest0;
Step[] stepArray0 = new Step[0];
ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
expressionArray0[2] = (Expression) expressionPath0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[3] = (Expression) coreOperationOr0;
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[4] = (Expression) coreOperationUnion0;
CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, expressionPath0);
expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationUnion0);
CoreFunction coreFunction0 = new CoreFunction((-5544), expressionArray0);
coreFunction0.functionRound((EvalContext) null);

[MASTER] 08:18:50.385 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:18:50.387 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
Constant constant0 = new Constant("");
expressionArray0[0] = (Expression) constant0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
expressionArray0[1] = (Expression) nameAttributeTest0;
Step[] stepArray0 = new Step[0];
ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
expressionArray0[2] = (Expression) expressionPath0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[3] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction((-5544), expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionID((EvalContext) null);

[MASTER] 08:19:00.602 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:00.602 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Expression[] expressionArray0 = new Expression[2];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[0] = (Expression) coreOperationAnd0;
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
expressionArray0[1] = (Expression) coreOperationMultiply0;
CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionKey((EvalContext) null);

[MASTER] 08:19:02.868 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:02.870 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 8;
Float float0 = new Float(0.0);
Constant constant0 = new Constant(float0);
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Expression[] expressionArray0 = new Expression[1];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionLocalName((EvalContext) null);

[MASTER] 08:19:04.123 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:04.125 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Expression[] expressionArray0 = new Expression[2];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[0] = (Expression) coreOperationAnd0;
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
expressionArray0[1] = (Expression) coreOperationMultiply0;
CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionKey((EvalContext) null);

[MASTER] 08:19:04.717 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:04.720 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[1];
Step[] stepArray0 = new Step[7];
NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2868);
Step step0 = new Step(2868, nodeTypeTest0, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step(2868, nodeTypeTest0, expressionArray0);
stepArray0[1] = step1;
Step step2 = new Step(2868, nodeTypeTest0, expressionArray0);
stepArray0[2] = step2;
Step step3 = new Step(1932, nodeTypeTest0, expressionArray0);
stepArray0[3] = step3;
Step step4 = new Step(2868, nodeTypeTest0, expressionArray0);
stepArray0[4] = step4;
Step step5 = new Step(40, nodeTypeTest0, expressionArray0);
stepArray0[5] = step5;
NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
Step step6 = new Step(40, nodeNameTest0, expressionArray0);
stepArray0[6] = step6;
LocationPath locationPath0 = new LocationPath(true, stepArray0);
expressionArray0[0] = (Expression) locationPath0;
CoreFunction coreFunction0 = new CoreFunction(2868, expressionArray0);
JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step5);
JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, nodeTypeTest0, (Pointer) null);
BasicVariables basicVariables0 = new BasicVariables();
VariablePointer variablePointer0 = new VariablePointer((QName) null);
RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
RootContext rootContext1 = rootContext0.getRootContext();
rootContext1.getAbsoluteRootContext();
coreFunction0.computeContextDependent();

[MASTER] 08:19:06.594 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:06.597 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[6];
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, (Expression) null);
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, (Expression) null);
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationMultiply0);
Step[] stepArray0 = new Step[5];
Expression[] expressionArray1 = new Expression[9];
expressionArray1[0] = (Expression) coreOperationGreaterThan0;
expressionArray1[1] = null;
expressionArray1[2] = (Expression) coreOperationGreaterThan0;
expressionArray1[3] = (Expression) coreOperationNegate0;
expressionArray1[4] = null;
expressionArray1[5] = (Expression) coreOperationNegate0;
expressionArray1[6] = null;
expressionArray1[7] = (Expression) nameAttributeTest0;
expressionArray1[8] = (Expression) coreOperationGreaterThan0;
Step step0 = new Step((-604), (NodeTest) null, expressionArray1);
stepArray0[0] = step0;
Step step1 = new Step((-604), (NodeTest) null, expressionArray1);
stepArray0[1] = step1;
Step step2 = new Step((-604), (NodeTest) null, expressionArray1);
stepArray0[2] = step2;
Expression[] expressionArray2 = new Expression[5];
expressionArray2[0] = (Expression) coreOperationMultiply0;
expressionArray2[1] = (Expression) nameAttributeTest0;
expressionArray2[2] = null;
expressionArray2[3] = (Expression) nameAttributeTest0;
expressionArray2[4] = null;
Step step3 = new Step((-604), (NodeTest) null, expressionArray2);
stepArray0[3] = step3;
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("^_7M");
Expression[] expressionArray3 = new Expression[7];
expressionArray3[0] = null;
expressionArray3[1] = null;
expressionArray3[2] = (Expression) nameAttributeTest0;
expressionArray3[3] = (Expression) coreOperationMultiply0;
expressionArray3[4] = null;
expressionArray3[5] = null;
expressionArray3[6] = null;
Step step4 = new Step(85, processingInstructionTest0, expressionArray3);
stepArray0[4] = step4;
ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
expressionArray0[0] = (Expression) expressionPath0;
QName qName0 = new QName("^_7M");
VariableReference variableReference0 = new VariableReference(qName0);
expressionArray0[1] = (Expression) variableReference0;
CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[8], expressionArray1[4]);
expressionArray0[2] = (Expression) coreOperationGreaterThan1;
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray3);
expressionArray0[3] = (Expression) extensionFunction0;
CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray2[0], expressionArray1[2]);
expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray2[2], expressionArray3[0]);
expressionArray0[5] = (Expression) coreOperationLessThan0;
CoreFunction coreFunction0 = new CoreFunction((-604), expressionArray0);
AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
coreFunction0.functionNormalizeSpace(ancestorContext0);

[MASTER] 08:19:08.400 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:08.401 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldAllThrowIOExceptions();
Expression[] expressionArray0 = new Expression[3];
Double double0 = new Double(3230);
Constant constant0 = new Constant(double0);
CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
Step[] stepArray0 = new Step[5];
Step step0 = new Step((-3164), (NodeTest) null, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step((-3164), (NodeTest) null, expressionArray0);
stepArray0[1] = step1;
Step step2 = new Step((-3164), (NodeTest) null, expressionArray0);
stepArray0[2] = step2;
Step step3 = new Step(11, (NodeTest) null, expressionArray0);
stepArray0[3] = step3;
Expression[] expressionArray1 = new Expression[8];
expressionArray1[0] = (Expression) coreOperationMod0;
expressionArray1[1] = (Expression) constant0;
expressionArray1[2] = (Expression) coreOperationMod0;
expressionArray1[3] = (Expression) coreOperationMod0;
expressionArray1[4] = (Expression) coreOperationMod0;
expressionArray1[5] = (Expression) coreOperationMod0;
expressionArray1[6] = (Expression) constant0;
expressionArray1[7] = (Expression) coreOperationMod0;
Step step4 = new Step(11, (NodeTest) null, expressionArray1);
stepArray0[4] = step4;
ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
expressionArray0[0] = (Expression) expressionPath0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[7], expressionArray1[5]);
expressionArray0[1] = (Expression) coreOperationLessThan0;
LocationPath locationPath0 = new LocationPath(true, stepArray0);
expressionArray0[2] = (Expression) locationPath0;
CoreFunction coreFunction0 = new CoreFunction(3230, expressionArray0);
coreFunction0.functionCeiling((EvalContext) null);

[MASTER] 08:19:11.360 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:19:11.360 [logback-1] WARN  JUnitAnalyzer - Failing test:
 QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.PredicateContext");
Expression[] expressionArray0 = new Expression[2];
CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
expressionArray0[0] = (Expression) coreOperationAnd0;
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
expressionArray0[1] = (Expression) coreOperationAdd0;
Constant constant0 = new Constant("NPecUT6x1SzK:");
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
VariableReference variableReference0 = new VariableReference(qName0);
FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
QName qName1 = new QName("", "NPecUT6x1SzK:");
CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
coreFunction0.getFunctionName();
FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
coreFunction0.functionContains((EvalContext) null);

* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/BBC-F0-opt-40/tests/2
* Done!

* Computation finished
