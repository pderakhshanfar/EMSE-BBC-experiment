/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:38:10 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanAttributeIterator;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-979), (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-979), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray0;
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], locationPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, locationPath0);
      assertNotNull(coreOperationSubtract1);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      QName qName0 = new QName("concat", "bas|a6*");
      assertNotNull(qName0);
      assertEquals("bas|a6*", qName0.getName());
      assertEquals("concat", qName0.getPrefix());
      assertEquals("concat:bas|a6*", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("bas|a6*", qName0.getName());
      assertEquals("concat", qName0.getPrefix());
      assertEquals("concat:bas|a6*", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("tGn_^vbPtTw_:7");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMod0);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-1134), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(9, expressionArray0.length);
      assertSame(expression0, constant0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      expressionArray0[3] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expression0, expressionArray0[2]);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, expression0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationEqual0, expressionArray0[3]);
      assertNotNull(coreOperationMod1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationMod1, expressionArray0[4]);
      assertNotNull(coreOperationLessThan1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1134), coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction1 = new CoreFunction(2801, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2801, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      assertNotNull(childContext0);
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(childContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "V<rZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("V<rZjG", "V<rZjG");
      assertNotNull(qName0);
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.computeValue(unionContext0);
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("V<rZjG", qName0.getPrefix());
      assertEquals("V<rZjG:V<rZjG", qName0.toString());
      assertEquals("V<rZjG", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/f");
      assertFalse(boolean0);
      
      QName qName0 = new QName("/f");
      assertNotNull(qName0);
      assertEquals("/f", qName0.toString());
      assertEquals("/f", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals("/f", qName0.toString());
      assertEquals("/f", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertNotNull(coreOperationNegate0);
      assertEquals(6, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.EvalContext");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2365, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2365, coreFunction0.getFunctionCode());
      
      CoreOperationSubtract coreOperationSubtract1 = (CoreOperationSubtract)coreFunction0.getArg1();
      assertNotNull(coreOperationSubtract1);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationSubtract1, coreOperationSubtract0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2365, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      
      CoreOperationSubtract coreOperationSubtract2 = (CoreOperationSubtract)coreFunction1.getArg1();
      assertNotNull(coreOperationSubtract2);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(coreOperationSubtract2, coreOperationSubtract0);
      assertSame(coreOperationSubtract2, coreOperationSubtract1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals("-", coreOperationSubtract2.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract2;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract2, coreOperationSubtract0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals("-", coreOperationSubtract2.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      expressionArray0[4] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction3);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(10, coreFunction3.getFunctionCode());
      assertEquals(5, coreFunction3.getArgumentCount());
      
      String string0 = (String)coreFunction2.functionName((EvalContext) null);
      assertNotNull(string0);
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction3);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertEquals("", string0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      
      int int0 = coreFunction1.getFunctionCode();
      assertEquals(1, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction3);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(0, int0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("{+emI_mX");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{+emI_mX");
      assertNotNull(processingInstructionTest0);
      assertEquals("{+emI_mX", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("{+emI_mX", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("{+emI_mX", processingInstructionTest0.getTarget());
      assertEquals(10, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-1366), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("{+emI_mX", processingInstructionTest0.getTarget());
      assertEquals((-1366), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(61, processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals("{+emI_mX", processingInstructionTest0.getTarget());
      assertEquals(61, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant1 = new Constant((Number) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      Long long0 = new Long(61);
      assertNotNull(long0);
      assertEquals(61L, (long)long0);
      
      Constant constant2 = new Constant(long0);
      assertNotNull(constant2);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      
      expressionArray0[4] = (Expression) constant2;
      Constant constant3 = new Constant((Number) null);
      assertNotNull(constant3);
      assertFalse(constant3.equals((Object)constant0));
      assertFalse(constant3.equals((Object)constant1));
      assertFalse(constant3.equals((Object)constant2));
      assertFalse(constant3.computeContextDependent());
      assertFalse(constant3.isContextDependent());
      
      expressionArray0[5] = (Expression) constant3;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "11");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("11", "11");
      assertNotNull(qName0);
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:11", qName0.toString());
      assertEquals("11", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:11", qName0.toString());
      assertEquals("11", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:11", qName0.toString());
      assertEquals("11", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:11", qName0.toString());
      assertEquals("11", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("11", qName0.getPrefix());
      assertEquals("11:11", qName0.toString());
      assertEquals("11", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 11:11
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(942, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      assertEquals(942, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(80, (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(80, step1.getAxis());
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      assertNotNull(coreOperationNegate0);
      assertEquals(2, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("w;JpA-W/");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("w;JpA-W/", qName0.getName());
      assertEquals("w;JpA-W/", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("w;JpA-W/", qName0.getName());
      assertEquals("w;JpA-W/", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(80, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(80, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("name");
      assertNotNull(qName0);
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'name'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("O#6=jsp*HuT52hhzGh'", "O#6=jsp*HuT52hhzGh'");
      assertNotNull(qName0);
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", qName0.toString());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getName());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", qName0.toString());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getName());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", qName0.toString());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getName());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getPrefix());
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      assertNotNull(childContext0);
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", qName0.toString());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getName());
      assertEquals("O#6=jsp*HuT52hhzGh'", qName0.getPrefix());
      assertEquals("O#6=jsp*HuT52hhzGh':O#6=jsp*HuT52hhzGh'", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant1 = new Constant((Number) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Iterator iterator0 = constant1.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertNotSame(constant1, constant0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(32, coreFunction2.getFunctionCode());
      
      Object object1 = coreFunction2.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(32, coreFunction2.getFunctionCode());
      
      Object object2 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals("", object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('null', 0)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1732), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1732), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals((-1732), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant1 = new Constant((Number) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      Iterator iterator0 = constant1.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertNotSame(constant1, constant0);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertEquals(false, object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(32, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      Constant constant1 = new Constant((Number) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-673), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-673), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(false, object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-673), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wVrZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("wVrZjG", "wVrZjG");
      assertNotNull(qName0);
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("<<unknown namespace>>");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Constant constant1 = new Constant("+to_i7*z<qlqY");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2388), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-2388), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionSubstring(rootContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, expressionArray0.length);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertEquals((-2388), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-685), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-685), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1, processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, processingInstructionTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-366), processingInstructionTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-366), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1063, processingInstructionTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1063, step5.getAxis());
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(6, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[2], coreOperationUnion0);
      assertNotNull(coreOperationMod1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMod1);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Step[] stepArray1 = new Step[8];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step4;
      stepArray1[1] = step0;
      stepArray1[2] = step2;
      stepArray1[3] = step4;
      stepArray1[4] = step2;
      stepArray1[5] = step4;
      stepArray1[6] = step3;
      stepArray1[7] = step0;
      LocationPath locationPath1 = new LocationPath(true, stepArray1);
      assertNotNull(locationPath1);
      assertEquals(8, stepArray1.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Long long0 = new Long((-1732));
      assertNotNull(long0);
      assertEquals((-1732L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1732), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals((-1732), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertEquals((-1732), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float(0.0);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-671), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-671), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("-1711-1711");
      assertNotNull(qName0);
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-1711-1711");
      assertNotNull(nodeNameTest0);
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", nodeNameTest0.getNamespaceURI());
      assertEquals("-1711-1711", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", nodeNameTest0.getNamespaceURI());
      assertEquals("-1711-1711", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2787()(1, 1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(3, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) variableReference0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Integer integer0 = Integer.getInteger("2)=|LH|}", 13);
      assertNotNull(integer0);
      assertEquals(13, (int)integer0);
      
      BasicVariables basicVariables0 = (BasicVariables)jXPathContextReferenceImpl0.getVariables();
      assertNotNull(basicVariables0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "2)=|LH|}", locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, integer0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertNull(qName0.toString());
      assertNull(qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("Wr+lEYXf8");
      assertNotNull(qName0);
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], variableReference0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(7, expressionArray0.length);
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Wr+lEYXf8");
      assertNotNull(nodeNameTest0);
      assertEquals("Wr+lEYXf8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wr+lEYXf8", nodeNameTest0.toString());
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("Wr+lEYXf8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wr+lEYXf8", nodeNameTest0.toString());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("Wr+lEYXf8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wr+lEYXf8", nodeNameTest0.toString());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals(4, evalContextArray0.length);
      assertEquals("Wr+lEYXf8", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Wr+lEYXf8", nodeNameTest0.toString());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("Wr+lEYXf8", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Wr+lEYXf8", qName0.toString());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionPosition(selfContext0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("true", object0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2787()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant("http://www.w3.org/2000/xmlns/");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1412), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1412), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals((-1412), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://www.w3.org/2000/xmlns/");
      assertFalse(boolean0);
      
      Double double0 = Expression.ONE;
      assertNotNull(double0);
      assertEquals(1.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1412), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals((-1412), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("1", object0);
      assertEquals((-1412), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertFalse(object1.equals((Object)object0));
      assertEquals("11", object1);
      assertEquals((-1412), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1412()(1, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1732));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1732), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1732));
      assertNotNull(long0);
      assertEquals((-1732L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nodeSetContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertEquals((-1732), nodeTypeTest0.getNodeType());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      NodePointer nodePointer0 = childContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertEquals((-1732), nodeTypeTest0.getNodeType());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, decimalFormat0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(1523, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1523, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wVrZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("wVrZjG");
      assertNotNull(qName0);
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      QName qName1 = new QName("wVrZjG", "<<unknown namespace>>");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertEquals("wVrZjG:<<unknown namespace>>", qName1.toString());
      assertEquals("wVrZjG", qName1.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("<<unknown namespace>>", qName1.getName());
      assertEquals("wVrZjG:<<unknown namespace>>", qName1.toString());
      assertEquals("wVrZjG", qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: wVrZjG
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationOr0);
      assertNotNull(coreOperationMod0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationLessThan1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2238);
      assertNotNull(nodeTypeTest0);
      assertEquals(2238, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-43), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2238, nodeTypeTest0.getNodeType());
      assertEquals((-43), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2238, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2238, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(2238, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      coreFunction0.functionFloor(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("substring-before", "substring-before");
      assertNotNull(qName0);
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(200, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(200, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(200, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, variableReference0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(200, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(200, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring-before:substring-before", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("substring-before:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertEquals("substring-before", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(200, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("substring-before:substring-before", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: substring-before:substring-before
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wVrZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("wVrZjG", "wVrZjG");
      assertNotNull(qName0);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator)variablePointer0.attributeIterator(qName0);
      assertNotNull(beanAttributeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, beanAttributeIterator0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("wVrZjG:wVrZjG", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("wVrZjG:wVrZjG", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) selfContext0;
      evalContextArray0[1] = (EvalContext) selfContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(4, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("wVrZjG:wVrZjG", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1732));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1732), nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      int int0 = 1504;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1732));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1732), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1732));
      assertNotNull(long0);
      assertEquals((-1732L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Long
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wVrZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("wVrZjG", "wVrZjG");
      assertNotNull(qName0);
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<<unknown namespace>>");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction((-442), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-442), coreFunction0.getFunctionCode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(7, evalContextArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getPrefix());
      assertEquals("wVrZjG:wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Integer integer0 = new Integer((-20));
      assertNotNull(integer0);
      assertEquals((-20), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertNotNull(nodeTypeTest0);
      assertEquals(16, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(27, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals(27, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(27, nodeTypeTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals(27, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(27, nodeTypeTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals(27, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-61), nodeTypeTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals((-61), step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      assertNotNull(coreOperationOr0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[3]);
      assertNotNull(coreOperationNegate0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray1[5] = (Expression) coreOperationOr1;
      CoreFunction coreFunction1 = new CoreFunction((-20), expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals((-20), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Byte byte0 = new Byte((byte)126);
      assertNotNull(byte0);
      assertEquals((byte)126, (byte)byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationGreaterThanOrEqual0);
      assertNotNull(nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], (Expression) null);
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Constant constant1 = new Constant("Cannot allocate ");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1328), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-1328), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("b?d6>)b%Uo;;jr8qn}c");
      assertNotNull(processingInstructionTest0);
      assertEquals("b?d6>)b%Uo;;jr8qn}c", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("b?d6>)b%Uo;;jr8qn}c", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      UnionContext unionContext0 = new UnionContext(attributeContext0, (EvalContext[]) null);
      assertNotNull(unionContext0);
      assertEquals("b?d6>)b%Uo;;jr8qn}c", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals("b?d6>)b%Uo;;jr8qn}c", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wVrZjG");
      assertNotNull(processingInstructionTest0);
      assertEquals("wVrZjG", processingInstructionTest0.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wVrZjG");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("wVrZjG");
      assertNotNull(qName0);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.toString());
      assertNull(qName0.getPrefix());
      
      CoreFunction coreFunction0 = new CoreFunction((-830), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-830), coreFunction0.getFunctionCode());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("wVrZjG", qName0.getName());
      assertEquals("wVrZjG", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: wVrZjG
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(30, (NodeTest) null, expressionArray1);
      assertNotNull(step0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(30, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1439), (NodeTest) null, expressionArray1);
      assertNotNull(step1);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertEquals((-1439), step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1439), expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest0);
      assertEquals(2787, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2787, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(2787);
      assertNotNull(long0);
      assertEquals(2787L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      coreOperationMultiply0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(2787, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1722));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1722), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1722));
      assertNotNull(long0);
      assertEquals((-1722L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1722), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1722), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals("-1722", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1722), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Long
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("-1711-1711");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", qName0.toString());
      assertEquals("-1711-1711", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", qName0.toString());
      assertEquals("-1711-1711", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", qName0.toString());
      assertEquals("-1711-1711", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(3, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("-1711-1711", qName0.toString());
      assertEquals("-1711-1711", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2509, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2509, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-553), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-553), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1722));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1722), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1722));
      assertNotNull(long0);
      assertEquals((-1722L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1190, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1190, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(true, object0);
      assertEquals(1190, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationLessThan1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("round");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      
      Step step0 = new Step((-787), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertEquals((-787), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(3993, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertEquals(3993, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(3993, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNull(qName0.getPrefix());
      assertEquals("round", qName0.toString());
      assertEquals("round", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("round", nodeNameTest0.toString());
      assertEquals(3993, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"false\"");
      assertNotNull(processingInstructionTest0);
      assertEquals("\"false\"", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("\"false\"", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("-1711-1711", "-1711-1711");
      assertNotNull(qName0);
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.getPrefix());
      assertEquals("-1711-1711:-1711-1711", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.getPrefix());
      assertEquals("-1711-1711:-1711-1711", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      Constant constant0 = new Constant("-1711-1711");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[4] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray0[2]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationGreaterThan0, expressionArray0[4]);
      assertNotNull(coreOperationNotEqual1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationNotEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual1;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-1711-1711:-1711-1711", nodeNameTest0.toString());
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.getPrefix());
      assertEquals("-1711-1711:-1711-1711", qName0.toString());
      
      Step step0 = new Step((-926), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-1711-1711:-1711-1711", nodeNameTest0.toString());
      assertEquals((-926), step0.getAxis());
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.getPrefix());
      assertEquals("-1711-1711:-1711-1711", qName0.toString());
      
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      assertNotNull(nodeTypeTest0);
      assertEquals(18, nodeTypeTest0.getNodeType());
      
      Step step1 = new Step((-2339), nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(18, nodeTypeTest0.getNodeType());
      assertEquals((-2339), step1.getAxis());
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("-1711-1711");
      assertNotNull(processingInstructionTest0);
      assertEquals("-1711-1711", processingInstructionTest0.getTarget());
      
      Step step2 = new Step((-4023), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("-1711-1711", processingInstructionTest0.getTarget());
      assertEquals((-4023), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(18, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(18, nodeTypeTest0.getNodeType());
      assertEquals(18, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-926), nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertEquals((-926), step4.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("-1711-1711:-1711-1711", nodeNameTest0.toString());
      assertEquals("-1711-1711", qName0.getName());
      assertEquals("-1711-1711", qName0.getPrefix());
      assertEquals("-1711-1711:-1711-1711", qName0.toString());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1542, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertEquals(1542, step5.getAxis());
      assertEquals(18, nodeTypeTest0.getNodeType());
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2339), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-2339), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      assertNotNull(nodeTypeTest0);
      assertEquals(10, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step((-1), nodeTypeTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals((-1), step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[9];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationAdd0;
      expressionArray2[1] = (Expression) coreOperationAdd0;
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreOperationAdd0;
      expressionArray2[4] = (Expression) coreOperationAdd0;
      expressionArray2[5] = (Expression) coreOperationAdd0;
      expressionArray2[6] = (Expression) coreOperationAdd0;
      expressionArray2[7] = (Expression) coreOperationAdd0;
      expressionArray2[8] = (Expression) coreOperationAdd0;
      Step step1 = new Step(1987, nodeTypeTest0, expressionArray2);
      assertNotNull(step1);
      assertEquals(9, expressionArray2.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(1987, step1.getAxis());
      assertEquals(10, nodeTypeTest0.getNodeType());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-553), nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals((-553), step2.getAxis());
      assertEquals(10, nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeTypeTest0, expressionArray2);
      assertNotNull(step3);
      assertEquals(9, expressionArray2.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(10, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-553), nodeTypeTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals(9, expressionArray2.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals((-553), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(10, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(10, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(10, nodeTypeTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertEquals(10, nodeTypeTest0.getNodeType());
      assertEquals(10, step6.getAxis());
      
      stepArray0[6] = step6;
      Expression[] expressionArray3 = new Expression[1];
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, expressionArray2[6]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, expressionArray2.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, expressionArray2[3]);
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, expressionArray2.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray3[0] = (Expression) nameAttributeTest0;
      Step step7 = new Step(1960, nodeTypeTest0, expressionArray3);
      assertNotNull(step7);
      assertEquals(1, expressionArray3.length);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertEquals(1960, step7.getAxis());
      assertEquals(10, nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      Step step8 = new Step(9, nodeTypeTest0, expressionArray3);
      assertNotNull(step8);
      assertEquals(1, expressionArray3.length);
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step3));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertEquals(9, step8.getAxis());
      assertEquals(10, nodeTypeTest0.getNodeType());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray2[7], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, expressionArray2.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(1987, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1987, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("", "]");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals(":]", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals(":]", qName0.toString());
      assertEquals(":]", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals("]", qName0.getName());
      assertEquals(":]", qName0.toString());
      assertEquals(":]", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionContains(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertFalse(boolean0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      
      nodeSetContext0.reset();
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2798);
      assertNotNull(nodeTypeTest0);
      assertEquals(2798, nodeTypeTest0.getNodeType());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2787, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(2798);
      assertNotNull(long0);
      assertEquals(2798L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], coreFunction0);
      assertNotNull(coreOperationMultiply1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(2787, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("09", object0);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("wVrZjG");
      assertNotNull(processingInstructionTest0);
      assertEquals("wVrZjG", processingInstructionTest0.getTarget());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNull(processingInstructionTest1.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("wVrZjG");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(processingInstructionTest0.equals((Object)processingInstructionTest1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("wVrZjG", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer((-107));
      assertNotNull(integer0);
      assertEquals((-107), (int)integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-107), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray0[0], (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      Object object0 = coreFunction0.functionNormalizeSpace(evalContext0);
      assertNotNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals("-107", object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" (");
      assertNotNull(processingInstructionTest0);
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-107), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals(" (", processingInstructionTest0.getTarget());
      assertEquals((-107), step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray1[2]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreFunction0;
      Step step1 = new Step((-107), processingInstructionTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(5, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-107), step1.getAxis());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-107), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals((-107), step2.getAxis());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-107), processingInstructionTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(5, expressionArray1.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-107), step3.getAxis());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-107), processingInstructionTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(5, expressionArray1.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(" (", processingInstructionTest0.getTarget());
      assertEquals((-107), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1852), processingInstructionTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertEquals(" (", processingInstructionTest0.getTarget());
      assertEquals((-1852), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(1861, processingInstructionTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertEquals(" (", processingInstructionTest0.getTarget());
      assertEquals(1861, step6.getAxis());
      
      stepArray0[6] = step6;
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      Expression expression0 = coreFunction0.getArg1();
      assertNotNull(expression0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertSame(expression0, constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      
      expressionArray2[0] = expression0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreOperationLessThan0;
      expressionArray2[3] = (Expression) coreOperationSubtract0;
      Step step7 = new Step((-107), processingInstructionTest0, expressionArray2);
      assertNotNull(step7);
      assertEquals(4, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertEquals((-107), step7.getAxis());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      Step step8 = new Step(99, processingInstructionTest0, expressionArray1);
      assertNotNull(step8);
      assertEquals(5, expressionArray1.length);
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(99, step8.getAxis());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      
      EvalContext evalContext1 = expressionPath0.createContextForStep(evalContext0, (-107), processingInstructionTest0);
      assertNull(evalContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-107), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(" (", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-107()(-107)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertFalse(boolean0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      nodeSetContext0.reset();
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2798);
      assertNotNull(nodeTypeTest0);
      assertEquals(2798, nodeTypeTest0.getNodeType());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2787, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long((-2057L));
      assertNotNull(long0);
      assertEquals((-2057L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], coreFunction0);
      assertNotNull(coreOperationMultiply1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2787, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNull(processingInstructionTest0.getTarget());
      
      Object object0 = coreFunction1.functionSubstring(descendantContext0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("", object0);
      assertEquals(2787, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertNull(processingInstructionTest0.getTarget());
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(object1);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(object1.equals((Object)object0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("-057", object1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("UP2#@.ut&_-i&,h");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationMultiply0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant("Cannot create an object for path ");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[4] = (Expression) constant1;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3791));
      assertNotNull(nodeTypeTest0);
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      assertEquals(3, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(42, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      assertEquals(42, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(8, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(2, step2.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(8, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(3, step3.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(8, expressionArray0.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertEquals(0, step4.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(8, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertEquals(3, step5.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-3791), nodeTypeTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(8, expressionArray0.length);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertEquals((-3791), step6.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-2098), nodeTypeTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(8, expressionArray0.length);
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step5));
      assertEquals((-2098), step7.getAxis());
      assertEquals((-3791), nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(nameAttributeTest0, expressionArray0[3]);
      assertNotNull(coreOperationMultiply1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationMultiply1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionPath0, (Expression) null);
      assertNotNull(nameAttributeTest1);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      expressionArray0[7] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(262, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(262, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-482), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-482), coreFunction0.getFunctionCode());
      
      QName qName0 = new QName(", ", "W*Ljm)ut+D&Fx5C#z");
      assertNotNull(qName0);
      assertEquals("W*Ljm)ut+D&Fx5C#z", qName0.getName());
      assertEquals(", :W*Ljm)ut+D&Fx5C#z", qName0.toString());
      assertEquals(", ", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("W*Ljm)ut+D&Fx5C#z", qName0.getName());
      assertEquals(", :W*Ljm)ut+D&Fx5C#z", qName0.toString());
      assertEquals(", ", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-503), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-503), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("J");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("contains");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("contains");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant1, coreOperationOr0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath1);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(562, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(562, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("local-name");
      assertNotNull(processingInstructionTest0);
      assertEquals("local-name", processingInstructionTest0.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "local-name");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "local-name", (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("73M3.[N?IoAL1P", "F^");
      assertNotNull(qName0);
      assertEquals("F^", qName0.getName());
      assertEquals("73M3.[N?IoAL1P:F^", qName0.toString());
      assertEquals("73M3.[N?IoAL1P", qName0.getPrefix());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("F^", qName0.getName());
      assertEquals("73M3.[N?IoAL1P:F^", qName0.toString());
      assertEquals("73M3.[N?IoAL1P", qName0.getPrefix());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals("local-name", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("F^", qName0.getName());
      assertEquals("73M3.[N?IoAL1P:F^", qName0.toString());
      assertEquals("73M3.[N?IoAL1P", qName0.getPrefix());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Float float0 = new Float((float) 77);
      assertNotNull(float0);
      assertEquals(77.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("translate");
      assertNotNull(qName0);
      assertEquals("translate", qName0.toString());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals("translate", qName0.toString());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertNotNull(variableReference1);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("translate", qName0.toString());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference1;
      Constant constant1 = new Constant(float0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference1, extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(8, expressionArray0.length);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertEquals("translate", qName0.toString());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(77, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(77, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationEqual0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("Factory could not create object path: ");
      assertNotNull(qName0);
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Factory could not create object path: ");
      assertNotNull(nodeNameTest0);
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      
      Step step0 = new Step((-2894), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      assertEquals((-2894), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      assertEquals(40, step1.getAxis());
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationEqual0;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationEqual0;
      Step step2 = new Step(710, nodeNameTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(7, expressionArray1.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(710, step2.getAxis());
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2894), nodeNameTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(7, expressionArray1.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertEquals((-2894), step3.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, expressionArray0[0]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath1);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray1[3], (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(7, expressionArray1.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(7, expressionArray1.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(7, expressionArray1.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(" ", qName0.getName());
      assertEquals("Factory could not create object path: ", qName0.toString());
      assertEquals("Factory could not create object path", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Factory could not create object path: ", nodeNameTest0.getNamespaceURI());
      assertEquals("Factory could not create object path: ", nodeNameTest0.toString());
      
      // Undeclared exception!
      coreFunction0.functionBoolean(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      CoreFunction coreFunction0 = new CoreFunction(440, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(440, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("sJQ:o9");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("00", "org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.getName());
      assertEquals("00", qName0.getPrefix());
      assertEquals("00:org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.getName());
      assertEquals("00", qName0.getPrefix());
      assertEquals("00:org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[2]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertEquals("and", coreOperationAnd1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAnd1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("wVrZjG");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      BeanAttributeIterator beanAttributeIterator0 = (BeanAttributeIterator)variablePointer0.attributeIterator(qName0);
      assertNotNull(beanAttributeIterator0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, beanAttributeIterator0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("wVrZjG", qName0.toString());
      assertEquals("wVrZjG", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[7];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(40, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2147483645, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(2147483645, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(40, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(677, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(677, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(40, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertEquals(40, step5.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[5] = step5;
      Step step6 = new Step(1771, nodeNameTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertEquals(1771, step6.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionLast(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double(0.0);
      assertNotNull(double0);
      assertEquals(0.0, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1073741824), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1073741824), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(true, object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals("00", object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      Object object2 = coreFunction1.compute((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(true, object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(8, expressionArray0.length);
      assertTrue(boolean0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionCeiling(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(192, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression expression0 = coreFunction0.getArg2();
      assertNotNull(expression0);
      assertEquals(3, expressionArray0.length);
      assertSame(expression0, constant0);
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction1 = new CoreFunction(2051, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(2051, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(2051, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("", object0);
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2051()('null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[3]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      assertNotNull(coreOperationUnion1);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion1);
      assertNotNull(coreOperationNegate0);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], coreOperationUnion1);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(";)z8sVHdQJ0kR]AVT=");
      assertNotNull(processingInstructionTest0);
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(200, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertEquals(200, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-3930), processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertEquals((-3930), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-89), processingInstructionTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertEquals((-89), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2153, processingInstructionTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertEquals(2153, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-89), processingInstructionTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(6, expressionArray1.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-89), step4.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1), processingInstructionTest0, expressionArray1);
      assertNotNull(step5);
      assertEquals(6, expressionArray1.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-1), step5.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      stepArray0[5] = step5;
      Step step6 = new Step(9, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step6);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertEquals(9, step6.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      stepArray0[6] = step6;
      Step step7 = new Step(3407, processingInstructionTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(3407, step7.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationNegate0, expressionArray1[2]);
      assertNotNull(coreOperationMultiply1);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationMultiply1;
      Constant constant0 = new Constant(";)z8sVHdQJ0kR]AVT=");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step7);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(9, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(step7, step6);
      assertNotSame(step7, step5);
      assertNotSame(step7, step1);
      assertNotSame(step7, step2);
      assertNotSame(step7, step4);
      assertNotSame(step7, step3);
      assertNotSame(step7, step0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals(3407, step7.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      QName qName0 = new QName(";)z8sVHdQJ0kR]AVT=");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.toString());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.getName());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, precedingOrFollowingContext0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.toString());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, ancestorContext0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.toString());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(3407, step7.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.toString());
      assertEquals(";)z8sVHdQJ0kR]AVT=", qName0.getName());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(3407, step7.getAxis());
      assertEquals(";)z8sVHdQJ0kR]AVT=", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      // Undeclared exception!
      coreFunction0.functionBoolean(rootContext0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1439), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertNotNull(expression0);
      assertEquals(2, expressionArray0.length);
      assertSame(expression0, constant0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1439), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1439), coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionConcat((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object2.equals((Object)object0));
      assertEquals("", object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1439), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1439()('null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate:", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate:", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, coreFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate:", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationNegate", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ")q?h{^");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, nodeNameTest0, nullPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(namespaceContext0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(1.0, (double)double0, 0.01);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(")q?h{^", nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, coreOperationUnion0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-6389), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-6389), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("xml:lang");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Constant constant1 = new Constant((Number) null);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant1);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.compiler.Expression");
      assertFalse(boolean0);
      
      QName qName0 = new QName("xml:lang");
      assertNotNull(qName0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      namespaceContext0.reset();
      assertEquals("xml:lang", qName0.toString());
      assertEquals("lang", qName0.getName());
      assertEquals("xml", qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("xml:lang", nodeNameTest0.toString());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionFalse(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, coreOperationAnd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationAnd0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Double double0 = Expression.NOT_A_NUMBER;
      assertNotNull(double0);
      assertEquals(Double.NaN, (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      QName qName0 = new QName("GFs=G+3e", "GFs=G+3e");
      assertNotNull(qName0);
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "+#>P*kJeEU");
      assertNotNull(nodeNameTest0);
      assertEquals("+#>P*kJeEU", nodeNameTest0.getNamespaceURI());
      assertEquals("GFs=G+3e:GFs=G+3e", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      Step step0 = new Step(380, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+#>P*kJeEU", nodeNameTest0.getNamespaceURI());
      assertEquals("GFs=G+3e:GFs=G+3e", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(380, step0.getAxis());
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2143, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("+#>P*kJeEU", nodeNameTest0.getNamespaceURI());
      assertEquals("GFs=G+3e:GFs=G+3e", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2143, step1.getAxis());
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      stepArray0[1] = step1;
      Step step2 = new Step(119, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("+#>P*kJeEU", nodeNameTest0.getNamespaceURI());
      assertEquals("GFs=G+3e:GFs=G+3e", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(119, step2.getAxis());
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      stepArray0[2] = step2;
      Step step3 = new Step(380, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertEquals("+#>P*kJeEU", nodeNameTest0.getNamespaceURI());
      assertEquals("GFs=G+3e:GFs=G+3e", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(380, step3.getAxis());
      assertEquals("GFs=G+3e", qName0.getPrefix());
      assertEquals("GFs=G+3e", qName0.getName());
      assertEquals("GFs=G+3e:GFs=G+3e", qName0.toString());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionPath0, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual1);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("GFs=G+3e");
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertFalse(object2.equals((Object)boolean1));
      assertFalse(object2.equals((Object)boolean0));
      assertEquals(true, object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("W}-=!");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("W}-=!", qName0.getName());
      assertEquals("W}-=!", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("W}-=!", qName0.getName());
      assertEquals("W}-=!", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1827, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1827, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1701));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1701), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1701));
      assertNotNull(long0);
      assertEquals((-1701L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1701), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1701), coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1701), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      AttributeContext attributeContext1 = new AttributeContext(attributeContext0, (NodeTest) null);
      assertNotNull(attributeContext1);
      assertFalse(attributeContext1.equals((Object)attributeContext0));
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext1.getPosition());
      assertFalse(attributeContext1.isChildOrderingRequired());
      assertEquals(0, attributeContext1.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction(756, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(756, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      assertNotNull(childContext0);
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.computeValue(childContext0);
      assertNull(object0);
      assertEquals(756, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"<YGF`RC%Oy_Cfg");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(3);
      assertNotNull(long0);
      assertEquals(3L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(long0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Constant constant2 = new Constant("");
      assertNotNull(constant2);
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      
      expressionArray0[3] = (Expression) constant2;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[4], coreOperationLessThan0);
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      assertNotNull(nodeTypeTest0);
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1685, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(1685, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(16809983, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(16809983, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(16809983, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(16809983, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1685, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(1685, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(16809983, nodeTypeTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(16809983, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step5);
      assertEquals(9, expressionArray0.length);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(3, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(9, expressionArray0.length);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(3, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(3, nodeTypeTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(9, expressionArray0.length);
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      assertEquals(3, step7.getAxis());
      assertEquals(3, nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      Step step8 = new Step(69, nodeTypeTest0, expressionArray0);
      assertNotNull(step8);
      assertEquals(9, expressionArray0.length);
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertEquals(3, nodeTypeTest0.getNodeType());
      assertEquals(69, step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, stepArray0.length);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(constant1, coreOperationAdd0);
      assertNotNull(coreOperationLessThan1);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationLessThan1);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.equals((Object)constant2));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(2, expressionArray0.length);
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(descendantContext0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)object0));
      assertEquals("", object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#H>7O~#E*m+@7$&5");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreFunction coreFunction1 = new CoreFunction(380, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(380, coreFunction1.getFunctionCode());
      
      QName qName0 = new QName("#H>7O~#E*m+@7$&5", "#H>7O~#E*m+@7$&5");
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object0.equals((Object)string0));
      assertEquals("", object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#H>7O~#E*m+@7$&5");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1701));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1701), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1701));
      assertNotNull(long0);
      assertEquals((-1701L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(-1701)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(192, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate('null', unknownFunction192()('null'), 'null', unknownFunction192()('null'), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "string");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("!D%n1N");
      assertNotNull(qName0);
      assertEquals("!D%n1N", qName0.toString());
      assertEquals("!D%n1N", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals("!D%n1N", qName0.toString());
      assertEquals("!D%n1N", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(3, expressionArray0.length);
      assertEquals("!D%n1N", qName0.toString());
      assertEquals("!D%n1N", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThan0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertEquals("!D%n1N", qName0.toString());
      assertEquals("!D%n1N", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3918, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3918, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1701));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1701), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1701));
      assertNotNull(long0);
      assertEquals((-1701L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Long
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertEquals(2, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2787()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(unionContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals(5, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      boolean boolean1 = attributeContext0.nextNode();
      assertEquals(5, evalContextArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(1, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(36);
      assertNotNull(nodeTypeTest0);
      assertEquals(36, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(36, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals(36, nodeTypeTest0.getNodeType());
      assertEquals(36, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath1);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath1.isAbsolute());
      
      expressionArray0[6] = (Expression) locationPath1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath1);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath0.isAbsolute());
      assertTrue(locationPath1.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertTrue(locationPath0.isAbsolute());
      assertTrue(locationPath1.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-967), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg1();
      assertNotNull(coreOperationMultiply1);
      assertEquals(9, expressionArray0.length);
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertEquals((-967), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(36, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-967), nodeTypeTest0);
      assertNull(evalContext0);
      assertEquals(9, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotSame(locationPath0, locationPath1);
      assertNotSame(locationPath1, locationPath0);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertEquals(36, nodeTypeTest0.getNodeType());
      assertTrue(locationPath0.isAbsolute());
      assertTrue(locationPath1.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(9, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(36, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction1.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#H>7O~#E*m+@7$&5");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertNotNull(object2);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("9:F~yf3", "TRI:CU)YE>S^:Hxl");
      assertNotNull(qName0);
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      Step step0 = new Step((-967), nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-967), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-967), nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-967), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-967), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals((-967), step2.getAxis());
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[9];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray2[0] = (Expression) extensionFunction0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[5], expressionArray1[4]);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray2[2] = (Expression) coreOperationDivide0;
      expressionArray2[3] = (Expression) coreOperationAnd0;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray2[5] = (Expression) locationPath0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray2[7] = (Expression) coreOperationAnd0;
      expressionArray2[8] = (Expression) coreOperationAnd0;
      Step step3 = new Step((-967), nodeNameTest0, expressionArray2);
      assertNotNull(step3);
      assertEquals(9, expressionArray2.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals((-967), step3.getAxis());
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-967), nodeNameTest0, expressionArray2);
      assertNotNull(step4);
      assertEquals(9, expressionArray2.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals((-967), step4.getAxis());
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-967), nodeNameTest0, expressionArray1);
      assertNotNull(step5);
      assertEquals(7, expressionArray1.length);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertEquals((-967), step5.getAxis());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-48), nodeNameTest0, expressionArray1);
      assertNotNull(step6);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-48), step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step((-48), nodeNameTest0, expressionArray2);
      assertNotNull(step7);
      assertEquals(9, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-48), step7.getAxis());
      
      stepArray0[7] = step7;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest1.toString());
      
      Step step8 = new Step(1893, nodeNameTest1, expressionArray1);
      assertNotNull(step8);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step3));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", nodeNameTest1.toString());
      assertEquals(1893, step8.getAxis());
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertEquals("9:F~yf3", qName0.getPrefix());
      assertEquals("TRI:CU)YE>S^:Hxl", qName0.getName());
      assertEquals("9:F~yf3:TRI:CU)YE>S^:Hxl", qName0.toString());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals((-967), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2862, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2862, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("\"concat\"");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"concat\"", qName0.getName());
      assertEquals("\"concat\"", qName0.toString());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2862, coreFunction0.getFunctionCode());
      assertNull(qName0.getPrefix());
      assertEquals("\"concat\"", qName0.getName());
      assertEquals("\"concat\"", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2862, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\"concat\"", qName0.getName());
      assertEquals("\"concat\"", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2862, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\"concat\"", qName0.getName());
      assertEquals("\"concat\"", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2862, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\"concat\"", qName0.getName());
      assertEquals("\"concat\"", qName0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: \"concat\"
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1430, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expressionArray0[3]);
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], coreOperationAdd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertEquals("+", coreOperationAdd1.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationLessThan0);
      assertNotNull(coreOperationMod1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationMod1);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertFalse(coreOperationAdd0.equals((Object)coreOperationAdd1));
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1430, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2787, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      coreFunction1.functionLocalName(evalContext0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(1, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], coreOperationAdd0);
      assertNotNull(coreOperationMultiply1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationAdd0);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply2 = new CoreOperationMultiply(coreOperationMod0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply2.equals((Object)coreOperationMultiply0));
      assertFalse(coreOperationMultiply2.equals((Object)coreOperationMultiply1));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply2.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply2;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationAdd0);
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply2));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply2, expressionArray0[5]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply2));
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationMultiply2.equals((Object)coreOperationMultiply0));
      assertFalse(coreOperationMultiply2.equals((Object)coreOperationMultiply1));
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply2.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationMultiply1);
      assertNotNull(coreOperationLessThanOrEqual2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationLessThanOrEqual2.equals((Object)coreOperationLessThanOrEqual0));
      assertFalse(coreOperationLessThanOrEqual2.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply1));
      assertFalse(coreOperationMultiply0.equals((Object)coreOperationMultiply2));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply2));
      assertEquals("<=", coreOperationLessThanOrEqual2.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(267, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(267, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(267, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(267, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual2;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreOperationMultiply1;
      expressionArray1[6] = (Expression) coreOperationMod0;
      Step step1 = new Step(267, processingInstructionTest0, expressionArray1);
      assertNotNull(step1);
      assertEquals(7, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(267, step1.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      Step step2 = new Step(0, nodeTypeTest0, expressionArray1);
      assertNotNull(step2);
      assertEquals(7, expressionArray1.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(0, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step((-592), processingInstructionTest0, expressionArray1);
      assertNotNull(step3);
      assertEquals(7, expressionArray1.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((-592), step3.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-462), processingInstructionTest0, expressionArray1);
      assertNotNull(step4);
      assertEquals(7, expressionArray1.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-462), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(164, processingInstructionTest0, expressionArray1);
      assertNotNull(step5);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(164, step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step(536, nodeTypeTest0, expressionArray0);
      assertNotNull(step6);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(536, step6.getAxis());
      
      stepArray0[6] = step6;
      Step step7 = new Step(1806, nodeTypeTest0, expressionArray0);
      assertNotNull(step7);
      assertEquals(9, expressionArray0.length);
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step4));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1806, step7.getAxis());
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      stepArray0[7] = step7;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      EvalContext evalContext0 = expressionPath1.evalSteps((EvalContext) null);
      assertNotNull(evalContext0);
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionPath1, expressionPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, expressionArray1[0]);
      assertNotNull(predicateContext0);
      assertEquals(9, expressionArray0.length);
      assertEquals(8, stepArray0.length);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(predicateContext0.equals((Object)evalContext0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      
      // Undeclared exception!
      coreFunction0.functionTrue(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      assertNotNull(nodeTypeTest0);
      assertEquals(28, nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-2057L));
      assertNotNull(long0);
      assertEquals((-2057L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(28, nodeTypeTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(28, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1520, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step1);
      assertFalse(step1.equals((Object)step0));
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1520, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1520, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step2);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1520, step2.getAxis());
      
      stepArray0[2] = step2;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant(long0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      Step step3 = new Step(28, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals(28, nodeTypeTest0.getNodeType());
      assertEquals(28, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, stepArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, constant1);
      assertNotNull(coreOperationMultiply0);
      assertEquals(4, stepArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(-2057)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      coreOperationGreaterThan0.args = expressionArray0;
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(97, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(97, coreFunction0.getFunctionCode());
      
      QName qName0 = new QName("`h 26F*'");
      assertNotNull(qName0);
      assertEquals("`h 26F*'", qName0.getName());
      assertEquals("`h 26F*'", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("`h 26F*'", qName0.getName());
      assertEquals("`h 26F*'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`h 26F*'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals("`h 26F*'", qName0.getName());
      assertEquals("`h 26F*'", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("`h 26F*'", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      QName qName0 = new QName("ooz/;9@FYUHy-{K", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getPrefix());
      assertEquals("ooz/;9@FYUHy-{K:ooz/;9@FYUHy-{K", qName0.toString());
      
      NodePointer nodePointer0 = nodeSetContext0.getCurrentNodePointer();
      assertNull(nodePointer0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(37, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.computeValue(nodeSetContext0);
      assertNull(object1);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction37()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      QName qName0 = new QName("ooz/;9@FYUHy-{K", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("ooz/;9@FYUHy-{K:ooz/;9@FYUHy-{K", qName0.toString());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getPrefix());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("\"\t\"");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, extensionFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction1);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction1;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)49;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte) (-1), (byte)2, (byte)49}, byteArray0);
      assertFalse(boolean0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray1[3]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(extensionFunction1, expressionArray0[2]);
      assertNotNull(coreOperationLessThan1);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertTrue(extensionFunction1.computeContextDependent());
      
      expressionArray0[3] = (Expression) coreOperationLessThan1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, expressionArray1[0]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2293), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals((-2293), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "\"\t\"");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[4], (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(5, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = coreOperationLessThan0.toString();
      assertNotNull(string0);
      assertEquals(5, expressionArray0.length);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(extensionFunction0, extensionFunction1);
      assertNotSame(coreOperationLessThan0, coreOperationLessThan1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(coreOperationLessThan0.equals((Object)coreOperationLessThan1));
      assertNull(qName0.getPrefix());
      assertEquals("\"\t\"", qName0.toString());
      assertEquals("\"\t\"", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(initialContext0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      Object object0 = nodeSetContext0.getValue();
      assertNotNull(object0);
      assertSame(basicNodeSet0, object0);
      assertSame(object0, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      QName qName0 = new QName("ooz/;9@FYUHy-{K", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getPrefix());
      assertEquals("ooz/;9@FYUHy-{K:ooz/;9@FYUHy-{K", qName0.toString());
      
      List list0 = basicNodeSet0.getPointers();
      assertNotNull(list0);
      assertSame(basicNodeSet0, object0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(37, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object1);
      assertSame(basicNodeSet0, object0);
      assertEquals(0.0, object1);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object2 = coreFunction0.computeValue(nodeSetContext0);
      assertNull(object2);
      assertSame(basicNodeSet0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = 99;
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertFalse(boolean0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      
      nodeSetContext0.reset();
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest0);
      assertEquals(2787, nodeTypeTest0.getNodeType());
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName(";E#ueYxA:WAy", ";E#ueYxA:WAy");
      assertNotNull(qName0);
      assertEquals(";E#ueYxA:WAy:;E#ueYxA:WAy", qName0.toString());
      assertEquals(";E#ueYxA:WAy", qName0.getPrefix());
      assertEquals(";E#ueYxA:WAy", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals(";E#ueYxA:WAy:;E#ueYxA:WAy", qName0.toString());
      assertEquals(";E#ueYxA:WAy", qName0.getPrefix());
      assertEquals(";E#ueYxA:WAy", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, variableReference0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      assertEquals(";E#ueYxA:WAy:;E#ueYxA:WAy", qName0.toString());
      assertEquals(";E#ueYxA:WAy", qName0.getPrefix());
      assertEquals(";E#ueYxA:WAy", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg3();
      assertNotNull(coreOperationMultiply1);
      assertEquals(8, expressionArray0.length);
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMultiply1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationMultiply1);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(8, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, coreOperationDivide0);
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count($;E#ueYxA:WAy:;E#ueYxA:WAy, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000007 != org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000007, -(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006), org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 + org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 + org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000007 + org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000007 + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000009) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000010 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000011 + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000012, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000009) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 21;
      int int1 = 25;
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertFalse(boolean0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      nodeSetContext0.reset();
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest0);
      assertEquals(2787, nodeTypeTest0.getNodeType());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2787, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(2787);
      assertNotNull(long0);
      assertEquals(2787L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      CoreOperationMultiply coreOperationMultiply1 = (CoreOperationMultiply)coreFunction0.getArg2();
      assertNotNull(coreOperationMultiply1);
      assertEquals(3, expressionArray0.length);
      assertSame(coreOperationMultiply1, coreOperationMultiply0);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2787, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNull(processingInstructionTest0.getTarget());
      
      String string0 = (String)coreFunction0.functionTranslate((EvalContext) null);
      assertNotNull(string0);
      assertEquals(3, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("2787", string0);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-80);
      byteArray0[1] = (byte) (-98);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-80), (byte) (-98)}, byteArray0);
      assertFalse(boolean0);
      
      QName qName0 = new QName("QKDtGDZW=|", "QKDtGDZW=|");
      assertNotNull(qName0);
      assertEquals("QKDtGDZW=|", qName0.getName());
      assertEquals("QKDtGDZW=|", qName0.getPrefix());
      assertEquals("QKDtGDZW=|:QKDtGDZW=|", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals("QKDtGDZW=|", qName0.getName());
      assertEquals("QKDtGDZW=|", qName0.getPrefix());
      assertEquals("QKDtGDZW=|:QKDtGDZW=|", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, expressionArray0[1]);
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2459));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2459), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1587), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-1587), step0.getAxis());
      assertEquals((-2459), nodeTypeTest0.getNodeType());
      
      String string0 = nodeTypeTest0.toString();
      assertNotNull(string0);
      assertEquals("UNKNOWN()", string0);
      assertEquals((-2459), nodeTypeTest0.getNodeType());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1587), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-1587), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("Cannot remove root DOM node");
      assertNotNull(qName0);
      assertEquals("Cannot remove root DOM node", qName0.toString());
      assertEquals("Cannot remove root DOM node", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("Cannot remove root DOM node", qName0.toString());
      assertEquals("Cannot remove root DOM node", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals(7, expressionArray0.length);
      assertEquals("Cannot remove root DOM node", qName0.toString());
      assertEquals("Cannot remove root DOM node", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals(7, expressionArray0.length);
      assertEquals("Cannot remove root DOM node", qName0.toString());
      assertEquals("Cannot remove root DOM node", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step((-2433), (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-2433), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2027), (NodeTest) null, expressionArray0);
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals((-2027), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(13, (NodeTest) null, expressionArray0);
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals(13, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(16, (NodeTest) null, expressionArray0);
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertEquals(16, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(81, (NodeTest) null, expressionArray0);
      assertNotNull(step4);
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertEquals(81, step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step((-4086), (NodeTest) null, (Expression[]) null);
      assertNotNull(step5);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertEquals((-4086), step5.getAxis());
      
      stepArray0[5] = step5;
      Step step6 = new Step((-4086), (NodeTest) null, (Expression[]) null);
      assertNotNull(step6);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertEquals((-4086), step6.getAxis());
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationMod0, nameAttributeTest0);
      assertNotNull(nameAttributeTest1);
      assertEquals(7, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertEquals("Cannot remove root DOM node", qName0.toString());
      assertEquals("Cannot remove root DOM node", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((-585), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals((-585), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7xXX<(g");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      int int0 = 0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1601));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1601), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long((-1601));
      assertNotNull(long0);
      assertEquals((-1601L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals("namespace-uri", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1178, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(1178, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction((-1169), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-1169), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContextArray0[0], (NodeTest) null, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(9, evalContextArray0.length);
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      evalContextArray0[4] = (EvalContext) precedingOrFollowingContext0;
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContextArray0[4], (NodeTest) null);
      assertNotNull(namespaceContext0);
      assertEquals(9, evalContextArray0.length);
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      evalContextArray0[5] = (EvalContext) namespaceContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(9, evalContextArray0.length);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      
      Object object0 = coreFunction2.computeValue(unionContext0);
      assertNull(object0);
      assertEquals(9, evalContextArray0.length);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals((-1169), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(evalContextArray0[3]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertNotNull(parentContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)79;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-6), (byte)102, (byte)79}, byteArray0);
      assertFalse(boolean1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Bo,YZr$l#LruN");
      assertNotNull(processingInstructionTest0);
      assertEquals("Bo,YZr$l#LruN", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-473), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("Bo,YZr$l#LruN", processingInstructionTest0.getTarget());
      assertEquals((-473), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(1092, processingInstructionTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("Bo,YZr$l#LruN", processingInstructionTest0.getTarget());
      assertEquals(1092, step1.getAxis());
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, expressionPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("Bo,YZr$l#LruN");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Bo,YZr$l#LruN", qName0.getName());
      assertEquals("Bo,YZr$l#LruN", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNull(qName0.getPrefix());
      assertEquals("Bo,YZr$l#LruN", qName0.getName());
      assertEquals("Bo,YZr$l#LruN", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[7] = (Expression) coreOperationOr1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(9, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[8] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(36, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertEquals("Bo,YZr$l#LruN", processingInstructionTest0.getTarget());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-979), (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertEquals((-979), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], locationPath0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, locationPath0);
      assertNotNull(coreOperationSubtract1);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationSubtract1;
      QName qName0 = new QName("concat", "bas|a6*");
      assertNotNull(qName0);
      assertEquals("concat:bas|a6*", qName0.toString());
      assertEquals("concat", qName0.getPrefix());
      assertEquals("bas|a6*", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("concat:bas|a6*", qName0.toString());
      assertEquals("concat", qName0.getPrefix());
      assertEquals("bas|a6*", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Short short0 = new Short((short)2071);
      assertNotNull(short0);
      assertEquals((short)2071, (short)short0);
      
      Constant constant0 = new Constant(short0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], coreOperationOr0);
      assertNotNull(coreOperationNotEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNotEqual1;
      QName qName0 = new QName("0j&(>9z7jFA(", "0j&(>9z7jFA(");
      assertNotNull(qName0);
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertEquals("or", coreOperationOr1.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNotEqual0, extensionFunction0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual1));
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual1;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      
      expressionArray1[2] = (Expression) extensionFunction1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, extensionFunction1);
      assertNotNull(predicateContext0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-6060));
      assertNotNull(nodeTypeTest0);
      assertEquals((-6060), nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, nodeTypeTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-6060), nodeTypeTest0.getNodeType());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-6060), nodeTypeTest0.getNodeType());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, true, false);
      assertNotNull(childContext0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals((-6060), nodeTypeTest0.getNodeType());
      assertEquals("0j&(>9z7jFA(", qName0.getName());
      assertEquals("0j&(>9z7jFA(:0j&(>9z7jFA(", qName0.toString());
      assertEquals("0j&(>9z7jFA(", qName0.getPrefix());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionName(childContext0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      QName qName0 = new QName("ooz/;9@FYUHy-{K", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertEquals("ooz/;9@FYUHy-{K:ooz/;9@FYUHy-{K", qName0.toString());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertNotNull(variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-105));
      assertNotNull(nodeTypeTest0);
      assertEquals((-105), nodeTypeTest0.getNodeType());
      
      Long long0 = new Long(7);
      assertNotNull(long0);
      assertEquals(7L, (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      expressionArray0[8] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1498), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1498), coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(9, expressionArray0.length);
      assertEquals("unknownFunction-1498()", string0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-1498), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1950, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1950, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(0, coreFunction2.getFunctionCode());
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(9, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertEquals(1950, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertNotNull(object1);
      assertEquals(9, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(object1.equals((Object)string0));
      assertEquals("4977777494949", object1);
      assertEquals(1950, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[12];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(12, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(12, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionPath0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(12, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(12, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(12, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(12, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(12, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertEquals(12, expressionArray0.length);
      assertEquals("id('null', null, null, null, null, null, null, null, null, null, null, null)", string0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(12, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(12, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(12, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-16), (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-16), coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-16), coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction((-16), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-16), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-16), coreFunction1.getFunctionCode());
      
      Object object1 = coreFunction0.functionFalse((EvalContext) null);
      assertNotNull(object1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(false, object1);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      QName qName0 = new QName("", "u}#(^z1Fce");
      assertNotNull(qName0);
      assertEquals("u}#(^z1Fce", qName0.getName());
      assertEquals(":u}#(^z1Fce", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      QName qName1 = new QName("");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertFalse(qName0.equals((Object)qName1));
      assertEquals("u}#(^z1Fce", qName0.getName());
      assertEquals(":u}#(^z1Fce", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-248), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals((-248), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after('null', 'null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertNotNull(nodeTypeTest0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("unknownFunction-1()()", string0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      NodeTest nodeTest0 = null;
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(15, coreFunction2.getFunctionCode());
      
      CoreFunction coreFunction3 = new CoreFunction((-556), (Expression[]) null);
      assertNotNull(coreFunction3);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals((-556), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      Object object0 = coreFunction3.computeValue((EvalContext) null);
      assertNull(object0);
      assertNotSame(coreFunction3, coreFunction2);
      assertNotSame(coreFunction3, coreFunction0);
      assertNotSame(coreFunction3, coreFunction1);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertEquals((-556), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7xXX<(g");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(7, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      QName qName0 = new QName("Z[", "");
      assertNotNull(qName0);
      assertEquals("Z[", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("Z[:", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("Z[", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("Z[:", qName0.toString());
      assertEquals("Z[:", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest0, false, false);
      assertNotNull(childContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals("Z[", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("Z[:", qName0.toString());
      assertEquals("Z[:", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2787, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(0, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      
      CoreFunction coreFunction2 = new CoreFunction(2787, expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(2787, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      int int0 = 15;
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals("contains", string0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float((double) 2787);
      assertNotNull(float0);
      assertEquals(2787.0F, (float)float0, 0.01F);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7xXX<(g");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("8u.1n9l:");
      assertNotNull(processingInstructionTest0);
      assertEquals("8u.1n9l:", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction2 = new CoreFunction((-2506), expressionArray0);
      assertNotNull(coreFunction2);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-2506), coreFunction2.getFunctionCode());
      assertEquals(8, coreFunction2.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, processingInstructionTest0);
      assertNotNull(namespaceContext0);
      assertEquals("8u.1n9l:", processingInstructionTest0.getTarget());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("8u.1n9l:", processingInstructionTest0.getTarget());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("8u.1n9l:", processingInstructionTest0.getTarget());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationLessThan0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, expressionArray0[2]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(9, expressionArray0.length);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      Double double0 = new Double((-358));
      assertNotNull(double0);
      assertEquals((-358.0), (double)double0, 0.01);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationLessThan0);
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step((-358), nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-358), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(998, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(998, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(998, nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(998, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(998, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(998, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-358), nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(9, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-358), step4.getAxis());
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], coreOperationNotEqual0);
      assertNotNull(coreOperationLessThan1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[8] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction((-358), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      assertEquals((-358), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(8, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(true, object0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals(false, object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("&hC[6rf-4Jj0o\u0003");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("cmKYO8\"-rrqRi\"0Kw");
      assertNotNull(qName0);
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationOr0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(0, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationNegate0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "cmKYO8\"-rrqRi\"0Kw");
      assertNotNull(nodeNameTest0);
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.toString());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = (Expression) locationPath0;
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[7] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[8] = (Expression) constant0;
      Step step0 = new Step(3019, nodeNameTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.toString());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.toString());
      assertEquals(3019, step0.getAxis());
      
      boolean boolean1 = locationPath0.isSimpleStep(step0);
      assertEquals(9, expressionArray1.length);
      assertEquals(0, stepArray0.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.toString());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("cmKYO8\"-rrqRi\"0Kw", qName0.toString());
      assertEquals(3019, step0.getAxis());
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3019, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(3019, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      Step step0 = new Step(26, processingInstructionTest0, expressionArray1);
      assertNotNull(step0);
      assertEquals(7, expressionArray1.length);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(26, step0.getAxis());
      
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreFunction0;
      Step step1 = new Step((-2014), processingInstructionTest0, expressionArray2);
      assertNotNull(step1);
      assertEquals(1, expressionArray2.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals((-2014), step1.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[0] = step1;
      int int0 = (-2787);
      Step step2 = new Step((-2787), processingInstructionTest0, expressionArray2);
      assertNotNull(step2);
      assertEquals(1, expressionArray2.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertEquals((-2787), step2.getAxis());
      assertEquals("", processingInstructionTest0.getTarget());
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, stepArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = expressionPath0.createContextForStep((EvalContext) null, 1704, processingInstructionTest0);
      assertNull(evalContext1);
      assertEquals(3, stepArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      CoreFunction coreFunction2 = new CoreFunction(27, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(27, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iterate(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("o6w.");
      assertNotNull(qName0);
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      
      Step step0 = new Step(2262, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      assertEquals(2262, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(2562, nodeNameTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      assertEquals(2562, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2421), nodeNameTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      assertEquals((-2421), step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(1795, nodeNameTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      assertEquals(1795, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(2562, nodeNameTest0, expressionArray0);
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertEquals("o6w.", qName0.getName());
      assertEquals("o6w.", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("o6w.", nodeNameTest0.toString());
      assertEquals(2562, step4.getAxis());
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertEquals(5, stepArray0.length);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2262, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2262, coreFunction0.getFunctionCode());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray0[0]);
      assertNotNull(predicateContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals("", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction((-162), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-162), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = 15;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      int int1 = 3;
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("L_rWl=1tleb`$y4IYr'");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2568);
      assertNotNull(nodeTypeTest0);
      assertEquals(2568, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(32, nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      assertEquals(2568, nodeTypeTest0.getNodeType());
      assertEquals(32, step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(41, nodeTypeTest0, expressionArray0);
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertEquals(2568, nodeTypeTest0.getNodeType());
      assertEquals(41, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(1919, nodeTypeTest0, expressionArray0);
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals(2568, nodeTypeTest0.getNodeType());
      assertEquals(1919, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeTypeTest0, expressionArray0);
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertEquals(2568, nodeTypeTest0.getNodeType());
      assertEquals(2, step3.getAxis());
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationNotEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals(7, expressionArray0.length);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("gvH-3d!#R>vUK+");
      assertNotNull(qName0);
      assertEquals("gvH-3d!#R>vUK+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gvH-3d!#R>vUK+", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals("gvH-3d!#R>vUK+", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("gvH-3d!#R>vUK+", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[3]);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 5;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("last", "n'D'R(9jh/^4uD#)-/d");
      assertNotNull(qName0);
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "n'D'R(9jh/^4uD#)-/d");
      assertNotNull(nodeNameTest0);
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest0.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest0.toString());
      
      Step step0 = new Step(5, nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest0.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest0.toString());
      assertEquals(5, step0.getAxis());
      
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "n'D'R(9jh/^4uD#)-/d");
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      
      Step step1 = new Step(5, nodeNameTest1, (Expression[]) null);
      assertNotNull(step1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step1.equals((Object)step0));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      assertEquals(5, step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(11, nodeNameTest1, (Expression[]) null);
      assertNotNull(step2);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      assertEquals(11, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(11, nodeNameTest1, (Expression[]) null);
      assertNotNull(step3);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      assertEquals(11, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step(25, nodeNameTest1, (Expression[]) null);
      assertNotNull(step4);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      assertEquals(25, step4.getAxis());
      
      stepArray0[4] = step4;
      boolean boolean0 = step0.isContextDependent();
      assertNotSame(nodeNameTest0, nodeNameTest1);
      assertNotSame(step0, step4);
      assertNotSame(step0, step3);
      assertNotSame(step0, step2);
      assertNotSame(step0, step1);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step0.equals((Object)step4));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(boolean0);
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest0.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest0.toString());
      assertEquals(5, step0.getAxis());
      
      Step step5 = new Step(11, nodeNameTest1, (Expression[]) null);
      assertNotNull(step5);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(11, step5.getAxis());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      
      stepArray0[5] = step5;
      Step step6 = new Step(25, nodeNameTest1, (Expression[]) null);
      assertNotNull(step6);
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertEquals(25, step6.getAxis());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest1.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest1.toString());
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      assertNotNull(nodeTypeTest0);
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3198, nodeTypeTest0);
      assertNull(evalContext0);
      assertEquals(7, stepArray0.length);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(6, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", qName0.toString());
      assertEquals("n'D'R(9jh/^4uD#)-/d", qName0.getName());
      assertEquals("last", qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("n'D'R(9jh/^4uD#)-/d", nodeNameTest0.getNamespaceURI());
      assertEquals("last:n'D'R(9jh/^4uD#)-/d", nodeNameTest0.toString());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(3, evalContextArray0.length);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      Object object0 = coreFunction0.functionStringLength(unionContext0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertEquals(0.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      
      Object object1 = coreFunction0.functionSum((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertTrue(object1.equals((Object)object0));
      assertEquals(0.0, object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = 22;
      CoreFunction coreFunction1 = new CoreFunction(22, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(662, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(662, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(662, coreFunction0.getFunctionCode());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      assertNotNull(predicateContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      Object object1 = coreFunction0.functionNamespaceURI(predicateContext0);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(662, coreFunction0.getFunctionCode());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object2 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)object1));
      assertEquals("", object2);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      expressionArray0[0] = null;
      Expression expression1 = coreFunction0.getArg1();
      assertNull(expression1);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      expressionArray0[1] = null;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("0?");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("0?", qName0.toString());
      assertEquals("0?", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("0?", qName0.toString());
      assertEquals("0?", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0?", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(5, nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("0?", qName0.toString());
      assertEquals("0?", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("0?", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(5, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expression0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expression0, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      coreFunction1.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeNameTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      NodeSet nodeSet0 = ancestorContext0.getNodeSet();
      assertNotNull(nodeSet0);
      assertNotSame(basicNodeSet0, nodeSet0);
      assertNotSame(nodeSet0, basicNodeSet0);
      assertFalse(nodeSet0.equals((Object)basicNodeSet0));
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      basicNodeSet0.add(nodeSet0);
      assertNotSame(basicNodeSet0, nodeSet0);
      assertNotSame(nodeSet0, basicNodeSet0);
      assertFalse(basicNodeSet0.equals((Object)nodeSet0));
      assertFalse(nodeSet0.equals((Object)basicNodeSet0));
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      
      boolean boolean0 = nodeSetContext0.hasNext();
      assertNotSame(basicNodeSet0, nodeSet0);
      assertFalse(basicNodeSet0.equals((Object)nodeSet0));
      assertFalse(boolean0);
      assertEquals(2, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      nodeSetContext0.reset();
      assertNotSame(basicNodeSet0, nodeSet0);
      assertFalse(basicNodeSet0.equals((Object)nodeSet0));
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2798);
      assertNotNull(nodeTypeTest0);
      assertEquals(2798, nodeTypeTest0.getNodeType());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNull(processingInstructionTest1.getTarget());
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertEquals(2787, nodeTypeTest1.getNodeType());
      
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long((-2057L));
      assertNotNull(long0);
      assertEquals((-2057L), (long)long0);
      
      Constant constant0 = new Constant(long0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, expressionArray1.length);
      assertNotSame(expressionArray1, expressionArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(-2057, org.apache.commons.jxpath.ri.compiler.Constant@0000000012 * org.apache.commons.jxpath.ri.compiler.Constant@0000000012, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-584), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-584), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-584), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(2086, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2086, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionPath0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Integer integer0 = new Integer((-2845));
      assertNotNull(integer0);
      assertEquals((-2845), (int)integer0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl2, expressionArray0[0], (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl3);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl3.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      String string0 = constant0.toString();
      assertNotNull(string0);
      assertEquals("'null'", string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#H>7O~#E*m+@7$&5");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)boolean0));
      assertEquals(true, object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object1);
      assertEquals(2, expressionArray0.length);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(36, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3268));
      assertNotNull(nodeTypeTest0);
      assertEquals((-3268), nodeTypeTest0.getNodeType());
      
      boolean boolean1 = nodeSetContext0.hasNext();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, (Expression[]) null, (Step[]) null);
      assertNotNull(expressionPath1);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      int int0 = (-2014);
      EvalContext evalContext0 = expressionPath1.createContextForStep(nodeSetContext0, (-2014), nodeTypeTest0);
      assertNull(evalContext0);
      assertNotSame(expressionPath0, expressionPath1);
      assertNotSame(expressionPath1, expressionPath0);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-3268), nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals((-3268), nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      
      QName qName0 = new QName("", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertEquals(":ooz/;9@FYUHy-{K", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getPrefix());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertEquals(":ooz/;9@FYUHy-{K", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      int int0 = 15;
      CoreFunction coreFunction1 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(15, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals(15, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertNotNull(nodeTypeTest0);
      assertEquals(16, nodeTypeTest0.getNodeType());
      
      Long long0 = new Long(5057L);
      assertNotNull(long0);
      assertEquals(5057L, (long)long0);
      
      Constant constant1 = new Constant(long0);
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionPath0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("normalize-space", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((-1733), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals((-1733), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], expressionArray1[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction2 = new CoreFunction(16, expressionArray1);
      assertNotNull(coreFunction2);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(16, coreFunction2.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      QName qName0 = new QName("u}#(^z1Fce", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("u}#(^z1Fce:", qName0.toString());
      assertEquals("u}#(^z1Fce", qName0.getPrefix());
      
      QName qName1 = new QName("u}#(^z1Fce");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("u}#(^z1Fce", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("u}#(^z1Fce", qName1.toString());
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertNotNull(variableReference0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("u}#(^z1Fce", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("u}#(^z1Fce", qName1.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction0.computeValue(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(false, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionLang(nodeSetContext0);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertNotSame(coreFunction0, coreFunction1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertEquals(false, object1);
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      List list0 = basicNodeSet0.getNodes();
      assertNotNull(list0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      assertNotNull(nodeTypeTest0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      
      boolean boolean0 = true;
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals((-1), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("oG6CP!p");
      assertNotNull(processingInstructionTest0);
      assertEquals("oG6CP!p", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      CoreFunction coreFunction0 = new CoreFunction((-358), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals((-358), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Iterator iterator0 = constant0.iteratePointers((EvalContext) null);
      assertNotNull(iterator0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Object object0 = coreFunction0.functionCeiling(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals((-358), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object1);
      assertEquals((-358), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction((-358), expressionArray0);
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-358), coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte)0;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-13), (byte)0}, byteArray0);
      assertFalse(boolean1);
      
      CoreFunction coreFunction2 = new CoreFunction((-1537), (Expression[]) null);
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((-1537), coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      String string0 = coreFunction0.getFunctionName();
      assertNotNull(string0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertEquals("local-name", string0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionPath0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      String string0 = (String)coreFunction0.compute((EvalContext) null);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertEquals("", string0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("", "ooz/;9@FYUHy-{K");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":ooz/;9@FYUHy-{K", qName0.toString());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":ooz/;9@FYUHy-{K", qName0.toString());
      assertEquals("ooz/;9@FYUHy-{K", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionLast(nodeSetContext0);
      assertNotNull(object0);
      assertEquals(0.0, object0);
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      
      QName qName1 = new QName("");
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "ooz/;9@FYUHy-{K");
      assertNotNull(nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("ooz/;9@FYUHy-{K", nodeNameTest0.getNamespaceURI());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertFalse(qName1.equals((Object)qName0));
      assertEquals("", qName1.toString());
      assertEquals("", qName1.getName());
      assertNull(qName1.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("ooz/;9@FYUHy-{K", nodeNameTest0.getNamespaceURI());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(380, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(380, coreFunction0.getFunctionCode());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionStringLength((EvalContext) null);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(380, coreFunction0.getFunctionCode());
      
      Object object1 = coreFunction0.functionString(precedingOrFollowingContext0);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(380, coreFunction0.getFunctionCode());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertNotNull(nodeTypeTest0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("oG6CP!p");
      assertNotNull(processingInstructionTest0);
      assertEquals("oG6CP!p", processingInstructionTest0.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-64), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-64), coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-64), coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[Element: <");
      assertNotNull(processingInstructionTest0);
      assertEquals("[Element: <", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertEquals("[Element: <", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("node");
      assertNotNull(processingInstructionTest1);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertEquals("node", processingInstructionTest1.getTarget());
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionPath0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      Integer integer0 = new Integer((-2845));
      assertNotNull(integer0);
      assertEquals((-2845), (int)integer0);
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      Pointer pointer0 = namespaceResolver0.getNamespaceContextPointer();
      assertNull(pointer0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl3 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl2, expressionArray0[0], (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl3);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl3.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, expressionArray0.length);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl3);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl3, jXPathContextReferenceImpl1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl3));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl3.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(jXPathContextReferenceImpl3.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(798, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction((-1537), (Expression[]) null);
      String string0 = coreFunction2.getFunctionName();
      assertEquals("unknownFunction-1537()", string0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(21, (Expression[]) null);
      boolean boolean0 = coreFunction2.isContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(21, (Expression[]) null);
      assertEquals(21, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction((-3404), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2020, (Expression[]) null);
      coreFunction0.compute((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction2 = new CoreFunction(28, (Expression[]) null);
      coreFunction2.computeValue(nodeSetContext0);
      assertEquals(28, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      constant0.toString();
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "'null'");
      Integer integer0 = new Integer(1);
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.getNamespaceContextPointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, integer0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.computeValue(evalContext0);
      Object object0 = coreFunction1.functionBoolean(evalContext0);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(false, object0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("R!%3T", "u}#(^z1Fce");
      QName qName1 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      coreFunction0.isContextDependent();
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      coreFunction0.functionNot(nodeSetContext0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce", "");
      QName qName1 = new QName("u}#(^z1Fce");
      VariableReference variableReference0 = new VariableReference(qName1);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, false, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionPath0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      Integer integer0 = new Integer((-2845));
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      namespaceResolver0.getNamespaceContextPointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, (Object) null, (Pointer) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[0], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(428);
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreFunction coreFunction0 = new CoreFunction((-3104), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      nodeSetContext0.reset();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2798);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long((-2057L));
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2787, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      coreFunction1.functionSubstring(descendantContext0);
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(2787, coreFunction0.getFunctionCode());
      assertEquals("-2057", object0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 19;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.isContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(19);
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(19, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(19, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(19, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      int int1 = 227;
      Step step3 = new Step(227, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        expressionPath0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(3479, expressionArray0);
      coreFunction1.getArg3();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreFunction0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Float float0 = new Float(1889.4024887216);
      Constant constant0 = new Constant(float0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction2 = new CoreFunction(3479, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3564, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      QName qName0 = new QName("boolean");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      int int0 = 28;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(1027, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      coreFunction1.compute((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      QName qName0 = new QName("[Element: <");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[Element: <");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("node");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)107;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray1 = new Expression[3];
      constant0.toString();
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      expressionArray1[2] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3564, expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      coreFunction0.functionName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      constant0.toString();
      coreFunction0.compute((EvalContext) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[DocType: ");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionSum(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce", "");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      constant0.iterate(nodeSetContext0);
      CoreFunction coreFunction0 = new CoreFunction(1267, expressionArray0);
      coreFunction0.iterate(nodeSetContext0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1267()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.isContextDependent();
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      constant0.toString();
      coreFunction0.compute((EvalContext) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      coreFunction0.computeContextDependent();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLocalName((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      nodeSetContext0.hasNext();
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2787);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2787);
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long((-2057L));
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-3104), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(2787, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      coreFunction1.functionSubstring(descendantContext0);
      assertEquals(2787, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, (Expression[]) null, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(490, (Expression[]) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ooz/;9@FYUHy-{K");
      nodeSetContext0.getContextNodeList();
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeNameTest0);
      coreFunction0.functionNumber(nodeSetContext0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.functionFalse(nodeSetContext0);
      assertEquals(490, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid argument type for 'sum': ");
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.isContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3800));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName(")]@gx?a", ",4B");
      QName qName1 = new QName("string-length");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce", "");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Object object0 = coreFunction0.computeValue(nodeSetContext0);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce", "");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      coreFunction0.functionRound((EvalContext) null);
      coreFunction0.compute(descendantContext0);
      coreFunction0.functionName(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationNotEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationDivide0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationDivide1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, coreOperationDivide1);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("", "Y\"W0VCtHgu/h5={^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1274), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1274), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, coreOperationEqual0);
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(800, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3657);
      CoreFunction coreFunction0 = new CoreFunction(3657, (Expression[]) null);
      nodeSetContext0.getCurrentNodePointer();
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      coreFunction0.functionPosition(nodeSetContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3657, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName(")]@gx?a", ",4B");
      QName qName1 = new QName("string-length");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-145), expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",4B");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      evalContextArray0[0] = (EvalContext) unionContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext1 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(unionContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#p^z1CFce", "");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(1143, expressionArray0);
      coreFunction0.functionNamespaceURI(nodeSetContext0);
      int int0 = new Integer(1143);
      coreFunction0.functionFloor(nodeSetContext0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variableReference0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "", variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'u}#p^z1CFce:'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      
      QName qName0 = new QName("JrTT|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      BasicVariables basicVariables0 = new BasicVariables();
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("", "ooz/;9@FYUHy-{K");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "ooz/;9@FYUHy-{K");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      coreFunction0.functionNumber(nodeSetContext0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("u}#(^z1Fce", "");
      QName qName1 = new QName(" is of unrecognized type and cannot be added");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      Object object0 = coreFunction0.compute(descendantContext0);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      coreFunction0.functionName(descendantContext0);
      assertEquals(18, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "wV<rZjG");
      QName qName0 = new QName("wV<rZjG", "wV<rZjG");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      coreFunction0.functionNamespaceURI(rootContext0);
      VariableReference variableReference0 = new VariableReference(qName0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, variableReference0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(167, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Ec+|hf+H8Lt");
      Step step0 = new Step(2237, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      int int0 = 5;
      Step step1 = new Step(5, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(2237, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(5, nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(5, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(22, nodeNameTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(5, nodeNameTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(2142, nodeNameTest0, (Expression[]) null);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = 268;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      QName qName0 = new QName("x0MqhO d\"mzRCR6AD)");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      QName qName1 = new QName("x0MqhO d\"mzRCR6AD)", "x0MqhO d\"mzRCR6AD)");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreFunction coreFunction1 = new CoreFunction(268, expressionArray0);
      QName qName2 = new QName("x0MqhO d\"mzRCR6AD)");
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.toString();
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction1 = new CoreFunction(47, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction47()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-18), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, (NodeTest) null);
      JXPathContext.newContext((Object) coreFunction0);
      coreFunction0.computeValue(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-18()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)20;
      byteArray0[6] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Pc,&X:mTJRc^HjYO#");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(62, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("", "0KP)}b&@");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName1 = new QName("java.util.concurrent.atomic.AtomicLong");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = 2768;
      QName qName0 = new QName("^v\"ti%<{_C");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float((float) 2768);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], extensionFunction0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(variableReference0, extensionFunction0);
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(800, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-967));
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeTypeTest0);
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) predicateContext0;
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, false, nodeTypeTest0);
      evalContextArray0[1] = (EvalContext) ancestorContext0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      evalContextArray0[2] = (EvalContext) nodeSetContext0;
      evalContextArray0[5] = null;
      evalContextArray0[4] = (EvalContext) predicateContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      SelfContext selfContext0 = new SelfContext(evalContextArray0[7], nodeTypeTest0);
      evalContextArray0[8] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      JXPathContext.newContext((Object) unionContext0);
      coreFunction0.isContextDependent();
      coreFunction0.functionString(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-967()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-18), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction(56, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      QName qName0 = new QName("x0MqhO d\"mzRCR6AD)");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction1 = new CoreFunction(800, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction800()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      BasicNodeSet basicNodeSet1 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("substring-after", ", ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-495), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot compare pointers that do not belong to the same tree: '");
      Step step1 = new Step(10, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(716, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3511, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      QName qName1 = new QName("Cannot compare pointers that do not belong to the same tree: '");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], expressionArray1[5]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray1[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2339), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      CoreFunction coreFunction1 = new CoreFunction((-2339), expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      coreFunction0.getArg1();
      expressionArray1[1] = null;
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "^v\"ti%<{_C";
      QName qName0 = new QName("^v\"ti%<{_C");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction(800, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction800()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2268, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2268()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      nodeSetContext0.hasNext();
      nodeSetContext0.reset();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((Number) null);
      CoreFunction coreFunction0 = new CoreFunction((-401), expressionArray0);
      coreFunction0.getArg2();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, expression0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      QName qName0 = new QName((String) null, "$<");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreFunction0);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction1 = new CoreFunction((-3028), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-3028), expressionArray0);
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1140, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction1140()('null', 'null', 'null', 'null')", string0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, (NodeTest) null);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, (NodeTest) null);
      JXPathContext.newContext((Object) attributeContext0);
      QName qName0 = new QName("unknownFunction1140()('null', 'null', 'null', 'null')");
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("", "ooz/;9@FYUHy-{K");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "ooz/;9@FYUHy-{K");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-2360), (Expression[]) null);
      coreFunction1.functionNumber(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      QName qName0 = new QName("", "n4''yl;) &4|bz%8");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeTypeTest0);
      selfContext0.reset();
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-652), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-652()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2766, expressionArray0);
      coreFunction0.toString();
      JXPathContext.newContext((Object) "unknownFunction2766()()");
      QName qName0 = new QName("unknownFunction2766()()");
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = (-1728);
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      nodeSetContext0.hasNext();
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      String string0 = "()";
      String string1 = null;
      QName qName0 = new QName("()", (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2298), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("", "ooz/;9@FYUHy-{K");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "ooz/;9@FYUHy-{K");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-2360), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2768, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(203);
      expressionPath0.createContextForStep((EvalContext) null, 2768, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2768()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1728));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      constant0.iterate(ancestorContext0);
      QName qName0 = new QName("/d|ztj");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("/d|ztj");
      basicNodeSet0.add((Pointer) variablePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      Short short0 = new Short((short)47);
      Constant constant0 = new Constant(short0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2415));
      expressionPath0.createContextForStep(nodeSetContext0, (-335), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      constant0.iterate(nodeSetContext0);
      CoreFunction coreFunction1 = new CoreFunction((-556), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-48), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1249), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction((-1834), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1834()('null'[null], substring-before(null), $:, $:, substring-before(null), substring-before(null), 'null'[null])
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2766, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction2766()()", string0);
      
      JXPathContext.newContext((Object) "unknownFunction2766()()");
      QName qName0 = new QName("unknownFunction2766()()");
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan1, expressionArray0[2]);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002) * (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), $null, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007) > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008) mod org.apache.commons.jxpath.ri.compiler.VariableReference@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      constant0.iterate(ancestorContext0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-48), (Expression[]) null);
      coreFunction0.functionName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-48()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2360), expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("xF%Xh/a[n-bT;{QS+B");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2360()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      CoreFunction coreFunction0 = new CoreFunction(2140, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2140()('null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null', 'null', 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      QName qName0 = new QName("=P9%wG5;-r{pd6Pqo)a", "=P9%wG5;-r{pd6Pqo)a");
      VariableReference variableReference0 = new VariableReference(qName0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion1;
      Constant constant0 = new Constant("[`)g##GHpWh<(%R");
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[6] = expression0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2339), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(61, processingInstructionTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-2339), expressionArray0);
      EvalContext evalContext0 = null;
      processingInstructionTest0.toString();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = (-1249);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1249), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2766, expressionArray0);
      NodeTest nodeTest0 = null;
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "unknownFunction2766()()");
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("unknownFunction2766()()");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'unknownFunction2766()()'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      int int0 = (-1728);
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("x[?F,x[]");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep((EvalContext) null, 2268, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(1223, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1223()('null', 'null', null, 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      String string0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.hasNext();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      nodeSetContext0.hasNext();
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-717), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext.newContext((Object) null);
      QName qName0 = new QName("()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.getNamespaceResolver();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2766, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2766()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2339), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(61, processingInstructionTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-1114), expressionArray0);
      EvalContext evalContext0 = null;
      processingInstructionTest0.toString();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, (Step[]) null);
      expressionPath1.createContextForStep((EvalContext) null, (-2479), processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      CoreFunction coreFunction0 = new CoreFunction((-967), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-967()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1249), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1249()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6122, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("M\"ox.NGT9_g8X6:+eE");
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, processingInstructionTest0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, nodeNameTest0, true);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(5720, (Expression[]) null);
      coreFunction1.functionStringLength(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6122()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(898, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      EvalContext evalContext1 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5QP=Q}F!.~kJKoD4X4H");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1728()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      int int0 = 21;
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count('null'[null], )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2268, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("x[?F,x[]");
      processingInstructionTest0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      processingInstructionTest0.toString();
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2268()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      EvalContext evalContext1 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5QP=Q}F!.~kJKoD4X4H");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-46), expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContextArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-46()(ororg.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(1L);
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      boolean boolean0 = true;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray1[1] = (Expression) locationPath0;
      QName qName0 = new QName("sum");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1249), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1249()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      JXPathContext.newContext((Object) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("X,w28^^0p&ib`/hC.?");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.getArg1();
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("xkDYbzMiClaz* ");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      expressionArray0[4] = (Expression) variableReference0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[5] = (Expression) locationPath0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeNameTest0, false, true);
      constant0.iterate(childContext0);
      CoreFunction coreFunction0 = new CoreFunction((-909), expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray1);
      QName qName0 = new QName("Cannot invoke extension function ", "namespace-uri");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      selfContext0.reset();
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      constant0.iterate(ancestorContext0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1698), expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1698()('null', null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-2360), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2360()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      QName qName0 = new QName("CD");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "CD");
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      Consumer<AncestorContext> consumer0 = (Consumer<AncestorContext>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.toString();
      JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("))A`VAL)|[", "starts-with()");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("))A`VAL)|[");
      Step step0 = new Step(10, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step(12, processingInstructionTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step2 = new Step((-152), processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step2;
      stepArray0[1] = step1;
      stepArray0[2] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-152), (Expression[]) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(selfContext0, 20, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot compare pointers that do not belong to the same tree: '");
      Step step0 = new Step((-767), processingInstructionTest0, expressionArray0);
      Step step1 = new Step((-615), processingInstructionTest0, expressionArray0);
      Step step2 = new Step(3455, processingInstructionTest0, expressionArray0);
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      Step step4 = new Step(24, processingInstructionTest0, expressionArray0);
      Step step5 = new Step((-385), processingInstructionTest0, expressionArray0);
      Step step6 = new Step((-2683), processingInstructionTest0, expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, constant0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray1);
      processingInstructionTest0.toString();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      expressionPath0.createContextForStep(attributeContext0, 14, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, expressionArray0[0]);
      coreOperationMultiply0.args = expressionArray0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, expressionArray0[1]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, constant0);
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(875);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      Step step0 = new Step(875, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1333), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1333), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[6];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreFunction0;
      expressionArray2[4] = (Expression) coreFunction0;
      expressionArray2[5] = (Expression) coreFunction0;
      Step step4 = new Step(875, nodeTypeTest0, expressionArray2);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(attributeContext0);
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest0);
      coreFunction0.functionTrue(selfContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last($, 1)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      QName qName0 = new QName("x0MqhO d\"mzRCR6AD)");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      CoreFunction coreFunction1 = new CoreFunction(800, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      BasicNodeSet basicNodeSet1 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(268, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      basicNodeSet0.getNodes();
      coreFunction0.compute((EvalContext) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(1905, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1905);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, false, nodeTypeTest0);
      coreFunction0.compute(descendantContext0);
      assertEquals(1905, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("xkDYbzMiClaz* ");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[5] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      expressionArray0[6] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-909), expressionArray0);
      QName qName1 = new QName("xkDYbzMiClaz* ", "3+8GWk))p[$3:TRc=");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      selfContext0.reset();
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionStartsWith(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory", "org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getArg3();
      coreFunction0.getArgumentCount();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) variableReference0);
      Locale locale0 = Locale.GERMAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray1[5], nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      evalContextArray0[1] = evalContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      QName qName1 = new QName("Vq%e", "<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()($org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory:org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004 or org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000007, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003), $org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory:org.apache.commons.jxpath.ri.model.dynabeans.DynaBeanPointerFactory, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005) | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationNotEqual0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      QName qName0 = new QName("()");
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2268, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2268()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(798, expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(798, coreFunction0.getFunctionCode());
      assertNull(expression0);
      
      expressionArray0[1] = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(1L);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      coreOperationLessThan0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(2140, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      coreOperationLessThan0.iterate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("preceding");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[1]);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationNotEqual0, coreOperationGreaterThan0);
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationGreaterThan0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[8];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-152));
      Step step0 = new Step((-152), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1660, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1442, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4086, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(45, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2062), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(45, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      QName qName0 = new QName("preceding", "preceding");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.axes.DescendantContext");
      Expression[] expressionArray1 = new Expression[0];
      Step step7 = new Step(45, nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-152), expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-152()", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("^v\"ti%<{_C");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(743);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) extensionFunction0;
      Expression[] expressionArray2 = new Expression[7];
      expressionArray2[0] = (Expression) extensionFunction0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray2[1] = (Expression) locationPath0;
      expressionArray2[2] = (Expression) extensionFunction0;
      expressionArray2[3] = (Expression) extensionFunction0;
      expressionArray2[4] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], variableReference0);
      expressionArray2[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray2[6] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray2);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) extensionFunction0;
      Step step0 = new Step(2576, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-1157), nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1015), nodeTypeTest0, expressionArray2);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2448, expressionArray0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, coreOperationAnd0);
      Locale locale0 = Locale.PRC;
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, nodePointer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1249), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[1]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationEqual0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationAnd0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1640), expressionArray0);
      coreFunction0.getFunctionCode();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1640));
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1640()(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) | (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004) | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000005) | (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000008), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000005 and org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000008, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000006, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) * (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2360), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationUnion0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], coreOperationAnd0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[4], coreOperationMod0);
      coreOperationEqual1.computeContextDependent();
      expressionArray0[7] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointer");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.model.VariablePointer");
      Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1764), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1214, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-195), (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(461);
      Step step0 = new Step(4179, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-688), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-688), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = null;
      expressionArray1[5] = null;
      expressionArray1[6] = null;
      expressionArray1[7] = null;
      expressionArray1[8] = null;
      Step step3 = new Step(461, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(189, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(4179, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(461, nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step((-688), nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionArray1[5]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, expressionArray1[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(4179, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(4179, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-48));
      expressionPath0.createContextForStep(nodeSetContext0, (-1728), nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      constant0.iterate(ancestorContext0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1728), expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1728()('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("))A`VAL)|[", "starts-with()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ))A`VAL)|[:starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      JXPathContext.newContext((Object) coreFunction0);
      String string0 = ",1l{*";
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
