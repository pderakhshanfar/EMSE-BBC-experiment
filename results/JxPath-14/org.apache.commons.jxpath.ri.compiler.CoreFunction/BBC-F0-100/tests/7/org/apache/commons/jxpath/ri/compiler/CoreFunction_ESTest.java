/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:29:44 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      
      String string0 = nodeTypeTest0.toString();
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step0, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      rootContext1.reset();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string1 = (String)coreFunction0.functionLocalName(initialContext0);
      assertEquals("", string1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(string1.equals((Object)string0));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      String string2 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertEquals("", string2);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(string2.equals((Object)string0));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotNull(string2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string3 = (String)coreFunction0.functionName(rootContext1);
      assertEquals("", string3);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotNull(string3);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string4 = coreFunction0.toString();
      assertEquals("substring-after(descendant-or-self::UNKNOWN()[null][null]/descendant-or-self::UNKNOWN()[null][null])", string4);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(string4);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      String string5 = coreFunction0.getFunctionName();
      assertEquals("substring-after", string5);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotNull(string5);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      Double double1 = (Double)coreFunction0.functionSum(rootContext1);
      assertEquals(0.0, (double)double1, 0.01);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext0, rootContext1);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotNull(double1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"");
      assertNotNull(qName0);
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step0, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(rootContext0, rootContext1);
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      rootContext1.reset();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(rootContext0, rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(rootContext0, rootContext1);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertEquals("", string0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(rootContext0, rootContext1);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray1, stepArray0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      
      PredicateContext predicateContext0 = (PredicateContext)expressionPath0.evalSteps(rootContext1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(predicateContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      assertEquals(2, stepArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"");
      assertNotNull(qName0);
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step0, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(rootContext0, rootContext1);
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      rootContext1.reset();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(rootContext0, rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertEquals("", string0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertEquals("", string1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(string1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, step0, locale0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(2, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(rootContext0, rootContext1);
      assertNotNull(rootContext1);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)rootContext1.getJXPathContext();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertSame(rootContext1, rootContext0);
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray1[0], beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(rootContext2.equals((Object)rootContext1));
      assertFalse(rootContext2.equals((Object)rootContext0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertNotNull(rootContext2);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, rootContext2.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getVariableContext(qName0);
      assertFalse(rootContext1.equals((Object)rootContext2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(rootContext0.equals((Object)rootContext2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(rootContext1, rootContext2);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotSame(rootContext0, rootContext2);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertEquals("", string0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(rootContext0.equals((Object)rootContext2));
      assertFalse(rootContext1.equals((Object)rootContext2));
      assertSame(rootContext1, rootContext0);
      assertNotSame(rootContext1, rootContext2);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotSame(rootContext0, rootContext2);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      Double double0 = (Double)coreFunction0.functionCount(initialContext0);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(rootContext0.equals((Object)rootContext2));
      assertFalse(rootContext1.equals((Object)rootContext2));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertNotSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertNotSame(rootContext1, rootContext2);
      assertNotNull(double0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(13, step0.getAxis());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.toString());
      assertEquals("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"", qName0.getName());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(1, expressionArray1.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(descendant-or-self::UNKNOWN()[null][null]/descendant-or-self::UNKNOWN()[null][null])
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, "M]_pvoG;@~!8?C$6l", beanPointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      String string0 = (String)coreFunction1.functionLocalName(initialContext0);
      assertEquals("", string0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray1.length);
      
      Boolean boolean0 = (Boolean)coreFunction1.functionNot(rootContext0);
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(boolean0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(1, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNotNull(qName0);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName(rootContext1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNull(object0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1.0, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, "", beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      String string0 = (String)coreFunction0.functionNormalizeSpace(rootContext0);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = (-818);
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("<78", "bU");
      assertNotNull(qName0);
      assertEquals("<78", qName0.getPrefix());
      assertEquals("<78:bU", qName0.toString());
      assertEquals("bU", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("<78", qName0.getPrefix());
      assertEquals("<78:bU", qName0.toString());
      assertEquals("bU", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals("<78", qName0.getPrefix());
      assertEquals("<78:bU", qName0.toString());
      assertEquals("bU", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-818), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-818), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertNotNull(coreOperationNegate1);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-895), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-895), coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      assertNotNull(predicateContext0);
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant("s' returns ");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      int int0 = 4719;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("s' returns", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName(".%,R-");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(".%,R-", qName0.toString());
      assertEquals(".%,R-", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals(".%,R-", qName0.toString());
      assertEquals(".%,R-", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(".%,R-", nodeNameTest0.toString());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(descendantContext0);
      assertNull(qName0.getPrefix());
      assertEquals(".%,R-", qName0.toString());
      assertEquals(".%,R-", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(".%,R-", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        constant0.iteratePointers(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("-p%U2W");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, constant0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray0[0]);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionPath1);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("-p%U2W");
      assertNotNull(qName0);
      assertEquals("-p%U2W", qName0.toString());
      assertEquals("-p%U2W", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("-p%U2W", qName0.toString());
      assertEquals("-p%U2W", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(111, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(111, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(111, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(91, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      assertEquals(91, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(111, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object2);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(111, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float((float) 4);
      assertEquals(4.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, expressionArray0[1]);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(2726, (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals(2726, step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(4, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(4, step1.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(3397, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(3397, step2.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(482, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(482, step3.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(11, (NodeTest) null, expressionArray0);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      assertEquals(11, step4.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(256, (NodeTest) null, expressionArray0);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals(256, step5.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(23, (NodeTest) null, expressionArray0);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals(23, step6.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-1838), (NodeTest) null, expressionArray0);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertNotNull(step7);
      assertEquals((-1838), step7.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step(2726, (NodeTest) null, expressionArray0);
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertNotNull(step8);
      assertEquals(2726, step8.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertNotNull(nodeTypeTest0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(24, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(24, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertSame(locationPath1, locationPath0);
      assertNotNull(locationPath1);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertTrue(locationPath1.isAbsolute());
      assertEquals(3, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step1, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionName(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertNotNull(nodeTypeTest0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(24, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(24, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertSame(locationPath1, locationPath0);
      assertNotNull(locationPath1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(3, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step1, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(step1, step0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(24);
      assertNotNull(nodeTypeTest0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(24, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(step0);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(24, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertSame(locationPath1, locationPath0);
      assertNotNull(locationPath1);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(3, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step1, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(step1, step0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(24, nodeTypeTest0.getNodeType());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(24, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(295, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(295, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName(">", (String) null);
      assertNotNull(qName0);
      assertEquals(">", qName0.getPrefix());
      assertEquals(">:null", qName0.toString());
      assertNull(qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(">", qName0.getPrefix());
      assertEquals(">:null", qName0.toString());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(">", qName0.getPrefix());
      assertEquals(">:null", qName0.toString());
      assertNull(qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '>:null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      assertFalse(coreOperationAdd1.equals((Object)coreOperationAdd0));
      assertNotNull(coreOperationAdd1);
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAdd1;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step(92, processingInstructionTest0, (Expression[]) null);
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(92, step0.getAxis());
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("processing-instruction('null')", string0);
      assertNotNull(string0);
      assertNull(processingInstructionTest0.getTarget());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1701), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1701), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      assertNotNull(nodeTypeTest0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(29, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(namespaceContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("z59NiUzI8!J:3%S(", "z59NiUzI8!J:3%S(");
      assertNotNull(qName0);
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("not");
      assertNotNull(processingInstructionTest0);
      assertEquals("not", processingInstructionTest0.getTarget());
      
      DescendantContext descendantContext0 = new DescendantContext(evalContext0, true, processingInstructionTest0);
      assertNotNull(descendantContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals("not", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      NodeSet nodeSet0 = descendantContext0.getNodeSet();
      assertNotNull(nodeSet0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(", qName0.toString());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getName());
      assertEquals("z59NiUzI8!J:3%S(", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getPosition());
      assertEquals("not", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: z59NiUzI8!J:3%S(:z59NiUzI8!J:3%S(
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertNotNull(coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1004), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1004), coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      String string0 = coreOperationNegate0.toString();
      assertNotNull(string0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertNotNull(attributeContext0);
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3208), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("%J;1$Y]uX@", "%J;1$Y]uX@");
      assertNotNull(qName0);
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, rootContext0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isRoot());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotNull(rootContext2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext2.getVariableContext(qName0);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) rootContext1;
      evalContextArray0[2] = (EvalContext) rootContext1;
      evalContextArray0[3] = (EvalContext) rootContext1;
      boolean boolean0 = initialContext0.setPosition(Integer.MIN_VALUE);
      assertFalse(boolean0);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      
      evalContextArray0[4] = (EvalContext) rootContext2;
      evalContextArray0[5] = (EvalContext) rootContext2;
      evalContextArray0[6] = (EvalContext) initialContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContextArray0[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '%J;1$Y]uX@:%J;1$Y]uX@'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("pS");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant("TPsKqSC");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant1;
      QName qName0 = new QName("TPsKqSC");
      assertNotNull(qName0);
      assertEquals("TPsKqSC", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("TPsKqSC", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("TPsKqSC", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("TPsKqSC", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3_|O[(#FIL:LM=");
      assertNotNull(processingInstructionTest0);
      assertEquals("3_|O[(#FIL:LM=", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(41, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("3_|O[(#FIL:LM=", processingInstructionTest0.getTarget());
      assertEquals(41, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[4]);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray1[0], expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName((String) null, "contains");
      assertNotNull(qName0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[3] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray1[4] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray1[4]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray1[5]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray1[6] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual1;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      
      Step step0 = new Step((-1344), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertEquals((-1344), step0.getAxis());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2276, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertEquals(2276, step1.getAxis());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(8, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertEquals(8, step2.getAxis());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(83);
      assertNotNull(nodeTypeTest0);
      assertEquals(83, nodeTypeTest0.getNodeType());
      
      Step step3 = new Step(2380, nodeTypeTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(83, nodeTypeTest0.getNodeType());
      assertEquals(2380, step3.getAxis());
      assertEquals(2, expressionArray2.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(83, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertEquals(83, step4.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(2276, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals(2276, step5.getAxis());
      assertEquals(83, nodeTypeTest0.getNodeType());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[4], expressionArray2, stepArray0);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray2.length);
      assertEquals(8, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray1[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray1.length);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      expressionArray1[7] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd1;
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-356), processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-356), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-356), processingInstructionTest0, expressionArray1);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step1);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-356), step1.getAxis());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-356), processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-356), step2.getAxis());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(64, processingInstructionTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(64, step3.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(1078, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(1078, step4.getAxis());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[4] = step4;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(processingInstructionTest1);
      assertNull(processingInstructionTest1.getTarget());
      
      Step step5 = new Step(2048, processingInstructionTest1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      assertNull(processingInstructionTest1.getTarget());
      assertEquals(2048, step5.getAxis());
      assertEquals(8, expressionArray1.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-1604), processingInstructionTest1, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertNull(processingInstructionTest1.getTarget());
      assertEquals((-1604), step6.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[2], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals(7, stepArray0.length);
      assertEquals(5, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray1[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-1604), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals((-1604), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationSubtract0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(predicateContext0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(5, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, true, processingInstructionTest1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(processingInstructionTest1.equals((Object)processingInstructionTest0));
      assertNotNull(descendantContext0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNull(processingInstructionTest1.getTarget());
      assertEquals(5, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      
      // Undeclared exception!
      coreFunction0.functionPosition(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[4];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertNotNull(nodeTypeTest0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(18, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(step0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(18, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(18, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray2[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray0.length);
      assertEquals(4, expressionArray2.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray2[1] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray2[0], expressionPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(4, expressionArray2.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray2[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(902, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(902, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertSame(locationPath1, locationPath0);
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(902, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(902, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(902, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertNotNull(nodeTypeTest0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(18, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(18, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(18, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals(18, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray2[0], expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray0.length);
      assertEquals(3, expressionArray2.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray2[1] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray2[0], expressionPath0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(3, expressionArray2.length);
      assertEquals(2, stepArray0.length);
      
      expressionArray2[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(902, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(902, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertSame(locationPath1, locationPath0);
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(902, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step1, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(18, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(18, step1.getAxis());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(step1, step0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(18, step1.getAxis());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kj?|CL0uk0M;\"7V,");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathException");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3202, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-100);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte)30;
      byteArray0[6] = (byte) (-60);
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte)40;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-119), (byte) (-118), (byte) (-100), (byte)19, (byte)58, (byte)30, (byte) (-60), (byte)23, (byte)40}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      QName qName0 = new QName("$?an{yhWKpCMG-", "$?an{yhWKpCMG-");
      assertNotNull(qName0);
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray0[5]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(3202, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(3202, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(3202, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(3202, coreFunction2.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(3202, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      assertNotNull(coreOperationMod0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2550), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2550), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationDivide0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[0]);
      assertNotNull(nameAttributeTest0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant("/O8N\")6}u,u^<?ilF");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], nameAttributeTest0);
      assertNotNull(coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[5]);
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction((-731), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-731), coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Byte byte0 = new Byte((byte) (-107));
      assertEquals((byte) (-107), (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("0", "org.apache.commons.jxpath.ri.compiler.VariableReference");
      assertNotNull(qName0);
      assertEquals("0", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.getName());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("0", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.getName());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.toString());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(1618, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("0", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.getName());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.toString());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1618, step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(484, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("0", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.getName());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.toString());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(484, step1.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-668), nodeNameTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("0", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.getName());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", qName0.toString());
      assertEquals("0:org.apache.commons.jxpath.ri.compiler.VariableReference", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-668), step2.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3460, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3460, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3460, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("9_v%b!]'#:@bI", "9_v%b!]'#:@bI");
      assertNotNull(qName0);
      assertEquals("9_v%b!]'#:@bI", qName0.getName());
      assertEquals("9_v%b!]'#:@bI:9_v%b!]'#:@bI", qName0.toString());
      assertEquals("9_v%b!]'#:@bI", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("9_v%b!]'#:@bI", qName0.getName());
      assertEquals("9_v%b!]'#:@bI:9_v%b!]'#:@bI", qName0.toString());
      assertEquals("9_v%b!]'#:@bI", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      assertNotNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("9_v%b!]'#:@bI", qName0.getName());
      assertEquals("9_v%b!]'#:@bI:9_v%b!]'#:@bI", qName0.toString());
      assertEquals("9_v%b!]'#:@bI", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3460, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("9_v%b!]'#:@bI", qName0.getName());
      assertEquals("9_v%b!]'#:@bI:9_v%b!]'#:@bI", qName0.toString());
      assertEquals("9_v%b!]'#:@bI", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3460, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("9_v%b!]'#:@bI", qName0.getName());
      assertEquals("9_v%b!]'#:@bI:9_v%b!]'#:@bI", qName0.toString());
      assertEquals("9_v%b!]'#:@bI", qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 9_v%b!]'#:@bI:9_v%b!]'#:@bI
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(6, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(");
      assertNotNull(processingInstructionTest0);
      assertEquals("(", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(48, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("(", processingInstructionTest0.getTarget());
      assertEquals(48, step0.getAxis());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      QName qName0 = new QName("substring-aftersubstring-after");
      assertNotNull(qName0);
      assertEquals("substring-aftersubstring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-aftersubstring-after", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("substring-aftersubstring-after", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("substring-aftersubstring-after", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(48, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(48, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertNotNull(ancestorContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals("(", processingInstructionTest0.getTarget());
      
      ParentContext parentContext0 = new ParentContext(ancestorContext0, processingInstructionTest0);
      assertNotNull(parentContext0);
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals("(", processingInstructionTest0.getTarget());
      
      // Undeclared exception!
      coreFunction0.functionPosition(parentContext0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg1();
      assertSame(coreOperationAdd1, coreOperationAdd0);
      assertNotNull(coreOperationAdd1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction1 = new CoreFunction((-1361), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-1361), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction1.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertNotNull(nodeTypeTest0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(step0);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray2[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray2.length);
      
      LocationPath locationPath1 = (LocationPath)coreFunction0.getArg1();
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotSame(expressionArray2, expressionArray0);
      assertNotSame(expressionArray2, expressionArray1);
      assertSame(locationPath1, locationPath0);
      assertNotNull(locationPath1);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(3, expressionArray2.length);
      
      expressionArray1[0] = (Expression) locationPath1;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("M]_pvoG;@~!8?C$6l", "M]_pvoG;@~!8?C$6l");
      assertNotNull(qName0);
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertNotNull(decimalFormat0);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, decimalFormat0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, step1, beanPointer0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(step1, step0);
      assertNotNull(initialContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(13, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, nodeTypeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(attributeContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(13, step1.getAxis());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getName());
      assertEquals("M]_pvoG;@~!8?C$6l", qName0.getPrefix());
      assertEquals("M]_pvoG;@~!8?C$6l:M]_pvoG;@~!8?C$6l", qName0.toString());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray1[0] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1, expressionArray1.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("0", "0");
      assertNotNull(qName0);
      assertEquals("0", qName0.getName());
      assertEquals("0:0", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("0", qName0.getName());
      assertEquals("0:0", qName0.toString());
      assertEquals("0", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[2] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      assertNotNull(nodeTypeTest0);
      assertEquals(11, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(11, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals(11, step0.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(11, nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step1);
      assertEquals(11, step1.getAxis());
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(11, nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(11, step2.getAxis());
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-865), nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals((-865), step3.getAxis());
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-2654), nodeTypeTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals((-2654), step4.getAxis());
      assertEquals(11, nodeTypeTest0.getNodeType());
      assertEquals(4, expressionArray0.length);
      
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(5, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(parentContext0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(11, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3469, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = initialContext0.setPosition((-3357));
      assertFalse(boolean0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3357), initialContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3357), initialContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3357), initialContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext(initialContext0, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3357), initialContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      Double double1 = (Double)coreFunction0.functionNumber(attributeContext0);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3469, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3357), initialContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[1] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("3u+*C!mDTJH");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "3u+*C!mDTJH");
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = null;
      expressionArray1[5] = null;
      Step step0 = new Step(99, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(99, step0.getAxis());
      assertEquals(6, expressionArray1.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(99, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(99, step1.getAxis());
      assertEquals(6, expressionArray1.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(99, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(99, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals(1, step3.getAxis());
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(99, nodeNameTest0, expressionArray1);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step4);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals(99, step4.getAxis());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(6, expressionArray1.length);
      
      stepArray0[4] = step4;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertNotNull(nodeNameTest1);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      
      Step step5 = new Step(99, nodeNameTest1, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertNotNull(step5);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(99, step5.getAxis());
      assertEquals(6, expressionArray1.length);
      
      stepArray0[5] = step5;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = null;
      expressionArray2[1] = null;
      Step step6 = new Step((-1316), nodeNameTest1, expressionArray2);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step2));
      assertNotNull(step6);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals((-1316), step6.getAxis());
      assertEquals(2, expressionArray2.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step((-4755), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nodeNameTest0.equals((Object)nodeNameTest1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertNotNull(step7);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-4755), step7.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step(19, nodeNameTest1, expressionArray2);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step6));
      assertNotNull(step8);
      assertNull(qName0.getPrefix());
      assertEquals("3u+*C!mDTJH", qName0.getName());
      assertEquals("3u+*C!mDTJH", qName0.toString());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("3u+*C!mDTJH", nodeNameTest1.toString());
      assertFalse(nodeNameTest1.isWildcard());
      assertEquals(19, step8.getAxis());
      assertEquals(2, expressionArray2.length);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray2[0], expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray1.length);
      assertEquals(2, expressionArray2.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(2013265920, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals("", object1);
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      assertNotNull(nodeTypeTest0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      
      QName qName0 = new QName("S'B[}?lCL>u/,f0<~>");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.getName());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, nodeTypeTest0, locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertNull(qName0.getPrefix());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.getName());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, selfContext0, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.getName());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNull(qName0.getPrefix());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.getName());
      assertEquals("S'B[}?lCL>u/,f0<~>", qName0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      DecimalFormat decimalFormat0 = new DecimalFormat("\n");
      assertNotNull(decimalFormat0);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("\n");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("p");
      assertNotNull(processingInstructionTest0);
      assertEquals("p", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext(rootContext0, processingInstructionTest0, true, true);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("p", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      
      evalContextArray0[0] = (EvalContext) childContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(decimalFormat0.isGroupingUsed());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("\n", decimalFormat0.getPositivePrefix());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(0, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("\n#", decimalFormat0.toPattern());
      assertEquals("-\n", decimalFormat0.getNegativePrefix());
      assertEquals("\n#", decimalFormat0.toLocalizedPattern());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("\n", qName0.toString());
      assertEquals("\n", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(2, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(true, object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object2 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object2);
      assertNotNull(object2);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[18];
      CoreFunction coreFunction0 = new CoreFunction(159, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getArgumentCount());
      assertEquals(159, coreFunction0.getFunctionCode());
      assertEquals(18, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(18, coreFunction0.getArgumentCount());
      assertEquals(159, coreFunction0.getFunctionCode());
      assertEquals(18, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray1.length);
      
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-22), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertEquals("", object1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      Object object2 = coreFunction1.functionStartsWith((EvalContext) null);
      assertEquals(false, object2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object2.equals((Object)boolean0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      Object object3 = coreFunction1.functionContains((EvalContext) null);
      assertEquals(false, object3);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object3.equals((Object)boolean0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object3);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      Object object4 = coreFunction1.functionSubstring((EvalContext) null);
      assertEquals("", object4);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object4);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object1);
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      assertNotNull(coreOperationEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("nNSPSfj6eX_&=&4\"M");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("nNSPSfj6eX_&=&4\"M", qName0.toString());
      assertEquals("nNSPSfj6eX_&=&4\"M", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("nNSPSfj6eX_&=&4\"M", qName0.toString());
      assertEquals("nNSPSfj6eX_&=&4\"M", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step((-1929), (NodeTest) null, expressionArray0);
      assertNotNull(step0);
      assertEquals((-1929), step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, (NodeTest) null, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(7, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(560, (NodeTest) null, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals(560, step2.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(560, (NodeTest) null, expressionArray0);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals(560, step3.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      Constant constant0 = new Constant("nNSPSfj6eX_&=&4\"M");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1929), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1929), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = (-155);
      int int1 = 761;
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationMod coreOperationMod1 = (CoreOperationMod)coreFunction0.getArg2();
      assertSame(coreOperationMod1, coreOperationMod0);
      assertNotNull(coreOperationMod1);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("substring-aftersubstring-after", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[1];
      String string0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step(36, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(36, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(100, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      boolean boolean0 = false;
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName(".B@", "0");
      assertNotNull(qName0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], extensionFunction0);
      assertNotNull(nameAttributeTest0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2026, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2026, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationMultiply0);
      assertNotNull(predicateContext0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(3, expressionArray0.length);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0");
      assertNotNull(nodeNameTest0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(".B@:0", nodeNameTest0.toString());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, true, false);
      assertNotNull(childContext0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(".B@:0", nodeNameTest0.toString());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(3, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(".B@:0", nodeNameTest0.toString());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(3, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals("0", qName0.getName());
      assertEquals(".B@", qName0.getPrefix());
      assertEquals(".B@:0", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(".B@:0", nodeNameTest0.toString());
      assertEquals("0", nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Float float0 = new Float((double) (-209));
      assertEquals((-209.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationEqual0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationLessThan0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[3]);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationLessThanOrEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual1);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("vu4f", "");
      assertNotNull(qName0);
      assertEquals("vu4f", qName0.getPrefix());
      assertEquals("vu4f:", qName0.toString());
      assertEquals("", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("vu4f", qName0.getPrefix());
      assertEquals("vu4f:", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[2]);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2970));
      assertNotNull(nodeTypeTest0);
      assertEquals((-2970), nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-2011), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals((-2970), nodeTypeTest0.getNodeType());
      assertEquals((-2011), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) nameAttributeTest0;
      Step step1 = new Step(30, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals((-2970), nodeTypeTest0.getNodeType());
      assertEquals(30, step1.getAxis());
      assertEquals(1, expressionArray1.length);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-209), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals((-209), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(517, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(517, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Constant constant0 = new Constant("L2^DL9]F6K@D+pQ\"");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
      assertNotNull(object1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before('L2^DL9]F6K@D+pQ\"', 'L2^DL9]F6K@D+pQ\"')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3208), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant("substring-after");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number('substring-after', 'substring-after', 'substring-after', 'substring-after', 'substring-after', 'substring-after', 'substring-after', 'substring-after')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-587), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-587), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 108;
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationEqual0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("", "p\u0007T");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("p\u0007T", qName0.getName());
      assertEquals(":p\u0007T", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals("p\u0007T", qName0.getName());
      assertEquals(":p\u0007T", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(128, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(128, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray1.length);
      
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-22), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertEquals("", object1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      Object object2 = coreFunction1.functionStartsWith((EvalContext) null);
      assertEquals(false, object2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      assertEquals((-22), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1554), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-1554), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-587), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-587), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)3;
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      assertNotNull(coreOperationEqual0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("", "p\u0007T");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":p\u0007T", qName0.toString());
      assertEquals("p\u0007T", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":p\u0007T", qName0.toString());
      assertEquals("p\u0007T", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      LocationPath locationPath1 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      
      expressionArray0[4] = (Expression) locationPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, locationPath1);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertFalse(locationPath1.isAbsolute());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(108, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-587), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-587), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      QName qName1 = new QName("");
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertTrue(qName1.equals((Object)qName0));
      assertNotNull(selfContext0);
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNull(qName1.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      // Undeclared exception!
      coreFunction1.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-587), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-587), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertNotNull(selfContext0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3208), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("%J;1$Y]uX@", "%J;1$Y]uX@");
      assertNotNull(qName0);
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, rootContext0);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotNull(rootContext2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)rootContext2.getVariableContext(qName0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) rootContext1;
      evalContextArray0[2] = (EvalContext) rootContext1;
      evalContextArray0[3] = (EvalContext) rootContext1;
      evalContextArray0[4] = (EvalContext) rootContext2;
      evalContextArray0[5] = (EvalContext) rootContext2;
      evalContextArray0[6] = (EvalContext) initialContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = null;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-3208), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("%J;1$Y]uX@", qName0.getPrefix());
      assertEquals("%J;1$Y]uX@:%J;1$Y]uX@", qName0.toString());
      assertEquals("%J;1$Y]uX@", qName0.getName());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContextArray0[1]);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1554), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals((-1554), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object0);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction1.functionConcat((EvalContext) null);
      assertEquals("1", object1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2863), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2863), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      int int0 = (-433);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-5318), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-5318), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      assertNotNull(nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("#]7`J[$YxSxf/db+}`");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertNotNull(coreOperationUnion1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationUnion1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion1, expressionArray0[1]);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(37, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(37, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Constant constant0 = new Constant("- expression incomplete");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("- expression incomplete", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3471, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, expressionArray0.length);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) initialContext0;
      evalContextArray0[3] = (EvalContext) initialContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      assertEquals(4, evalContextArray0.length);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(3471, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3420, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(3420, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2107), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(0.0, object1);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("", object2);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertTrue(object2.equals((Object)object0));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(",");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "`bZHV3+jrYE2}AmY");
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      
      QName qName0 = new QName("`bZHV3+jrYE2}AmY", "true");
      assertNotNull(qName0);
      assertEquals("true", qName0.getName());
      assertEquals("`bZHV3+jrYE2}AmY", qName0.getPrefix());
      assertEquals("`bZHV3+jrYE2}AmY:true", qName0.toString());
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("true", qName0.getName());
      assertEquals("`bZHV3+jrYE2}AmY", qName0.getPrefix());
      assertEquals("`bZHV3+jrYE2}AmY:true", qName0.toString());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0, nullPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("`bZHV3+jrYE2}AmY", qName0.getPrefix());
      assertEquals("`bZHV3+jrYE2}AmY:true", qName0.toString());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, nullPointer0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("`bZHV3+jrYE2}AmY", qName0.getPrefix());
      assertEquals("`bZHV3+jrYE2}AmY:true", qName0.toString());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(predicateContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("true", qName0.getName());
      assertEquals("`bZHV3+jrYE2}AmY", qName0.getPrefix());
      assertEquals("`bZHV3+jrYE2}AmY:true", qName0.toString());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2182), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2182), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2457, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2457, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(14, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("@{");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction1, expressionArray0[1]);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(coreOperationMod0);
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-1514), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals((-1514), step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1514), nodeTypeTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals((-1514), step1.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-931), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals((-931), step2.getAxis());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertNotNull(expressionPath0);
      assertNull(qName0.getPrefix());
      assertEquals("@{", qName0.toString());
      assertEquals("@{", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[0]);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = (-1647);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], constant0);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      assertFalse(coreOperationEqual0.equals((Object)coreOperationEqual1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction", "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction:org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2147483648()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-1554), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals((-1554), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals("", object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(expressionArray0, expressionArray1);
      assertNotNull(object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2107), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(unknownFunction-2107()(''), unknownFunction-2107()(''), unknownFunction-2107()(''), '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Integer integer0 = Integer.valueOf(864);
      assertEquals(864, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(864, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(864, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(32, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step2 = new Step(41, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(41, step2.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(39, nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(39, step3.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[3];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) constant0;
      Step step4 = new Step(864, nodeNameTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      assertEquals(864, step4.getAxis());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(3, expressionArray2.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-1033), nodeNameTest0, expressionArray1);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step5);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals((-1033), step5.getAxis());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step((-199), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertNotNull(step6);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-199), step6.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[6] = step6;
      Step step7 = new Step(864, nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step1));
      assertNotNull(step7);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(864, step7.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step(39, nodeNameTest0, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertNotNull(step8);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(39, step8.getAxis());
      assertEquals(3, expressionArray2.length);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, expressionArray2[0]);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3, expressionArray2.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertTrue(locationPath1.isAbsolute());
      assertEquals(9, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray2[1], locationPath1);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(coreOperationNotEqual0);
      assertTrue(locationPath1.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray2.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(864, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(864, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertNotNull(coreOperationNegate0);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertEquals(61, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("ac:k%h1gq9Iq");
      assertNotNull(qName0);
      assertEquals("ac", qName0.getPrefix());
      assertEquals("ac:k%h1gq9Iq", qName0.toString());
      assertEquals("k%h1gq9Iq", qName0.getName());
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals("ac", qName0.getPrefix());
      assertEquals("ac:k%h1gq9Iq", qName0.toString());
      assertEquals("k%h1gq9Iq", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreFunction coreFunction1 = new CoreFunction((-1091), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-1091), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) unionContext0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(61, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(61, coreFunction2.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      int int0 = coreFunction2.getArgumentCount();
      assertEquals(4, int0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(4, coreFunction2.getArgumentCount());
      assertEquals(61, coreFunction2.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      Integer integer0 = Integer.getInteger("ac:k%h1gq9Iq", 14);
      assertEquals(14, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      // Undeclared exception!
      coreFunction1.toString();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(",");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2107), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals(",", object2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object2.equals((Object)object1));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(704, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant0 = new Constant("!(\"");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreFunction0);
      assertNotNull(coreOperationMultiply0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationMultiply0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      Expression expression1 = coreFunction0.getArg2();
      assertSame(expression1, constant0);
      assertNotNull(expression1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertFalse(expression1.isContextDependent());
      assertFalse(expression1.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = expression1;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationMultiply0);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationNotEqual1);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(704, coreFunction0.getFunctionCode());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction1 = new CoreFunction(704, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(704, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(704, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(704, coreFunction2.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, expressionArray0[0]);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[1]);
      assertNotNull(coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(3377, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3377, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Constant constant0 = new Constant("=LCspRc3~");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals("=LCspRc3~=LCspRc3~=LCspRc3~=LCspRc3~", object0);
      assertNotNull(object0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "U?0=g");
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("U?0=g", nodeNameTest0.getNamespaceURI());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertNotNull(precedingOrFollowingContext0);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("U?0=g", nodeNameTest0.getNamespaceURI());
      
      Object object1 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals("=LCspRc3~=LCspRc3~=LCspRc3~=LCspRc3~", object1);
      assertTrue(object1.equals((Object)object0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("U?0=g", nodeNameTest0.getNamespaceURI());
      assertEquals(4, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant constant0 = new Constant("=LCspRc3~");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals("=LCspRc3~=LCspRc3~=LCspRc3~=LCspRc3~", object0);
      assertNotNull(object0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreFunction0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationNotEqual0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreOperationNotEqual0.findMatch((Iterator) null, (Iterator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(532, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(532, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(27, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Constant constant0 = new Constant("count");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant1 = new Constant("count");
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(578, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object1);
      assertTrue(object1.equals((Object)boolean0));
      assertFalse(object1.equals((Object)boolean1));
      assertNotNull(object1);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.compute((EvalContext) null);
      assertNull(object2);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object3 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(0.0, object3);
      assertNotNull(object3);
      assertEquals(578, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNotNull(processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      
      Step step0 = new Step(36, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(36, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(100, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(100, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2107), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals((-2107), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kj?|CL0uk0M;\"7V,");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathException");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3202, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreFunction0);
      assertNotNull(coreOperationLessThan0);
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreFunction0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(3202, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("$?an{yhWKpCMG-", "$?an{yhWKpCMG-");
      assertNotNull(qName0);
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], extensionFunction0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray0[5]);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("$?an{yhWKpCMG-", qName0.getPrefix());
      assertEquals("$?an{yhWKpCMG-:$?an{yhWKpCMG-", qName0.toString());
      assertEquals("$?an{yhWKpCMG-", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(3202, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(3202, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(3202, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(3202, coreFunction2.getFunctionCode());
      assertEquals(7, coreFunction2.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertNull(object0);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(3202, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(boolean1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      assertEquals(4, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", "JXPath internal error: compareChildNodes called for ");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "/|5PU`");
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-2037), nodeNameTest0, (Expression[]) null);
      assertNotNull(step0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2037), step0.getAxis());
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(10, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(10, step2.getAxis());
      
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, step3.getAxis());
      
      stepArray0[3] = step3;
      Step step4 = new Step((-889), nodeNameTest0, (Expression[]) null);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-889), step4.getAxis());
      
      stepArray0[4] = step4;
      Step step5 = new Step(1, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertNotNull(step5);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", qName0.getPrefix());
      assertEquals("JXPath internal error: compareChildNodes called for ", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", qName0.toString());
      assertEquals("/|5PU`", nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply:JXPath internal error: compareChildNodes called for ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step5.getAxis());
      assertEquals(2, expressionArray0.length);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("/|5PU`");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "kj?|CL0uk0M;\"7V,");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean3 = coreFunction0.isContextDependent();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathException");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean1));
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean2));
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1173()('org.apache.commons.jxpath.JXPathException')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 18;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean3 = coreFunction0.computeContextDependent();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(5, expressionArray1.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[0], nameAttributeTest0);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(nameAttributeTest1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) nameAttributeTest1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest1, constant0);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, constant0);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      assertFalse(coreOperationAnd1.equals((Object)coreOperationAnd0));
      assertNotNull(coreOperationAnd1);
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAnd1;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      
      expressionArray0[5] = (Expression) constant1;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.model.VariablePointerFactory");
      assertNotNull(processingInstructionTest0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(13, step0.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(472, processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(472, step1.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(19, processingInstructionTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(19, step2.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step(472, processingInstructionTest0, expressionArray0);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(472, step3.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[3] = step3;
      Step step4 = new Step(100, processingInstructionTest0, expressionArray0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(100, step4.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[4] = step4;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointerFactory", "v{\"&H];y{;i6r9");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      Step step5 = new Step(19, nodeNameTest0, expressionArray0);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(19, step5.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[5] = step5;
      Step step6 = new Step(7, nodeNameTest0, expressionArray0);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertNotNull(step6);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(7, step6.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step7 = new Step((-1380), nodeNameTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertNotNull(step7);
      assertEquals((-1380), step7.getAxis());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[7] = step7;
      Step step8 = new Step(1592, processingInstructionTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertNotNull(step8);
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", processingInstructionTest0.getTarget());
      assertEquals(1592, step8.getAxis());
      assertEquals(0, expressionArray1.length);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory", qName0.getPrefix());
      assertEquals("v{\"&H];y{;i6r9", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.model.VariablePointerFactory:v{\"&H];y{;i6r9", qName0.toString());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2777);
      assertNotNull(nodeTypeTest0);
      assertEquals(2777, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step((-4408), nodeTypeTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals(2777, nodeTypeTest0.getNodeType());
      assertEquals((-4408), step0.getAxis());
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionPath0);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(2777, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2777, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertNotNull(childContext0);
      assertEquals(2777, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Integer integer0 = new Integer(1077);
      assertEquals(1077, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction(1077, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreFunction0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationLessThan0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[0] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1077);
      assertNotNull(nodeTypeTest0);
      assertEquals(1077, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(3620, nodeTypeTest0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals(1077, nodeTypeTest0.getNodeType());
      assertEquals(3620, step0.getAxis());
      assertEquals(9, expressionArray1.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray1[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionArray1[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[0], expressionArray1[1]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(1077, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1077, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      NameAttributeTest nameAttributeTest1 = (NameAttributeTest)coreFunction1.getArg1();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(nameAttributeTest1, nameAttributeTest0);
      assertNotNull(nameAttributeTest1);
      assertEquals(1077, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[4] = (Expression) nameAttributeTest1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(0, expressionArray0.length);
      
      expressionArray1[5] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest2 = (NameAttributeTest)coreFunction1.getArg1();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(nameAttributeTest2, nameAttributeTest1);
      assertSame(nameAttributeTest2, nameAttributeTest0);
      assertNotNull(nameAttributeTest2);
      assertEquals(1077, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertTrue(nameAttributeTest2.computeContextDependent());
      assertEquals("=", nameAttributeTest2.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(nameAttributeTest2, expressionArray1[5]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(1077, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertTrue(nameAttributeTest2.computeContextDependent());
      assertEquals("=", nameAttributeTest2.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[6] = (Expression) coreOperationGreaterThan1;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionPath0, coreOperationAnd0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertNotNull(coreOperationLessThan1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1077, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray1[7] = (Expression) coreOperationLessThan1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNegate0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(9, expressionArray1.length);
      
      expressionArray1[8] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction2 = new CoreFunction(1077, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(1077, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(1077, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      Object object0 = coreFunction2.computeValue((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNull(object0);
      assertEquals(1077, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertTrue(boolean1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(1077, coreFunction1.getFunctionCode());
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(9, expressionArray1.length);
      
      // Undeclared exception!
      coreFunction2.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction((byte)3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction((-1231), expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals((-1231), coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(true, object1);
      assertNotNull(object1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean3 = coreFunction0.isContextDependent();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean2));
      assertTrue(object1.equals((Object)boolean1));
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean3));
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("count", string0);
      assertFalse(string0.equals((Object)object0));
      assertNotNull(string0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.compute((EvalContext) null);
      assertEquals(1.0, object2);
      assertNotNull(object2);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object3 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(0.0, object3);
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object4 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object4);
      assertFalse(object4.equals((Object)object3));
      assertTrue(object4.equals((Object)object2));
      assertNotNull(object4);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertFalse(boolean1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(19, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction2.isContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(19, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Constant constant0 = new Constant("java.util.concurrent.atomic.AtomicInteger");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)3, (byte)3, (byte)3, (byte)3}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", "format-number");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":format-number", qName0.toString());
      assertEquals("format-number", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":format-number", qName0.toString());
      assertEquals("format-number", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationNegate0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("format-number");
      assertNotNull(processingInstructionTest0);
      assertEquals("format-number", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-1838), processingInstructionTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("format-number", processingInstructionTest0.getTarget());
      assertEquals((-1838), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2149), processingInstructionTest0, expressionArray0);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("format-number", processingInstructionTest0.getTarget());
      assertEquals((-2149), step1.getAxis());
      assertEquals(5, expressionArray0.length);
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      assertNotNull(nodeTypeTest0);
      assertEquals(0, nodeTypeTest0.getNodeType());
      
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals((-1838), step2.getAxis());
      assertEquals(0, nodeTypeTest0.getNodeType());
      assertEquals(5, expressionArray0.length);
      
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(1816, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(1816, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(rootContext1);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionSubstring(rootContext0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-44)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1105), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-1105), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      boolean boolean2 = coreFunction1.isContextDependent();
      assertFalse(boolean2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals((-1105), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray1.length);
      
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(16, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(3139, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(3139, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean3 = coreFunction0.isContextDependent();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean1));
      assertTrue(object1.equals((Object)boolean3));
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean2));
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.compute((EvalContext) null);
      assertEquals(1.0, object2);
      assertNotNull(object2);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object3 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(0.0, object3);
      assertFalse(object3.equals((Object)object2));
      assertNotNull(object3);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean0));
      assertTrue(object1.equals((Object)boolean1));
      assertTrue(object1.equals((Object)boolean2));
      assertNotNull(object1);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], extensionFunction0);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      CoreOperationMod coreOperationMod1 = (CoreOperationMod)coreFunction0.getArg2();
      assertSame(coreOperationMod1, coreOperationMod0);
      assertNotNull(coreOperationMod1);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMod1;
      CoreFunction coreFunction1 = new CoreFunction((-896), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-896), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      NamespaceResolver namespaceResolver0 = new NamespaceResolver();
      assertNotNull(namespaceResolver0);
      assertFalse(namespaceResolver0.isSealed());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn(namespaceResolver0).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(";+HJ?!]L.jtz*E6", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(namespaceResolver0.isSealed());
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ;+HJ?!]L.jtz*E6:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(";+HJ?!]L.jtz*E6", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      assertNotNull(jXPathContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getName());
      assertEquals(";+HJ?!]L.jtz*E6:", qName0.toString());
      assertEquals(";+HJ?!]L.jtz*E6", qName0.getPrefix());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(jXPathContext0.isLenient());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-44);
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte) (-44)}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Object object0 = coreFunction0.functionTrue((EvalContext) null);
      assertEquals(true, object0);
      assertFalse(object0.equals((Object)boolean0));
      assertFalse(object0.equals((Object)boolean1));
      assertNotNull(object0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)1}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      String string0 = constant0.toString();
      assertEquals("''", string0);
      assertNotNull(string0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)1, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)string0));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction1.functionRound((EvalContext) null);
      assertEquals(0.0, object2);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object2);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1173()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object1);
      assertFalse(object1.equals((Object)boolean2));
      assertFalse(object1.equals((Object)boolean1));
      assertFalse(object1.equals((Object)boolean0));
      assertNotNull(object1);
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1173()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(40, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(1967, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(1967, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction1;
      expressionArray0[2] = (Expression) coreFunction1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      boolean boolean0 = coreOperationSubtract0.isContextDependent();
      assertFalse(boolean0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreFunction1;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      expressionArray0[5] = (Expression) coreFunction1;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction1;
      expressionArray0[8] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      boolean boolean2 = coreFunction2.computeContextDependent();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathException", "name");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.JXPathException:name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathException", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertEquals("org.apache.commons.jxpath.JXPathException:name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathException", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, expressionArray0[0]);
      assertNotNull(coreOperationDivide0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Constant constant0 = new Constant("org.apache.commons.jxpath.JXPathException");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationOr0);
      assertNotNull(nameAttributeTest0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], constant0);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals("org.apache.commons.jxpath.JXPathException:name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathException", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreFunction0;
      CoreOperationDivide coreOperationDivide1 = (CoreOperationDivide)coreFunction0.getArg3();
      assertSame(coreOperationDivide1, coreOperationDivide0);
      assertNotNull(coreOperationDivide1);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction1 = new CoreFunction((-1271), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals((-1271), coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 3;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction1;
      expressionArray0[2] = (Expression) coreFunction1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[2]);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      expressionArray0[4] = (Expression) coreFunction1;
      expressionArray0[5] = (Expression) coreFunction1;
      expressionArray0[6] = (Expression) coreFunction0;
      expressionArray0[7] = (Expression) coreFunction1;
      expressionArray0[8] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals(9, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1173, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)3, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals("", object1);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertNotNull(object1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1173, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.JXPathException");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)3}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      expressionArray0[0] = (Expression) constant0;
      String string0 = constant0.toString();
      assertEquals("''", string0);
      assertNotNull(string0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreFunction coreFunction0 = new CoreFunction((-1054), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1054), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      String string1 = constant0.toString();
      assertEquals("''", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals("", object0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1054), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext1 = null;
      String string2 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-1054()", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1054), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      coreFunction0.args = expressionArray0;
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1054), coreFunction0.getFunctionCode());
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      
      int int0 = unionContext0.getCurrentPosition();
      assertEquals(0, int0);
      assertEquals(0, unionContext0.getPosition());
      
      String string3 = coreFunction0.toString();
      assertEquals("unknownFunction-1054()('')", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1054), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1054()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(20, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      CoreFunction coreFunction2 = new CoreFunction(19, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      assertEquals(19, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      int int0 = 29;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 1169;
      int int1 = 12;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      assertNotNull(coreOperationMultiply0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, coreOperationUnion0);
      assertNotNull(coreOperationDivide0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 div org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(0, expressionArray0.length);
      
      expressionArray1[1] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(3, expressionArray1.length);
      
      expressionArray1[2] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray1.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray1.length);
      
      QName qName1 = new QName("", "UHguX");
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      assertEquals(":UHguX", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("UHguX", qName1.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      assertEquals(":UHguX", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("UHguX", qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":UHguX", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(descendantContext0);
      assertEquals(":UHguX", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertEquals("UHguX", qName1.getName());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":UHguX", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionRound(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.LocationPath");
      assertNotNull(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.LocationPath", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.LocationPath", qName0.getName());
      assertNull(qName0.getPrefix());
      
      int int0 = 2;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("~vQsuh", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("~vQsuh:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step(40, nodeNameTest0, expressionArray0);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("~vQsuh:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-3464), nodeNameTest0, (Expression[]) null);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("~vQsuh:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-3464), step1.getAxis());
      
      stepArray0[1] = step1;
      Step step2 = new Step(2513, nodeNameTest0, (Expression[]) null);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("~vQsuh:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2513, step2.getAxis());
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(3, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertNotNull(coreOperationNegate1);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationNegate1;
      Step[] stepArray1 = new Step[7];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step0;
      stepArray1[1] = step2;
      stepArray1[2] = step0;
      stepArray1[3] = step1;
      Step step3 = new Step(40, nodeNameTest0, (Expression[]) null);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("~vQsuh:", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step3.getAxis());
      
      stepArray1[4] = step3;
      stepArray1[5] = step1;
      stepArray1[6] = step0;
      LocationPath locationPath1 = new LocationPath(false, stepArray1);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(7, stepArray1.length);
      
      expressionArray0[5] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("~vQsuh");
      assertNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals("", qName0.getName());
      assertEquals("~vQsuh", qName0.getPrefix());
      assertEquals("~vQsuh:", qName0.toString());
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertNotNull(rootContext0);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertNotNull(rootContext1);
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(rootContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(5, coreFunction1.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-4767), expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals((-4767), coreFunction1.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(25, coreFunction2.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3724, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(3724, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      String string0 = coreFunction1.toString();
      assertEquals("string()", string0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(string0);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[6];
      Expression[] expressionArray2 = new Expression[8];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationOr0;
      expressionArray2[1] = (Expression) coreOperationOr0;
      expressionArray2[2] = (Expression) coreOperationOr0;
      expressionArray2[3] = (Expression) coreOperationOr0;
      expressionArray2[4] = (Expression) coreOperationOr0;
      expressionArray2[5] = (Expression) coreOperationOr0;
      expressionArray2[6] = (Expression) coreOperationOr0;
      expressionArray2[7] = (Expression) coreOperationOr0;
      Step step0 = new Step((-1301), (NodeTest) null, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(step0);
      assertEquals((-1301), step0.getAxis());
      assertEquals(8, expressionArray2.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-2422), (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      assertEquals((-2422), step1.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[1] = step1;
      Step step2 = new Step(5301, (NodeTest) null, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      assertEquals(5301, step2.getAxis());
      assertEquals(8, expressionArray0.length);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-557), (NodeTest) null, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      assertEquals((-557), step3.getAxis());
      assertEquals(4, expressionArray1.length);
      
      stepArray0[3] = step3;
      Expression[] expressionArray3 = new Expression[0];
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      
      Step step4 = new Step((-2422), (NodeTest) null, expressionArray3);
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      assertEquals((-2422), step4.getAxis());
      assertEquals(0, expressionArray3.length);
      
      stepArray0[4] = step4;
      Step step5 = new Step(15, (NodeTest) null, expressionArray2);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      assertEquals(15, step5.getAxis());
      assertEquals(8, expressionArray2.length);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray2[4], expressionArray2[3]);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(8, expressionArray2.length);
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, expressionArray0[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(8, expressionArray2.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, coreOperationOr0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(coreOperationSubtract0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(8, expressionArray2.length);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray3);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertNotNull(coreOperationOr1);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(0, expressionArray3.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr1, expressionArray0[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertFalse(expressionArray3.equals((Object)expressionArray2));
      assertFalse(expressionArray3.equals((Object)expressionArray0));
      assertFalse(expressionArray3.equals((Object)expressionArray1));
      assertNotNull(coreOperationNotEqual0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(0, expressionArray3.length);
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, expressionArray0[1]);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray1[0], expressionArray0[4]);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray3));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      assertNotNull(coreOperationSubtract1);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      
      expressionArray0[7] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(1582, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray3));
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(1582, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(2, evalContextArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength(unionContext0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1287, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(16);
      assertNotNull(nodeTypeTest0);
      assertEquals(16, nodeTypeTest0.getNodeType());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(namespaceContext0);
      assertEquals(16, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 1169;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction((-90), expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-90), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertNull(expression0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-90), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = null;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) coreFunction0;
      QName qName0 = new QName("A Text is not allowed at the document root", "A Text is not allowed at the document root");
      assertNotNull(qName0);
      assertEquals("A Text is not allowed at the document root", qName0.getName());
      assertEquals("A Text is not allowed at the document root:A Text is not allowed at the document root", qName0.toString());
      assertEquals("A Text is not allowed at the document root", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals("A Text is not allowed at the document root", qName0.getName());
      assertEquals("A Text is not allowed at the document root:A Text is not allowed at the document root", qName0.toString());
      assertEquals("A Text is not allowed at the document root", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      
      expressionArray1[2] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Float float0 = new Float((float) 1151);
      assertEquals(1151.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[2] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, (Expression) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(nameAttributeTest0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg2();
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      assertSame(coreOperationUnion1, coreOperationUnion0);
      assertNotNull(coreOperationUnion1);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-90), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationUnion1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, expressionArray1[2]);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(3, expressionArray1.length);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNull(object0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-90), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      
      int int0 = 3722;
      CoreFunction coreFunction2 = new CoreFunction(3722, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(3722, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(3, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      Object object0 = coreFunction0.functionLast(unionContext0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(128, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNull(object0);
      assertEquals(128, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(2, expressionArray1.length);
      
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      Object object1 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertEquals("", object1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotNull(object1);
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      
      CoreFunction coreFunction2 = new CoreFunction(13, (Expression[]) null);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      assertEquals(13, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      int int0 = 1287;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNotEqual0, (Expression) null);
      assertNotNull(nameAttributeTest0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, coreOperationNotEqual0);
      assertNotNull(coreOperationLessThan0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, (Expression) null);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, nameAttributeTest0);
      assertNotNull(coreOperationEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = (CoreOperationEqual)coreFunction0.getArg3();
      assertSame(coreOperationEqual1, coreOperationEqual0);
      assertNotNull(coreOperationEqual1);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], coreOperationLessThan0);
      assertNotNull(coreOperationMod0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, coreOperationNotEqual0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, nameAttributeTest0);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray0[1], coreOperationSubtract0);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan1;
      QName qName0 = new QName("9i&.T{_]u", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("9i&.T{_]u:null", qName0.toString());
      assertEquals("9i&.T{_]u", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getName());
      assertEquals("9i&.T{_]u:null", qName0.toString());
      assertEquals("9i&.T{_]u", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(expressionArray0[3], extensionFunction0);
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertNotNull(coreOperationEqual2);
      assertNull(qName0.getName());
      assertEquals("9i&.T{_]u:null", qName0.toString());
      assertEquals("9i&.T{_]u", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationEqual2;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[1]);
      assertNotNull(coreOperationDivide0);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction1 = new CoreFunction(1287, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(1287, coreFunction1.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(28, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(3, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(concat(), concat(), concat())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Expression[] expressionArray1 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      assertNotNull(coreFunction0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray1.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray1.length);
      
      expressionArray1[1] = null;
      Expression expression1 = coreFunction0.getArg1();
      assertNull(expression1);
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray1.length);
      
      expressionArray1[2] = null;
      Constant constant0 = new Constant("\"8[J");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray1[3] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray1.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TI$bF$8_M2(G?,!aM{");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int int0 = 5;
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAdd0, expressionArray0[0]);
      assertNotNull(coreOperationEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], extensionFunction0);
      assertNotNull(coreOperationLessThan0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], extensionFunction0);
      assertNotNull(coreOperationMod0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2306, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("J+K");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "J+K");
      Step step0 = new Step(1012, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[4] = (Expression) locationPath0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(4643, expressionArray1);
      // Undeclared exception!
      coreFunction1.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 1169;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int int0 = 8;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer(0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction807()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string1);
      
      coreFunction0.functionName(initialContext0);
      assertEquals(807, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      Expression[] expressionArray2 = new Expression[1];
      expressionArray2[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int int0 = 8;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2844, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 1169;
      CoreFunction coreFunction0 = new CoreFunction(1169, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationEqual0);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      Step step0 = new Step(454, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(20, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(40, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      QName qName0 = new QName((String) null, "qiE\"wz_\"FJO}*O84D");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step3 = new Step(40, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(25, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(8, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray1, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(454, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      coreFunction0.getFunctionName();
      NodeTest nodeTest0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1642, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("X>MT`stefRc{xYUF+", "sum");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Short short0 = new Short((short)671);
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      QName qName0 = new QName("2gg+1US <8hlhDd", "2gg+1US <8hlhDd");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "2gg+1US <8hlhDd");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      JXPathContext.newContext((Object) attributeContext0);
      BasicVariables basicVariables0 = new BasicVariables();
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-481), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1440), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationNegate1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, expressionArray1[1]);
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray1[4] = (Expression) locationPath1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[4], expressionArray1[1]);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[3], extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(1400, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      coreFunction1.compute((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      CoreFunction coreFunction1 = new CoreFunction((-1440), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1440()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.args = null;
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step((-1563), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      Short short0 = new Short((short)1234);
      Constant constant0 = new Constant(short0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[2], coreOperationEqual0);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-103), expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1169, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      coreFunction1.computeContextDependent();
      coreFunction1.args = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1169()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      coreFunction0.computeContextDependent();
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Step step0 = new Step(6730, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(4, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(6730, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-2915), processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step((-312), processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step((-312), processingInstructionTest0, (Expression[]) null);
      stepArray0[5] = step5;
      Step step6 = new Step(2771, processingInstructionTest0, (Expression[]) null);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.VariablePointerFactory", "' returns ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual1;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, constant0);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationSubtract0);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 6;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "substring-before";
      QName qName0 = new QName("substring-before");
      VariableReference variableReference0 = new VariableReference(qName0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      variableReference0.toString();
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 27;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("dG", "dG");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, nameAttributeTest0);
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dG");
      Step step0 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = (Expression) coreFunction0;
      Step step1 = new Step(250, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(27, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      BasicVariables basicVariables0 = new BasicVariables();
      // Undeclared exception!
      try { 
        nameAttributeTest0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-5299));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-5299), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5299()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      nodeTypeTest0.toString();
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(4, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      int int0 = 1;
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      int int0 = 13;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      int int1 = 27;
      CoreFunction coreFunction1 = new CoreFunction(27, (Expression[]) null);
      coreFunction1.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("j");
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationNotEqual0, constant0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2887), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2887()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000002 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      int int0 = 11;
      Expression[] expressionArray1 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" [Namespace: ");
      Step step0 = new Step(16, processingInstructionTest0, expressionArray1);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], expressionArray1[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], coreOperationMod0);
      expressionArray1[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray1);
      EvalContext evalContext1 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Invalid argument type for 'sum': ");
      processingInstructionTest0.toString();
      processingInstructionTest0.toString();
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      step0.toString();
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      Step step1 = new Step(17, processingInstructionTest0, expressionArray0);
      step1.toString();
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      coreFunction0.compute((EvalContext) null);
      coreFunction1.getArg2();
      assertEquals((-1), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      int int0 = 752;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(752, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      processingInstructionTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionString(namespaceContext0);
      Expression[] expressionArray1 = new Expression[5];
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 29;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      Consumer<NodePointer> consumer0 = (Consumer<NodePointer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      unionContext0.forEachRemaining(consumer0);
      coreFunction0.functionLast(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      unionContext0.setPosition(29);
      coreFunction0.functionLast(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      int int0 = 6;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(20, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[11];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      CoreFunction coreFunction1 = new CoreFunction(1287, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1169, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1169()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction((-1477), expressionArray0);
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(1006, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(93, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(25, (Expression[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      EvalContext evalContext1 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 1287;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("[]", "[]");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      nodeTypeTest0.toString();
      QName qName1 = new QName("[UWny d");
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(346, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      String string0 = "c^ID{6;G-%7";
      Constant constant0 = new Constant("c^ID{6;G-%7");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[5] = expression0;
      Expression expression1 = coreFunction0.getArg1();
      expressionArray0[6] = expression1;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = 16;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      int int0 = 6;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      coreFunction0.functionFalse((EvalContext) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.functionStringLength(precedingOrFollowingContext0);
      CoreFunction coreFunction1 = new CoreFunction(1165, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(207, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      CoreFunction coreFunction1 = new CoreFunction((-657), (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.functionLast(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Not a collection: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(selfContext0, false, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(2308, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray1[1] = (Expression) locationPath0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, locationPath0);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1138), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("string");
      processingInstructionTest1.toString();
      Step step0 = new Step(963, processingInstructionTest0, expressionArray0);
      step0.toString();
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      step0.toString();
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(829, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(829, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      QName qName0 = new QName("L2^DL9]F6K@D+pxQ\"L2^DL9]F6K@D+pxQ\"");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "L2^DL9]F6K@D+pxQ\"L2^DL9]F6K@D+pxQ\"", (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, (NodeTest) null);
      EvalContext evalContext0 = rootContext0.getConstantContext(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Not a collection: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Not a collection: ");
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      CoreFunction coreFunction1 = new CoreFunction(7, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      QName qName0 = new QName("");
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(unknownFunction1165()(), null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 0;
      int int1 = 1165;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(64, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("_.ZFQIT");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000001 >= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(17, (Expression[]) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      CoreFunction coreFunction3 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.iterate(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-5299));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      int int0 = 18;
      CoreFunction coreFunction0 = new CoreFunction((-5299), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-5299()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-825), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      Integer integer0 = new Integer(807);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(807, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      jXPathContextReferenceImpl0.getFactory();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer(0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction807()()", string0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(807, int0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      String string1 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotNull(string1);
      
      coreFunction0.functionPosition(initialContext0);
      assertEquals(807, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(1287, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "TI$bF$8_M2(G?,!aM{";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TI$bF$8_M2(G?,!aM{");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TI$bF$8_M2(G?,!aM{");
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "TI$bF$8_M2(G?,!aM{");
      JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      Pointer pointer0 = null;
      // Undeclared exception!
      try { 
        jXPathContext0.getPointerByID("TI$bF$8_M2(G?,!aM{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      jXPathContext0.getFactory();
      int int0 = new Integer(13);
      Integer integer0 = new Integer(259);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAdd0);
      QName qName0 = new QName("substring-after()");
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      processingInstructionTest0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      step0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "string");
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction((-1760), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(1287, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      jXPathContext0.getFactory();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer(259);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAdd0);
      QName qName0 = new QName("substring-after()");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) parentContext0;
      evalContextArray0[5] = (EvalContext) parentContext0;
      evalContextArray0[6] = (EvalContext) predicateContext0;
      evalContextArray0[7] = (EvalContext) predicateContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.getCurrentNodePointer();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Not a collection: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Not a collection: ");
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1169, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionKey(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Not a collection: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      int int0 = (-1477);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray1 = null;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, (Expression[]) null, stepArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(DSc-&E");
      expressionPath0.createContextForStep((EvalContext) null, 1024, processingInstructionTest0);
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction((-2178), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreOperationAdd0.args = null;
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Constant constant0 = new Constant("unknownFunction");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual1, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual2;
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, expression0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[5]);
      CoreFunction coreFunction1 = new CoreFunction((-1787), expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Z*U4Z{W");
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1287()('unknownFunction', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1660, expressionArray0);
      coreFunction0.functionFalse((EvalContext) null);
      assertEquals(1660, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("<un5}<O");
      Step step0 = new Step(12, processingInstructionTest1, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      step0.toString();
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      Step step1 = new Step(12, processingInstructionTest1, (Expression[]) null);
      step1.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "<un5}<O");
      CoreFunction coreFunction2 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(72, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      expressionPath0.createContextForStep((EvalContext) null, 72, (NodeTest) null);
      coreFunction0.functionNull((EvalContext) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction72()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      Integer integer0 = new Integer(807);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2500));
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeTypeTest0, false);
      coreFunction0.computeValue(childContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction807()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      int int0 = 0;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      NodeSet nodeSet0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      int int0 = 6;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      String string0 = "org.apache.commons.jxpath.JXPathInvalidSyntaxException";
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()(), unknownFunction1165()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      int int0 = 6;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      boolean boolean0 = false;
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1165()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "0z[D81j!bt");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.NamespaceResolver");
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      expressionPath0.isSimpleStep(step0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      int int0 = 807;
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction39()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Not a collection: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-686), nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      step0.toString();
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "Not a collection: ");
      expressionPath0.isSimplePath();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      step0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "string");
      CoreFunction coreFunction1 = new CoreFunction(568, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      EvalContext evalContext1 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-459));
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1287()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      int int0 = 6;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, processingInstructionTest0);
      coreFunction1.functionStringLength(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1165()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1838));
      Step step0 = new Step(3535, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step1 = new Step((-1838), nodeTypeTest0, expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], expressionArray1[1]);
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      Step step3 = new Step((-1298), nodeTypeTest0, expressionArray1);
      Step step4 = new Step(1425, nodeTypeTest0, expressionArray1);
      Step step5 = new Step(1425, nodeTypeTest0, expressionArray1);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray1);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreFunction0);
      coreFunction0.compute(rootContext0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray1[0]);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction1 = new CoreFunction(1896, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(12, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1838));
      CoreFunction coreFunction0 = new CoreFunction((-1838), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
      jXPathContext0.getFactory();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer((-1838));
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      int int0 = new Integer(807);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction807()()", string0);
      
      int int1 = coreFunction0.getFunctionCode();
      assertEquals(807, int1);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2500));
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeTypeTest0, false);
      coreFunction0.computeValue(childContext0);
      coreFunction0.functionPosition(childContext0);
      assertEquals(807, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("count");
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2950);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-1477), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1477));
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(1287, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1530));
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-686), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      int int0 = (-1819);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1819), expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-205), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("No value for xpath: ");
      QName qName0 = new QName("No value for xpath: ");
      Locale locale0 = Locale.UK;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "No value for xpath: ", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, processingInstructionTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, processingInstructionTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction807()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2499));
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeTypeTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(226, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("count");
      Step step0 = new Step((-2521), processingInstructionTest0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, ":\"s");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      expressionPath0.isSimplePath();
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction226()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "#cH}y}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1838));
      Step step0 = new Step(3535, nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Step step1 = new Step((-1838), nodeTypeTest0, expressionArray1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[1], expressionArray1[1]);
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      Step step3 = new Step((-1298), nodeTypeTest0, expressionArray1);
      Step step4 = new Step(1425, nodeTypeTest0, expressionArray1);
      Step step5 = new Step(1425, nodeTypeTest0, expressionArray1);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray1);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreFunction0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionArray1[0]);
      QName qName0 = new QName("ceiling");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, variablePointer0, (Pointer) null);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext1.getRootContext();
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreFunction0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("3fAFEx!EJ#h\"J@tg2#");
      Step step0 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-2149), processingInstructionTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(231);
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step1;
      stepArray0[3] = step0;
      stepArray0[4] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2149), (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1165, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.JXPathInvalidSyntaxException");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceContext0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      SelfContext selfContext0 = new SelfContext(ancestorContext0, processingInstructionTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, selfContext0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = (-686);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-686), expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-686()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "string");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      expressionPath0.isSimplePath();
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      coreFunction0.toString();
      coreFunction0.functionNumber(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("", "format-number");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("format-number");
      Step step0 = new Step((-1838), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2149), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1816, expressionArray1);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1816()(null, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 < org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("", "format-number");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("format-number");
      Step step0 = new Step((-1838), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2149), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1838), expressionArray1);
      Expression expression0 = coreFunction0.getArg3();
      assertNull(expression0);
      
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-1090), expressionArray1);
      assertEquals((-1090), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("", "format-number");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("format-number");
      Step step0 = new Step((-1838), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2149), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step2 = new Step((-1838), nodeTypeTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1816, expressionArray1);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(rootContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      jXPathContext0.getFactory();
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionCode();
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction807()()", string0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(807, int0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(218, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(218, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      step1.isContextDependent();
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest((-60));
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-1899), nodeTypeTest0);
      coreFunction0.functionNull((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(2408, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2531, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3570));
      expressionPath0.createContextForStep((EvalContext) null, (-3570), nodeTypeTest0);
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(1655, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1655()($null, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2421), expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("G2rxX");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "G2rxX");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      descendantContext0.reset();
      coreFunction0.functionTrue(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2421()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(807, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("id", "5QSO!*jB$wl");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      jXPathContext0.getFactory();
      jXPathContextReferenceImpl0.setFactory((AbstractFactory) null);
      InitialContext initialContext0 = new InitialContext(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction807()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1642, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-686), expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-686()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(218, expressionArray0);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(218, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(14, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(14, nodeTypeTest0, (Expression[]) null);
      step0.isContextDependent();
      stepArray0[3] = step3;
      Step step4 = new Step(14, nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction218()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("string");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, (Expression[]) null, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "#cH}y}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      int int0 = 27;
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "dG";
      QName qName0 = new QName("dG", "dG");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("", "org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ':org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1287, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1287()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("ef]wf)'&[H");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) variableReference0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) variableReference0;
      Constant constant0 = new Constant("W+v?B[cVoT=h<-tQ");
      expressionArray1[4] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      expressionArray1[7] = (Expression) variableReference0;
      expressionArray1[8] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "sum");
      Step step1 = new Step(5203, nodeNameTest1, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-367), nodeNameTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(5203, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[3], variableReference0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(5203, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(5203, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-723), (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("P,Zt5'bL");
      Step step0 = new Step((-723), processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, processingInstructionTest0);
      expressionPath0.evalSteps(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-723()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
