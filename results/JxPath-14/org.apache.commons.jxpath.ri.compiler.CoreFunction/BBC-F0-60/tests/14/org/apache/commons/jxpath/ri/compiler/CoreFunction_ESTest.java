/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:32:36 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Constant constant0 = new Constant("Ba:rWbob9Ba:r3o");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(97, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) ancestorContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, nodeTypeTest0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, precedingOrFollowingContext0, nodePointer1);
      nodePointer0.getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer1);
      coreFunction0.functionName(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("u?~%t9jgMKgnmdc.2");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) namespaceContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray0[0], (Pointer) null);
      QName qName0 = new QName("~u", "~u");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, constant0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("Ba:rWbob9Ba:r3o");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(61, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Long long0 = new Long(2681L);
      Long long1 = Long.getLong("Dkf52qLLv,,?SWDkf52qLLv,,?SW", long0);
      Constant constant0 = new Constant(long1);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, coreOperationGreaterThan0);
      coreOperationLessThanOrEqual0.toString();
      CoreFunction coreFunction0 = new CoreFunction((-2027), expressionArray0);
      QName qName0 = new QName("]S|,TrK.lO", "{<j[@&%~d=nWQ =s");
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction2 = new CoreFunction(951, expressionArray1);
      coreFunction2.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Constant constant0 = new Constant("B");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThan0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationLessThan0);
      coreOperationLessThanOrEqual0.toString();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-392), expressionArray0);
      QName qName0 = new QName("WW", "WW");
      CoreFunction coreFunction1 = new CoreFunction((-841), expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant("9Ba:rW3ob9Ba:rW3ob");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction46()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '9Ba:rW3ob9Ba:rW3ob')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("9Ba:rW3ob9Ba:rW3ob");
      constant0.toString();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 590;
      CoreFunction coreFunction0 = new CoreFunction(590, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationLessThanOrEqual0);
      coreOperationLessThanOrEqual0.toString();
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("translate", "org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(4194304, expressionArray1);
      EvalContext evalContext0 = null;
      QName qName1 = new QName("WW", "WW");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "qq");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationGreaterThan0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate(parentContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationEqual0);
      coreOperationLessThanOrEqual0.toString();
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      QName qName0 = new QName("WW", "WW");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "WW");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreOperationEqual0);
      coreFunction0.functionTranslate(predicateContext0);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name((org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002) * (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002) > (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(111, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("()");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ()
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-104), expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      ChildContext childContext0 = new ChildContext(ancestorContext0, (NodeTest) null, true, true);
      childContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(259);
      Step step0 = new Step(215, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1230, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(259, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(4670);
      Expression[] expressionArray1 = new Expression[0];
      Step step3 = new Step(1230, nodeTypeTest1, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(16, nodeTypeTest1, expressionArray1);
      stepArray0[4] = step4;
      QName qName0 = new QName("Invalid XPath: '", "Invalid XPath: '");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step5 = new Step((-2598), nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-1015), nodeTypeTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(2077, nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(1230, nodeTypeTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(215, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationOr0;
      expressionArray1[8] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("Root is ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Nen!'|YTEsWEqw");
      Step step0 = new Step((-2386), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2386), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2386), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-2386), nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2386), nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-2386), nodeNameTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step((-2386), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-163), nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("count");
      Step step8 = new Step((-2386), processingInstructionTest0, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], expressionArray1[7]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-2386), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-998), expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("U`/LnJkUrj^");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("6");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-173), expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-173()('6', '6')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "2";
      QName qName0 = new QName("2");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2660), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName((String) null, "YB3rw#bE$IB`Zw");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$YH*@JFV=");
      Step step0 = new Step(4096, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("$YH*@JFV=");
      Step step2 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(12, processingInstructionTest0, expressionArray0);
      Step step4 = new Step((-2449), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(37, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16000, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<<unknown namespace>>");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, processingInstructionTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      RootContext rootContext2 = rootContext1.getRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext1;
      evalContextArray0[3] = (EvalContext) rootContext1;
      evalContextArray0[4] = (EvalContext) rootContext2;
      evalContextArray0[5] = (EvalContext) rootContext2;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext1;
      UnionContext unionContext0 = new UnionContext(rootContext1, evalContextArray0);
      InitialContext initialContext0 = (InitialContext)rootContext2.getConstantContext(unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("=Zm0C}8ow)65W-]0");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(669);
      Step step0 = new Step(669, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(669, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, expressionPath0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationOr0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[6], coreOperationOr0);
      expressionArray0[7] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) coreOperationLessThan0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[8] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant constant0 = new Constant("9Ba:rW3ob9Ba:rW3ob");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-712), expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(49, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(49, expressionArray0);
      QName qName0 = new QName(".");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      QName qName0 = new QName(">WlAA");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "pYV_c^8&");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[6];
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "}VE1^G]xfwm++&");
      Step step0 = new Step((-2050), nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step((-1), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1737, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-4287), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-4287), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(18, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(4418, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, coreOperationUnion0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, locationPath0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray1, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationUnion1;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray1[3] = (Expression) locationPath1;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(expressionArray1[1], expressionArray1[1]);
      expressionArray1[4] = (Expression) coreOperationGreaterThan1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(4192, expressionArray1);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1579), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1579), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationDivide0;
      Step step2 = new Step((-1579), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1579), nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1579), expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(attributeContext0, coreOperationGreaterThanOrEqual0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-232));
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(133, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(133, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      QName qName0 = new QName("{VTB@3^?$sE,)VW50?");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: {VTB@3^?$sE,)VW50?
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long(1364L);
      Constant constant0 = new Constant(long0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("WW");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreOperationEqual0);
      coreFunction0.functionTranslate(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-29), expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreFunction0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, expressionArray1[1]);
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) coreOperationMod0;
      expressionArray1[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(256, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Constant constant0 = new Constant("6D");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(67, expressionArray0);
      QName qName0 = new QName("6D", "6D");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<\"@f");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContext0, processingInstructionTest0, false);
      precedingOrFollowingContext0.getContextNodePointer();
      Double double0 = Expression.NOT_A_NUMBER;
      coreFunction0.functionLang(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction67()('6D')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getAbsoluteRootContext();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/BA5Etln");
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, false, processingInstructionTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeTypeTest0, true);
      PrecedingOrFollowingContext precedingOrFollowingContext1 = new PrecedingOrFollowingContext(precedingOrFollowingContext0, processingInstructionTest0, true);
      precedingOrFollowingContext1.getContextNodePointer();
      Double double0 = Expression.NOT_A_NUMBER;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(descendantContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = evalContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("<\"@f");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContextArray0[3], processingInstructionTest0, false);
      evalContextArray0[5] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      precedingOrFollowingContext0.getContextNodePointer();
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      Double double0 = Expression.NOT_A_NUMBER;
      coreFunction0.functionLang(evalContextArray0[2]);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction74()('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("V7z0BDtwum&%U", "V7z0BDtwum&%U");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4570, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      AttributeContext attributeContext0 = new AttributeContext(evalContextArray0[1], (NodeTest) null);
      evalContextArray0[3] = (EvalContext) attributeContext0;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1091, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("9Ba:rW3ob9Ba:rW3ob");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(descendantContext0, basicNodeSet0);
      nodeSetContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, descendantContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant1 = new Constant("==");
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      CoreFunction coreFunction1 = new CoreFunction(1668, expressionArray0);
      coreFunction0.functionSubstringBefore(evalContextArray0[5]);
      CoreFunction coreFunction2 = new CoreFunction(87, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLang(evalContextArray0[7]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction87()('==', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("9Ba:rW3ob9Ba:rW3ob");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-202), expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      QName qName0 = new QName("L,cGxw_", "9Ba:rW3ob9Ba:rW3ob");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "j$8!-T[");
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(parentContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      QName qName0 = new QName("ao+*C?KW]e");
      Locale locale0 = Locale.forLanguageTag("ao+*C?KW]e");
      QName qName1 = new QName("ao+*C?KW]e");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName1, qName0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      nodePointer0.attributeIterator(qName1);
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: ao+*C?KW]e
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, coreOperationOr0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationSubtract1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationSubtract1);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[3], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("t:I(rD!hwIYK<XKm7v");
      Step step0 = new Step(86, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(26, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1124), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1776), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3286, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion1;
      CoreFunction coreFunction0 = new CoreFunction(86, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, true, (NodeTest) null);
      AttributeContext attributeContext0 = new AttributeContext(descendantContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionPosition(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(extensionFunction1, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationGreaterThanOrEqual1);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(573, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1841), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.functionNumber(unionContext0);
      coreFunction0.functionLang(unionContext0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("=/|;)JAbn{2A1{O@", "=/|;)JAbn{2A1{O@");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-279), expressionArray0);
      expressionArray0[4] = (Expression) coreFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-279), expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.getArg3();
      coreOperationMod0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(500, expressionArray0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[5], coreFunction1);
      CoreFunction coreFunction3 = new CoreFunction((-279), expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      coreFunction3.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      constant0.iterate((EvalContext) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd1);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(988);
      Step step0 = new Step(2799, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(116, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-3017), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2799, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("position");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(108, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      initialContext0.setPosition((-921));
      coreFunction0.functionLast(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction108()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 30;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("substring-before", "substring-before");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2000, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(2000, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationUnion0);
      // Undeclared exception!
      coreFunction0.functionKey(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("AA");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], variableReference0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Constant constant0 = new Constant(")5PuQ?");
      expressionArray0[4] = (Expression) constant0;
      Constant constant1 = new Constant("AA");
      expressionArray0[5] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationMultiply0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("E~n[TfQjX)^d7x_");
      Step step0 = new Step((-2143), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2143), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-2143), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(24, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) nameAttributeTest0;
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationMultiply0;
      Step step4 = new Step(24, (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(2201, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(24, processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step(3022, (NodeTest) null, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step(3022, processingInstructionTest0, expressionArray1);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[6] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, expressionArray1[6]);
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      Constant constant1 = new Constant("rvB#D9!f os'T{ Q`");
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1875, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("floor");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      EvalContext evalContext0 = rootContext0.getConstantContext(variablePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'floor'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      coreOperationLessThanOrEqual0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-963), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.functionNumber((EvalContext) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("2L6 7]P", "2L6 7]P");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Double double0 = new Double((-997.99375574068));
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1371), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationMod0);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[4], coreOperationUnion0);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[6], coreOperationMod0);
      expressionArray0[7] = (Expression) coreOperationMod1;
      Constant constant1 = new Constant((String) null);
      expressionArray0[8] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-48), expressionArray0);
      DecimalFormat decimalFormat0 = new DecimalFormat();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, decimalFormat0, (Locale) null);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, qName0, coreOperationUnion0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, decimalFormat0, nodePointer1);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(parentContext0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("Dkf52qLLv,,?SWDkf52qLLv,,?SW");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Dkf52qLLv,,?SWDkf52qLLv,,?SW");
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("()");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(325, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      coreFunction2.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(84, expressionArray0);
      QName qName0 = new QName("4");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-381), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      Consumer<NodePointer> consumer0 = (Consumer<NodePointer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      evalContext0.forEachRemaining(consumer0);
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(121, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      coreFunction0.functionLast(evalContext0);
      coreFunction0.functionLast(evalContext0);
      coreFunction0.compute(rootContext0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("[ProcessingInstruction: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("j-+");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1300, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.parser.Token");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.parser.Token");
      Step step0 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1557), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(51, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-2653), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], expressionArray0[2]);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-555), nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(105, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getConstantContext((Object) null);
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      coreFunction0.functionLast(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("t{[ueW~H", "last");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "ceiling", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.compute(rootContext0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeValue(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(105, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[0] = null;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, constant0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionPath0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(316, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1199, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[4]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expression0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getConstantContext(coreOperationUnion0);
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(75, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      EvalContext evalContext0 = rootContext0.getConstantContext(jXPathContext0);
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      coreFunction0.functionLast(selfContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(61, expressionArray0);
      coreFunction1.functionName((EvalContext) null);
      coreFunction1.functionNormalizeSpace((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(952, expressionArray0);
      coreFunction2.computeValue((EvalContext) null);
      coreFunction2.functionStringLength((EvalContext) null);
      coreFunction2.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "ceiling");
      QName qName0 = new QName("t{[ueW~H", "last");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "ceiling", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.compute(rootContext0);
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreFunction0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((-179), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-179), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant constant0 = new Constant("=");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction1.functionName((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
      coreFunction1.functionStringLength((EvalContext) null);
      coreFunction1.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("rav=c_^b##\"f2C5v");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(evalContext0, basicNodeSet0);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      JXPathContextReferenceImpl.addNodePointerFactory(variablePointerFactory0);
      nodeSetContext0.nextNode();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      coreFunction0.isContextDependent();
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Constant constant0 = new Constant("mm");
      Expression[] expressionArray0 = new Expression[1];
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1252, expressionArray0);
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" No DOCTYPE declaration, ");
      Step step0 = new Step(2147483645, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2147483645, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2080, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2147483645, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(65, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, locationPath0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, expressionArray0[2]);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(2147483645, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(65, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.args = expressionArray0;
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      coreFunction0.functionCount((EvalContext) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      QName qName0 = new QName("");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Constant constant0 = new Constant("zryI4(5r");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.getArg1();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Short short0 = new Short((short)0);
      Constant constant0 = new Constant(short0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("translate");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) constant0;
      Step step0 = new Step(1381, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step(65536, nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(65536, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((short)0, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      Constant constant1 = new Constant(short0);
      nameAttributeTest0.isContextDependent();
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(65536, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionNumber(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(388, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      Double double1 = Expression.ONE;
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1252, expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("mm");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = NodePointer.newChildNodePointer(variablePointer0, qName0, jXPathContext0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(724, expressionArray0);
      EvalContext evalContext0 = null;
      NodeSet nodeSet0 = null;
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1252, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1252, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("Exception trying to create xpath ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_: @g'Uav&1%YH");
      Step step0 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-2417), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionPath0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThan0, coreFunction0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction((-2417), expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      QName qName1 = new QName("_: @g'Uav&1%YH");
      // Undeclared exception!
      coreFunction1.functionStartsWith(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2080, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("\"");
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("XO\"Co0.n");
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, processingInstructionTest0);
      EvalContext evalContext0 = rootContext0.getConstantContext(ancestorContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1252, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AGSqg[Ikcm");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("Dkf52qLLv,,?SWDkf52qLLv,,?SW", "Dkf52qLLv,,?SWDkf52qLLv,,?SW");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[9];
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) coreOperationMod0;
      Step step0 = new Step(565, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(565, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[5], coreOperationMod0);
      expressionArray2[1] = (Expression) coreOperationDivide0;
      expressionArray2[2] = (Expression) coreOperationMod0;
      Step step2 = new Step((-2764), (NodeTest) null, expressionArray2);
      stepArray0[2] = step2;
      Step step3 = new Step(565, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(1206, (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(2223, (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2764));
      Step step6 = new Step(565, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-2764), (NodeTest) null, expressionArray2);
      stepArray0[7] = step7;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "mm");
      Step step8 = new Step((-5029), nodeNameTest0, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1531), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("+^_B]e^|BQ");
      processingInstructionTest0.toString();
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.iterate(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AGSqg[Ikcm");
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      coreFunction1.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(55, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[6];
      QName qName0 = new QName("descendant-or-self", "descendant-or-self");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[2] = (Expression) variableReference0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2261), expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";s6n3y");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.getArg1();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.getArg1();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray1[0] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreOperationMultiply0);
      expressionArray1[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName((String) null, "..");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2147483645, expressionArray1);
      expressionArray1[4] = (Expression) coreFunction1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[5] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationUnion0);
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray1[0]);
      expressionArray1[7] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray1);
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mm");
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-166), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("");
      coreFunction0.functionConcat(predicateContext0);
      coreFunction0.functionStartsWith(predicateContext0);
      coreFunction0.functionSubstringBefore(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.getArgumentCount();
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(152, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction1.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      coreFunction1.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, true);
      coreFunction0.functionStringLength(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray1);
      coreFunction1.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction1.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Float float0 = new Float((float) 890);
      Constant constant0 = new Constant(float0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Float float0 = new Float((double) 138);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(138);
      Step step0 = new Step(138, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1905, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1905, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1905, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2709), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationMod0;
      expressionArray1[6] = (Expression) coreOperationMod0;
      Step step5 = new Step(1905, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(1905);
      Step step6 = new Step((-1768), nodeTypeTest1, expressionArray1);
      stepArray0[6] = step6;
      Step step7 = new Step((-684), nodeTypeTest0, expressionArray1);
      stepArray0[7] = step7;
      Step step8 = new Step((-334), nodeTypeTest1, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray1[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(138, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest1);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, true);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionLang(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 3, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ParentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("child");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-150), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-52));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeTypeTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("}");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, processingInstructionTest0, false);
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction1.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointerFactory0.createNodePointer((NodePointer) variablePointer0, qName0, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionName(evalContext0);
      coreFunction0.functionLocalName(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3620), expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray1);
      coreFunction1.functionConcat((EvalContext) null);
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float((double) (-3491));
      Constant constant0 = new Constant(float0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThan0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "");
      Step step0 = new Step((-3491), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray1[5] = (Expression) variableReference0;
      Step step1 = new Step(1520, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray1[2], expressionArray1[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationLessThan1);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(expressionArray0[2], coreOperationLessThan1);
      expressionArray0[5] = (Expression) coreOperationLessThan2;
      CoreOperationLessThan coreOperationLessThan3 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationLessThan3;
      CoreFunction coreFunction0 = new CoreFunction((-3491), expressionArray0);
      Locale locale0 = Locale.ITALY;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, variableReference0, locale0);
      NodePointer nodePointer1 = NodePointer.newChildNodePointer(nodePointer0, (QName) null, coreOperationLessThanOrEqual0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationAdd0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore(rootContext0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Constant constant0 = new Constant("C?ib");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("C?ib");
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-179()('C?ib', 'C?ib')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(20, (Expression[]) null);
      coreFunction2.getFunctionName();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("m\">Xx;fLQo~>D SY>");
      Step step0 = new Step(17, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1517, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1091, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1091, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1268, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1268, expressionArray0);
      QName qName0 = new QName("m\">Xx;fLQo~>D SY>", "m\">Xx;fLQo~>D SY>");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1517, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(109, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("mm");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, constant0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      expressionArray1[5] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("mm");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2013265920, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationAdd1);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd2 = new CoreOperationAdd(expressionArray1);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationAdd2);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1580), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("");
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-179()('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(6055, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6055()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      coreFunction1.getArg2();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, false);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(628);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, nodeTypeTest0, true);
      coreFunction0.functionNumber(precedingOrFollowingContext0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.computeValue(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction(152, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction((-371), expressionArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      Float float0 = new Float(Double.NaN);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2810), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(1380, expressionArray0);
      // Undeclared exception!
      coreFunction1.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-3601), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-3601), expressionArray0);
      coreFunction2.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(11, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(37, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      Step step3 = new Step((-2910), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(11, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-2514), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext(attributeContext0, evalContextArray0);
      expressionPath0.createContextForStep(unionContext0, 1599, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction0.iterate(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName("7");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[2];
      Step[] stepArray0 = new Step[7];
      Step step0 = new Step(6144, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(6144, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1550), (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-1550), (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-1550), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(129, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(129, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      expressionArray1[0] = (Expression) expressionPath0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate((Expression) null);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(6144, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("Invalid argument type for 'sum': ", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "nd({LWI4W");
      Step step0 = new Step(1448, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1448, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-744), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1448, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray1, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, expressionPath0);
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(1448, expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 26;
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 15;
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("[Comment: ");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationMod1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(50, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(50, expressionArray0);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "an4viqTGlTr");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName("an4viqTGlTr", "mm");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) extensionFunction0;
      extensionFunction0.isContextDependent();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2253), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreOperationOr0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionID(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant("mm");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round('', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-179), expressionArray0);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      String string0 = "<GA";
      QName qName0 = new QName("MGd1U\"dzhl", "<GA");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.compute(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Constant constant0 = new Constant("m");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      coreFunction1.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with('m', 'm')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Float float0 = new Float((double) (-3620));
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(428, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      QName qName0 = new QName((String) null, "S$,");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[4] = expression0;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) variableReference0;
      expressionArray1[6] = expression0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[5], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, extensionFunction0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(428, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(92, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(92, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) nodeSetContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      AncestorContext ancestorContext0 = new AncestorContext(evalContextArray0[0], true, (NodeTest) null);
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      evalContextArray0[4] = (EvalContext) nodeSetContext0;
      evalContextArray0[5] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps(unionContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContext0, (NodeTest) null);
      coreFunction0.functionConcat(namespaceContext0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2112), (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionPosition(predicateContext0);
      CoreFunction coreFunction1 = new CoreFunction((-2112), (Expression[]) null);
      coreFunction1.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2112()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant((String) null);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationSubtract0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(2347, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3620), expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-3620), expressionArray1);
      coreFunction2.getArg3();
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EvalContext evalContext0 = null;
      int int0 = 19;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      coreFunction1.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with('', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(55, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAdd0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], coreOperationAdd0);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction(106, expressionArray0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvalContext evalContext0 = null;
      int int0 = (-1971);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("Incorrectnumber of arguments: ");
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      String string0 = "Unknown namespace prefix: ";
      QName qName0 = new QName("Unknown namespace prefix: ");
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 24;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2080, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EvalContext evalContext0 = null;
      int int0 = 11;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3620), expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], (Expression) null);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1092), expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      int int0 = 21;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Byte byte0 = new Byte((byte)25);
      Constant constant0 = new Constant(byte0);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(467, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      Constant constant1 = new Constant("1A");
      expressionArray0[2] = (Expression) constant1;
      Constant constant2 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant2;
      QName qName0 = new QName("1A", "1A");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      QName qName1 = new QName("1A", (String) null);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant2;
      expressionArray1[3] = (Expression) constant1;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = null;
      expressionArray1[7] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName1, expressionArray1);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreFunction coreFunction1 = new CoreFunction((-3620), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot allocate dynamic property handler of class ");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.computeValue(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("h{$Gl}xqO2IM'VE%sE");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction32()()");
      Step step0 = new Step(32, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[1] = step0;
      stepArray0[3] = step0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      stepArray0[7] = step0;
      stepArray0[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, coreFunction0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, coreOperationEqual0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual0, (Expression[]) null, stepArray0);
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract(coreOperationSubtract0, expressionPath0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationAdd0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-357), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd1;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-72), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, (Step[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(parentContext0, processingInstructionTest0, false);
      expressionPath0.createContextForStep(precedingOrFollowingContext0, (-72), processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D@^m1~92.A");
      Constant constant0 = new Constant("Incorrect number of arguments: ");
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2740), expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      int int0 = 17;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant constant0 = new Constant("oKzR}<|-p");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[3]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(1865, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, expressionArray0[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("}");
      coreOperationGreaterThan0.args = expressionArray0;
      constant0.toString();
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(57, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("\"{TO4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(96, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray1, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-791), (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      QName qName0 = new QName("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.lookupTag(linkedList0, linkedList1);
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      int int0 = 8;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("=");
      Locale.lookupTag(linkedList0, linkedList1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      int int0 = 7;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction1.functionNull(rootContext1);
      QName qName0 = new QName("()", "))cL");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-791), (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-791()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      QName qName0 = new QName("tKnXG5^");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Incorrect number of arguments: ", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3620), expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3620()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction(4204, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(110, expressionArray0);
      coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4204()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      int int0 = 12;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3620), expressionArray0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray1);
      coreFunction0.computeContextDependent();
      coreFunction1.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3620()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray1 = new Expression[5];
      Integer integer0 = Integer.getInteger("", (-2139));
      Constant constant0 = new Constant(integer0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, constant0);
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      Constant constant1 = new Constant("");
      expressionArray1[3] = (Expression) constant1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-538), expressionArray0);
      coreFunction0.iteratePointers((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-1366), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      QName qName0 = new QName("count");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      String string0 = "`M3";
      Constant constant0 = new Constant("`M3");
      int int0 = 29;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) extensionFunction0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.lookupTag(linkedList0, set0);
      EvalContext evalContext1 = null;
      int int0 = 14;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      QName qName0 = new QName("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-3601), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Double double0 = Expression.ONE;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("h{$Gl}xqO2IM'VE%sE");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction32()");
      Step step0 = new Step(32, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[9];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[1] = step0;
      stepArray0[3] = step0;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      stepArray0[7] = step0;
      stepArray0[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, coreFunction0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, coreOperationEqual0);
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual0, (Expression[]) null, stepArray0);
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract(coreOperationSubtract0, expressionPath0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      CoreFunction coreFunction1 = new CoreFunction(32, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2461), expressionArray0);
      JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("!GA lEDi:p,r", "5tLl+2$|g)f@<q");
      Locale locale0 = Locale.GERMAN;
      QName qName1 = new QName("");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      locale0.getDisplayLanguage();
      variablePointerFactory0.createNodePointer(qName0, (Object) rootContext0, locale0);
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-6800));
      AttributeContext attributeContext0 = new AttributeContext(rootContext1, nodeTypeTest0);
      attributeContext0.getCurrentNodePointer();
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(rootContext2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = (-6800);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-434));
      Step step0 = new Step((-6800), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-6800), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(11, nodeTypeTest0, expressionArray0);
      Step step3 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, locationPath0);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) != (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      EvalContext evalContext0 = null;
      QName qName1 = new QName(" D<L4K?A9r[)");
      QName qName2 = new QName("NJkW&", "))cL");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      int int0 = 28;
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant((String) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 * org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 = org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3394, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("", "!GA lEDi:p,r");
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "!GA lEDi:p,r");
      ParentContext parentContext0 = new ParentContext(nodeSetContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(2937, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("", "following-sibling::");
      Locale locale0 = Locale.GERMAN;
      QName qName1 = new QName("!GA lEDi:p,r");
      variablePointerFactory0.createNodePointer(qName1, (Object) jXPathContextReferenceImpl0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3394);
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeTypeTest0);
      attributeContext0.getCurrentNodePointer();
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2937()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction32()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("!IZfq", "!IZfq");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(15, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1339, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step2 = new Step(15, nodeNameTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-96), nodeNameTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(41, nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(41, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-1489), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest2 = new NodeNameTest(qName0, "`K3_PPj:BuT");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[7] = (Expression) coreOperationAnd0;
      expressionArray1[8] = (Expression) coreOperationAnd0;
      Step step7 = new Step(831, nodeNameTest2, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[8], coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, coreOperationEqual0);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[5] = (Expression) expressionPath1;
      CoreOperationSubtract coreOperationSubtract2 = new CoreOperationSubtract(expressionArray0[3], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationSubtract2;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[7]);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1339, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.lookupTag(linkedList0, linkedList1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1555, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1555, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.getArg1();
      CoreFunction coreFunction1 = new CoreFunction((-183), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-183), expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true('' for path: ', null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "number");
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, (Step[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F41wwap+P$");
      expressionPath0.createContextForStep((EvalContext) null, 41, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-3223), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      Constant constant1 = new Constant("' for path: ");
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring('' for path: ', '' for path: ', null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg3();
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("' for path: ");
      processingInstructionTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()('' for path: ', '' for path: ', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest((QName) null, "~:H2M;*x,1e~P;C");
      Step step1 = new Step((-776), nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(27, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-776), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-776), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(27, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-776), nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionPath0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(extensionFunction0, variableReference0);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest1);
      ParentContext parentContext0 = new ParentContext(ancestorContext0, nodeNameTest1);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(-org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, $null, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 - org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000016), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000017) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000018 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000020) + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000021), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000019), org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 < org.apache.commons.jxpath.ri.compiler.VariableReference@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3394, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName("", "!GA lEDi:p,r");
      Locale locale0 = Locale.GERMAN;
      variablePointerFactory0.createNodePointer(qName0, (Object) "", locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      coreFunction0.functionString(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Double double0 = Expression.ONE;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction32()", "8a<;");
      QName qName1 = new QName("r(XmV1DP9HP~", "))cL");
      int int0 = (-3923);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(57, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(800);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      int int0 = 15;
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Constant constant1 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant1);
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      coreFunction1.getArg3();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(110, expressionArray0);
      coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = 1170;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1170, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1170, expressionArray0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("6+{%s1|xIZO");
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1024);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.computeValue(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1170()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      QName qName0 = new QName("", "Nv,&aE[:j{4TZ%VDp{");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "An EntityRef is not allowed at the document root");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3411, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("8a<;", "8a<;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(39);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, (Expression) null);
      QName qName0 = new QName("\"y=", "\"y=");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-4191), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-4191));
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      int int0 = 26;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.TAIWAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.lookupTag(linkedList0, linkedList1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      String string0 = "'L";
      QName qName0 = new QName("'L", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[0]);
      QName qName0 = new QName("l", "l");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction((-1318), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1517);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1318()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) != (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction((-2704), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(200, expressionArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.lookupTag(linkedList2, linkedList1);
      NodePointer.newNodePointer(qName0, qName0, locale0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction200()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction(32, (Expression[]) null);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("unknownFunction32()", "- ZDs~0\"");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1050), (Expression[]) null);
      coreFunction0.getFunctionCode();
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      Step step0 = new Step((-1050), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreFunction0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(predicateContext0, nodeTypeTest0, true);
      SelfContext selfContext0 = new SelfContext(precedingOrFollowingContext0, nodeTypeTest0);
      expressionPath0.createContextForStep(selfContext0, (-1050), nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1050()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("\"y=", "\"y=");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-4191), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-4191));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.lookupTag(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      RootContext rootContext2 = rootContext1.getRootContext();
      rootContext2.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1170, expressionArray0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("6+{%s1|xIZO");
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", " D<L4K?A9r[)");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" D<L4K?A9r[)");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1532);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, true);
      coreFunction0.iterate(childContext0);
      int int0 = 2;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      processingInstructionTest0.toString();
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("n");
      ParentContext parentContext0 = new ParentContext(attributeContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1189, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("6+{%s1|xIZO");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction1189()(null)");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      extensionFunction0.isContextDependent();
      Constant constant0 = new Constant("' for path: ");
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-1036), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[0]);
      coreFunction0.getArg3();
      CoreFunction coreFunction1 = new CoreFunction(4942, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3639), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-3639), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(578);
      CoreFunction coreFunction2 = new CoreFunction((-3639), expressionArray0);
      coreFunction2.functionFalse((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-17), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-17));
      nodeTypeTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("Cannot allocate dynamic property handler of class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant("Cannot allocate dynamic property handler of class ");
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("", " D<L4K?A9r[)");
      VariableReference variableReference0 = new VariableReference(qName0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" D<L4K?A9r[)");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1532);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(attributeContext0, nodeNameTest0, false, true);
      coreFunction0.iterate(childContext0);
      int int0 = 2;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("n");
      ParentContext parentContext0 = new ParentContext(attributeContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Long long0 = new Long((-1002));
      Constant constant0 = new Constant(long0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      int int0 = 30;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Step[] stepArray0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-17), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-17));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-17()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Long long0 = new Long((-1002));
      Constant constant0 = new Constant(long0);
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant(long0);
      expressionArray1[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001 = org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000001, -1002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      Constant constant1 = new Constant("' for path: ");
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(14, expressionArray0);
      coreFunction2.getArg2();
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true('' for path: ', '' for path: ', null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      int int0 = 1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      QName qName0 = new QName("'L", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Double double0 = Expression.NOT_A_NUMBER;
      Locale locale0 = Locale.ITALIAN;
      NodePointer.newNodePointer(qName0, coreOperationNotEqual0, locale0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-6800));
      CoreFunction coreFunction1 = new CoreFunction((-2754), expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, (Step[]) null);
      expressionPath0.createContextForStep((EvalContext) null, (-347), nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant("");
      expressionArray0[4] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      constant1.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[5], constant1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionConcat(unionContext0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2602));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, coreOperationUnion0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationMod1);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Constant constant0 = new Constant("");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationMod0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationMod1);
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(constant0, coreOperationLessThan0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationMod1;
      expressionArray1[1] = (Expression) coreOperationDivide0;
      expressionArray1[2] = (Expression) coreOperationMod0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationMod1;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      expressionArray1[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray1);
      QName qName0 = new QName("name");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      expressionArray0[3] = (Expression) coreFunction0;
      QName qName0 = new QName("'L", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[5] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[5], coreOperationAnd1);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationAnd1, expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationNotEqual1;
      QName qName1 = new QName("$.y(tqrf'V'Qu}_w");
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray0[8] = (Expression) variableReference1;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray0);
      coreFunction1.getArg1();
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.iterate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg1();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      int int0 = (-6800);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      EvalContext evalContext0 = null;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-434));
      Step step0 = new Step((-6800), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-6800), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      int int1 = 5;
      Step step2 = new Step(5, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, locationPath0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationAnd0);
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, constant0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.lookupTag(linkedList2, linkedList1);
      NodePointer.newNodePointer(qName0, "", locale0);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003) * org.apache.commons.jxpath.ri.compiler.Constant@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1974, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1974, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext1 = null;
      CoreFunction coreFunction3 = new CoreFunction((-434), expressionArray0);
      coreFunction3.iterate((EvalContext) null);
      CoreFunction coreFunction4 = new CoreFunction(2239, expressionArray0);
      coreFunction0.getArg2();
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1974()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant constant0 = new Constant("");
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[3]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      processingInstructionTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Long long0 = new Long((-1002));
      Constant constant0 = new Constant(long0);
      expressionArray0[1] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[3];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant(long0);
      expressionArray1[1] = (Expression) constant1;
      Step step0 = new Step(17, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-307), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], constant1);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[6]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationDivide0);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionArray0[7]);
      expressionArray0[8] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1002), expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, (NodeSet) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, expressionArray1[1]);
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-17), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-17));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.lookupTag(linkedList0, linkedList1);
      NodePointer.newNodePointer(qName0, (Object) null, locale0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationMultiply0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(unknownFunction-6800()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)), unknownFunction-6800()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)), +org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001), +org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002, +org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[1] = (Expression) null;
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction1.getArg3();
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 * org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 = org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAnd0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, (Step[]) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-900), expressionArray0);
      QName qName0 = new QName("ADO;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      CoreFunction coreFunction2 = new CoreFunction(946, expressionArray0);
      ChildContext childContext0 = new ChildContext(selfContext0, processingInstructionTest0, false, true);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant constant1 = new Constant("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1945));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, true);
      CoreFunction coreFunction0 = new CoreFunction(630, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], coreOperationNegate0);
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(locationPath0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[2]);
      int int0 = 2492;
      CoreFunction coreFunction0 = new CoreFunction(2492, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.computeValue(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
      QName qName0 = new QName("", "lv8zZ5\"fF{m");
      Expression[] expressionArray1 = new Expression[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      Constant constant0 = new Constant("TF??+*}v9(^z");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, (Expression) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, locationPath0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, extensionFunction0);
      CoreFunction coreFunction0 = new CoreFunction((-900), expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-900()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Constant constant1 = new Constant("");
      expressionArray0[4] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationLessThanOrEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[3]);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[1] = (Expression) null;
      coreFunction0.getArg3();
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant("");
      expressionArray0[4] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[5], constant1);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[5], expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(-1, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.Constant@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008, '', org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg3();
      coreFunction0.iterate((EvalContext) null);
      constant0.toString();
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("' for path: ");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      UnionContext unionContext0 = new UnionContext(parentContext0, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1170, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(" D<L4K?A9r[)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Constant constant0 = new Constant(" D<L4K?A9r[)");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreFunction0, nodePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ' D<L4K?A9r[)'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      nodeTypeTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1514));
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationMod1;
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(locationPath0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName1 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-875), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-875));
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-875()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      int int0 = 28;
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant((String) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[1]);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 * org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 = org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, expressionArray0[0]);
      String string0 = "PhD&D+>.9";
      QName qName0 = new QName("O 3Fg%e,~Y");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Constant constant0 = new Constant("AL4Gu");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, coreOperationMultiply0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, (Expression) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationEqual0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, expressionArray0[1]);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.isContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()('' for path: ', '' for path: ', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("' for path: ");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(890, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      coreFunction0.getArg3();
      coreFunction0.iterate((EvalContext) null);
      expressionArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(890, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("' for path: ");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction890()('' for path: ', '' for path: ', null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1170, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("6+{%s1|xIZO");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction1170()()");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3639), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      int int0 = 1026;
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1026, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-408), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-408()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      coreOperationLessThan0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-202), expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(40, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "|2/h9}9mpR";
      QName qName0 = new QName("|2/h9}9mpR");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      coreFunction0.compute(attributeContext0);
      // Undeclared exception!
      try { 
        attributeContext0.setPosition(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AttributeContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction((-6800), expressionArray0);
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale.lookupTag(linkedList0, linkedList1);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, coreOperationAdd0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-6800()((org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      Constant constant1 = new Constant("");
      expressionArray0[4] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[5], constant1);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[5], expressionArray0[5]);
      expressionArray0[7] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(-1, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004 and org.apache.commons.jxpath.ri.compiler.Constant@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008, '', org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArg2();
      assertEquals((-1), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, locationPath0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      QName qName0 = new QName((String) null, "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], locationPath0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], extensionFunction0);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[3], coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationMod1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, coreOperationMultiply0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      coreOperationNegate0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(-(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003), , (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000003) * org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004 and org.apache.commons.jxpath.ri.compiler.LocationPath@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000009 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000011, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004 mod org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000007) mod org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000010 = org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction32()()", string0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(32, int0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("number", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1269, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      NodePointer nodePointer0 = null;
      QName qName0 = new QName("", "");
      NodePointer nodePointer1 = NodePointer.newChildNodePointer((NodePointer) null, qName0, coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer1);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      String string0 = "starts-with";
      // Undeclared exception!
      try { 
        nodePointer1.createAttribute(jXPathContext0, qName0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an attribute for path //@:, operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = false;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      String string0 = "";
      Constant constant0 = new Constant("");
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2533, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
  }
}
