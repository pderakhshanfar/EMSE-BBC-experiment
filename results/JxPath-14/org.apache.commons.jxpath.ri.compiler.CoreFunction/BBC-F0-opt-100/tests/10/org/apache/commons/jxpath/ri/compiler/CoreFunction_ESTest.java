/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:03:45 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("substring-before");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-939), expressionArray0);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("1");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "1");
      Step step0 = new Step((-736), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-736), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-929), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-929), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-3984), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-929), nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("1");
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-736), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1575), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1575), expressionArray0);
      coreFunction1.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationGreaterThanOrEqual0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MAX_VALUE, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationOr0);
      expressionArray1[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(35, expressionArray1);
      coreFunction0.isContextDependent();
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(762, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(59, expressionArray0);
      coreFunction1.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationOr0);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(35, expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2422), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      initialContext0.setPosition((-2422));
      coreFunction0.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationGreaterThanOrEqual0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Constant constant0 = new Constant("\")\"");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(61, expressionArray0);
      QName qName0 = new QName("truefalse", "truefalse");
      Locale locale0 = Locale.UK;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("OX3!tm]`{d;.QN\"E~", "<NCName>");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-134217728), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(939, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(939, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-134217728), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-252), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(1325, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-96), nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath2 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[7] = (Expression) expressionPath2;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[7], expressionPath1);
      expressionArray0[8] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(545, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(545, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      RootContext rootContext1 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContext0, rootContext1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl2.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber(evalContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      Step step0 = new Step(14, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(1819, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, nodeTypeTest0, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, (NodeTest) null);
      EvalContext evalContext0 = expressionPath0.evalSteps(namespaceContext0);
      // Undeclared exception!
      coreFunction0.functionNull(evalContext0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant constant0 = new Constant("Cannot change locale using the 'lang' attribute");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(707, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationGreaterThanOrEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("7'=-e(");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationSubtract0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[7] = (Expression) coreOperationGreaterThanOrEqual0;
      Step step1 = new Step(2766, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2766);
      Step step2 = new Step(2766, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath1;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[1], expressionArray1[6]);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) constant0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) expressionArray1[2]);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, expressionArray1[2], nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = evalContext0;
      evalContextArray0[1] = evalContext0;
      evalContextArray0[2] = evalContext0;
      evalContextArray0[3] = evalContext0;
      evalContextArray0[4] = evalContext0;
      evalContextArray0[5] = evalContext0;
      UnionContext unionContext0 = new UnionContext(evalContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      coreOperationEqual0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName("truefalse", "");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(rootContext1, true, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext0, (Pointer) null);
      jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: truefalse:
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "B");
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2226);
      Step step0 = new Step(2226, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2226, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[0];
      Step step2 = new Step(2226, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(2226, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2226, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2226, nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      Step step6 = new Step(2226, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, locationPath0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMultiply0, locationPath0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2226, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) step0);
      QName qName0 = new QName("B");
      Locale locale0 = Locale.ENGLISH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, step6, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, step1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(rootContext1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("$zLqDH");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationNotEqual1;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("$zLqDH");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(descendantContext0, processingInstructionTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false('null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Float float0 = new Float((float) 30);
      Constant constant0 = new Constant(float0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.functionConcat((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, coreOperationAdd0);
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("~t1SEqT3]Pw:oVAoi}", "~t1SEqT3]Pw:oVAoi}");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-451), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1422, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationAdd0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[2], coreOperationDivide0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationDivide1);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd1;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[3], coreOperationLessThan0);
      expressionArray0[6] = (Expression) nameAttributeTest1;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationUnion1;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[7], coreOperationNotEqual0);
      expressionArray0[8] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction((-451), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.compiler.NodeNameTest");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-822), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant("\")\"");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, constant0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      expressionArray0[4] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray1);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '\")\"', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((-3247), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(876, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(25, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4020, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(876, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(25, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1495), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, (NodeTest) null);
      QName qName0 = new QName("t$*]aAj\"/Mqb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeNameTest0, true, false);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, (NodeTest) null, true);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationOr0);
      expressionArray1[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray1);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      CoreFunction coreFunction1 = new CoreFunction((-724), expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) <= (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray1);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(905, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction905()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("\"or\"", "\"or\"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(extensionFunction0, coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAnd0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[5]);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2393, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.model.beans.NullElementPointer");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, extensionFunction1);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-156), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("3");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      coreOperationLessThan0.computeValue((EvalContext) null);
      coreOperationLessThan0.args = expressionArray0;
      CoreFunction coreFunction0 = new CoreFunction(678, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-719), expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction((-719), expressionArray1);
      coreFunction1.functionSubstring((EvalContext) null);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-719()(unknownFunction-719()(), org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1470), expressionArray0);
      coreFunction0.functionNot((EvalContext) null);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionNormalizeSpace(selfContext0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X'-O7VtwH@Qs");
      Step step0 = new Step(678, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(678, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(678, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("X'-O7VtwH@Qs");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step(678, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(795, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(678, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step step8 = new Step(32, processingInstructionTest0, expressionArray1);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(678, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      EvalContext evalContext0 = expressionPath0.evalSteps(childContext0);
      // Undeclared exception!
      coreFunction0.functionContains(evalContext0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-662));
      Step step0 = new Step((-662), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant(double0);
      expressionArray0[4] = (Expression) constant1;
      QName qName0 = new QName("|ct}M;lrXV%KV!O&", "z");
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationNegate0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[0], expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 26, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)103;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("concat");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, extensionFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThan0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[3], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((byte)103, expressionArray0);
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1646, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((byte)103, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      Step step7 = new Step((-157), nodeNameTest0, expressionArray1);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeNameTest0, false);
      EvalContext evalContext0 = expressionPath0.createContextForStep(precedingOrFollowingContext0, 13, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("v");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(905, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction905()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-1672), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1672), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1672), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1672), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1672), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationNotEqual1;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(expressionArray0[3], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationNotEqual2;
      CoreFunction coreFunction0 = new CoreFunction(67, expressionArray0);
      EvalContext evalContext0 = null;
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionNot(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.functionContains((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(20);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("\"");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual1);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("flseflse");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "falsefalse");
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(671, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1591), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1591), expressionArray0);
      coreFunction1.toString();
      coreFunction0.toString();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-1591), expressionArray1);
      coreFunction2.functionSubstring((EvalContext) null);
      coreFunction2.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3511));
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-3511), expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      int int0 = 414;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Float float0 = new Float((float) 414);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(414, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[9];
      Step step0 = new Step(4609, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-719), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(4609, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(9, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(20, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(4609, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(4609, (NodeTest) null, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(26, (NodeTest) null, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(10, (NodeTest) null, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(4609, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("falseNaN", "falseNaN");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray2 = new Expression[0];
      Step step0 = new Step((-1581), nodeNameTest0, expressionArray2);
      stepArray0[0] = step0;
      Step step1 = new Step((-1581), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeNameTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step((-1581), nodeNameTest0, expressionArray2);
      stepArray0[4] = step4;
      Expression[] expressionArray3 = new Expression[3];
      expressionArray3[0] = (Expression) coreOperationAnd0;
      expressionArray3[1] = (Expression) coreOperationAnd0;
      expressionArray3[2] = (Expression) coreOperationAnd0;
      Step step5 = new Step(5, nodeNameTest0, expressionArray3);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionPath0, expressionArray1[0]);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray3[2]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Double double0 = new Double(10);
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray0[4] = (Expression) coreOperationNegate1;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationNegate1, expressionArray2, stepArray0);
      expressionArray0[5] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "falseNaN");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, expressionArray3[2]);
      // Undeclared exception!
      coreFunction0.functionStringLength(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.functionContains((EvalContext) null);
      coreFunction1.getArgumentCount();
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(boolean())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("\"");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2812, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[0], coreFunction0);
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], coreFunction0);
      expressionArray1[5] = (Expression) coreOperationEqual0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      coreFunction1.computeContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(10);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, nodeTypeTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("falseNaN");
      QName qName0 = new QName("^\"SlV3&l!9C2+'", "^\"SlV3&l!9C2+'");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction((-840), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-3069), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.toString();
      CoreFunction coreFunction2 = new CoreFunction((-3069), expressionArray0);
      coreFunction2.iteratePointers((EvalContext) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction1;
      CoreFunction coreFunction3 = new CoreFunction((-840), expressionArray1);
      coreFunction3.functionSubstring((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction3.toString();
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3069()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-125), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-125), expressionArray0);
      coreFunction1.toString();
      coreFunction1.iteratePointers((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(688, expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      coreFunction2.computeValue((EvalContext) null);
      coreFunction0.toString();
      coreFunction2.functionConcat((EvalContext) null);
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-125), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-125), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.toString();
      coreFunction1.iteratePointers((EvalContext) null);
      coreOperationLessThan0.args = expressionArray0;
      CoreFunction coreFunction2 = new CoreFunction(688, expressionArray0);
      // Undeclared exception!
      coreFunction2.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) processingInstructionTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "JL", (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      AttributeContext attributeContext0 = new AttributeContext(evalContext0, processingInstructionTest0);
      CoreFunction coreFunction0 = new CoreFunction(3057, expressionArray0);
      coreFunction0.functionLast(evalContext0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("*P]D8!OB");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "*P]D8!OB");
      Step step0 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      QName qName1 = new QName("*P]D8!OB");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[2] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName1);
      expressionArray0[3] = (Expression) variableReference1;
      CoreFunction coreFunction1 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = new Double(46);
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationNotEqual1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], coreOperationNotEqual1);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("d$_@");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Float float0 = new Float((float) 0);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      expressionArray1[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("`+O|=EUx");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      Constant constant1 = new Constant(float0);
      expressionArray0[4] = (Expression) constant1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], constant1);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[1]);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "%gl^ybgBS");
      Locale locale0 = Locale.KOREAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationSubtract0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, variableReference0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(rootContext0, (NodeSet) null);
      // Undeclared exception!
      coreFunction0.functionCeiling(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3537), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("J>0E o'mb@[]4", "J>0E o'mb@[]4");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      NodePointer nodePointer0 = variablePointer0.createPath((JXPathContext) jXPathContextReferenceImpl0, (Object) jXPathContext0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: J>0E o'mb@[]4:J>0E o'mb@[]4
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1188), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionCount((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("\":\"");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("v'>", "*m;-mK");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2205, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("Db\"=.5,<*", "format-number");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-346), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(112, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      nameAttributeTest0.equal(expressionArray0[0], coreOperationOr0);
      Step step2 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1612, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1612, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[5];
      Expression[] expressionArray2 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray2);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray1[0] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(23, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1252, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2147483645, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(2147483645, nodeNameTest0, (Expression[]) null);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1252, expressionArray1);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray1[2] = expression0;
      ExpressionPath expressionPath0 = new ExpressionPath(expression0, expressionArray0, stepArray0);
      expressionArray1[3] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expression0, coreOperationOr0);
      expressionArray1[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction((-1155), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceXgding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1207), expressionArray0);
      coreFunction0.functionName((EvalContext) null);
      assertEquals((-1207), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName((String) null, (String) null);
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNotEqual0, variableReference0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(1000, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-125), expressionArray0);
      coreFunction0.getArg1();
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      FileSystemHandling.shouldAllThrowIOExceptions();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-1208), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)77;
      byte byte0 = (byte)116;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)2;
      byteArray0[8] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("d:HMq!HaBaCC\"cJ2");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("d:HMq!HaBaCC\"cJ2");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, variableReference0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((byte)2);
      Step step0 = new Step((-670), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      Constant constant1 = new Constant((byte)6);
      expressionArray0[6] = (Expression) constant1;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(671, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      Integer integer0 = new Integer((-2915));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) integer0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceXgding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1187), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1187), expressionArray0);
      coreFunction1.functionRound((EvalContext) null);
      assertEquals((-1187), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("}&7=x0Da5A=DknVZsu");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-284), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-284), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(23, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(23, coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceXgding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1187), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1187()('preceXgding')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("contains");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-125), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-125), expressionArray0);
      coreFunction1.toString();
      coreFunction1.iteratePointers((EvalContext) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-125));
      Step step0 = new Step((-125), nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-1800), nodeTypeTest0, expressionArray0);
      Step[] stepArray0 = new Step[7];
      stepArray0[0] = step0;
      stepArray0[1] = step1;
      Step step2 = new Step((-125), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expression0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, false);
      expressionPath0.createContextForStep((EvalContext) null, (-1800), nodeTypeTest0);
      coreFunction0.functionStartsWith((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-125()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-114), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-125), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-125), expressionArray0);
      coreFunction1.toString();
      coreFunction1.iteratePointers((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(688, expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ">yu4j7AEZ7V0F^H(EB`");
      coreOperationLessThan0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      coreFunction2.functionConcat((EvalContext) null);
      Locale locale0 = new Locale("*\u0006/ZvBE");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "true", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      NodePointer nodePointer1 = jXPathContextReferenceImpl0.getVariablePointer(qName0);
      RootContext rootContext0 = null;
      try {
        rootContext0 = new RootContext((JXPathContextReferenceImpl) null, nodePointer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((Number) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant("\"/\"");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant1);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-817), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(boolean0);
      assertEquals(24, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertNotNull(object0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("falseNaN");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(635, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(635, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationEqual0;
      Step step2 = new Step(635, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(635, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray1[2], locationPath0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(635, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-13), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      QName qName0 = new QName("'pD)i`;634Tlz`j-2", "'pD)i`;634Tlz`j-2");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeNameTest0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("NaN");
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      expressionArray1[0] = (Expression) coreOperationNegate0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[0], coreOperationSubtract0);
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray1[0]);
      expressionArray1[2] = (Expression) coreOperationNegate1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, nameAttributeTest0);
      expressionArray1[3] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step((-4858), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      processingInstructionTest0.toString();
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[2], expressionArray1, stepArray0);
      expressionArray1[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-554), expressionArray1);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("false");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], coreOperationMod0);
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1508, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, jXPathContext0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, true, false);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.iterate(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.isContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("HKds$.D+95X7Q%&ot2", "HKds$.D+95X7Q%&ot2");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, precedingOrFollowingContext0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(79, expressionArray1);
      coreFunction1.iterate(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1819), expressionArray0);
      JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      ParentContext parentContext0 = new ParentContext(precedingOrFollowingContext0, nodeTypeTest0);
      parentContext0.getCurrentNodePointer();
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2);
      Step step0 = new Step(2211, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2211, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(2211, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[7];
      Constant constant0 = new Constant("last");
      expressionArray1[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[0], constant0);
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("last", "last");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[5] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      Step[] stepArray1 = new Step[3];
      stepArray1[0] = step1;
      stepArray1[1] = step1;
      stepArray1[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray1, stepArray1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionArray1[0]);
      expressionArray1[6] = (Expression) coreOperationDivide0;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(4, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(24, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) variableReference0;
      expressionArray2[2] = (Expression) coreOperationMultiply0;
      Step step6 = new Step(2, nodeTypeTest0, expressionArray2);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, coreOperationDivide0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      LocationPath locationPath1 = new LocationPath(false, stepArray1);
      expressionArray0[1] = (Expression) locationPath1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray2[1]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2211, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("g1'@nq1gUh-F(k");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, false, nodeTypeTest0);
      ParentContext parentContext0 = new ParentContext(ancestorContext0, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationDivide0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      QName qName0 = new QName("%S_x,X'jZu4@e");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant0 = new Constant("%S_x,X'jZu4@e");
      expressionArray0[6] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[4], expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("1T3m+w");
      Step step0 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(14, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      QName qName0 = new QName("substring-before", "'");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step2 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      Step step3 = new Step(14, processingInstructionTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(14, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(14, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step((-2309), processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      Step step8 = new Step(2082, (NodeTest) null, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, coreOperationLessThan0);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationAdd0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[0], coreOperationEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest1, expressionArray0[3]);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest1, coreOperationEqual0);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[5], locationPath0);
      expressionArray0[8] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[6], (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl1.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("LB_>uuprb %#vsr", "'v&kr.KAi`e3?t]$|*U");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("5.[*>vhD_q:ZmV3 ", ")S");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationMod1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(1195, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1195, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(222, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, ")S");
      Step step3 = new Step(42, nodeNameTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1195, nodeNameTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(222, nodeNameTest1, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1195, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, (NodeTest) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, nodeNameTest1, false);
      // Undeclared exception!
      coreFunction0.functionStartsWith(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("ceiling");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationAnd0);
      coreOperationSubtract0.isContextDependent();
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[5], expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      expressionArray0[7] = (Expression) expressionPath0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[8] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("/k$Ws(y7:=G6Vd5");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("falseNaN");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2467, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[4] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expression0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction2 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      coreFunction2.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Constant constant0 = new Constant("ancestor::");
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("C,<g5(");
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-1165), expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[3] = expression0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[3], expression0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("ancestor::", "C,<g5(");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1165), expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ancestor::");
      SelfContext selfContext0 = new SelfContext(evalContextArray0[1], processingInstructionTest0);
      evalContextArray0[3] = (EvalContext) selfContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      coreFunction1.functionConcat(unionContext0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("@(#) $RCSfile: ProcessingInstruction.java,v $ $Revision: 1.46 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "@(#) $RCSfile: ProcessingInstruction.java,v $ $Revision: 1.46 $ $Date: 2004/02/27 11:32:57 $ $Name: jdom_1_0 $");
      Step step0 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(927, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, expressionPath0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-284), expressionArray0);
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      Step step0 = new Step(85, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(25, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(21, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationDivide0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      expressionPath0.createContextForStep(childContext0, (-238), nodeTypeTest0);
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object0);
      assertEquals((-284), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      String string0 = coreFunction0.toString();
      assertEquals("name()", string0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("9SXE/=\"z~$SMb%`");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(99, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) extensionFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) extensionFunction0);
      Locale locale0 = Locale.FRENCH;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, qName0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[7];
      Constant constant0 = new Constant("Factory ");
      expressionArray1[0] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-5618));
      Step step0 = new Step(2071, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray1, stepArray0);
      expressionArray1[2] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionPath0, expressionArray1[0]);
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray1[4] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[5] = (Expression) coreOperationAdd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray1);
      expressionArray1[6] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2742), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)58;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("", "h>d>l.yM");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationLessThan1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreFunction coreFunction0 = new CoreFunction((-597), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, processingInstructionTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, selfContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Object object0 = coreFunction0.compute(evalContext0);
      assertEquals("root", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-1165), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      PredicateContext predicateContext1 = new PredicateContext(rootContext0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(predicateContext1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("lang", string0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3Z:BGXNdi0lso%");
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant(">bYb*r9");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Float float0 = new Float((float) 0);
      Constant constant1 = new Constant(float0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, expressionArray0[1]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant1;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2905, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-1214), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray1, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-6218), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = (-2868);
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "count");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.isContextDependent();
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2868), expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      CoreFunction coreFunction0 = new CoreFunction((-2674), (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      parentContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, precedingOrFollowingContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionNamespaceURI(evalContext0);
      assertNotNull(object0);
      
      coreFunction0.functionTrue((EvalContext) null);
      assertEquals((-2674), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName(" ~um2 D");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " ~um2 D");
      Step step0 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(6, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Byte byte0 = new Byte((byte) (-21));
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2664, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(342, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(342, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(9, coreFunction2.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("contains", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction((-905), expressionArray0);
      assertEquals((-905), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 4;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, (Expression) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, nameAttributeTest0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationMultiply0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1165), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(342, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("!E*vl#Ii!B96K0");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFloor((EvalContext) null);
      constant0.toString();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        constant0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(342, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      coreFunction1.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("G'x#z0W>#o5I+vW.)_5");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(ancestorContext0, processingInstructionTest0, false, false);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      nodeTypeTest0.toString();
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, nodeTypeTest0, false);
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("");
      Integer integer0 = new Integer(26);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      coreFunction0.functionName(rootContext1);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.getFunctionName();
      String string0 = coreFunction0.toString();
      assertEquals("not()", string0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationLessThan0);
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(19, int0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.getFunctionName();
      String string0 = coreFunction0.toString();
      assertEquals("starts-with()", string0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(50, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(2483, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2483()($:, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 != org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004) >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000006 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = null;
      int int0 = 8;
      Expression[] expressionArray1 = new Expression[5];
      Expression[] expressionArray2 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(719);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("id", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("format-number", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Constant constant0 = new Constant("");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2026));
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.computeValue((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.getFunctionName();
      String string0 = coreFunction0.toString();
      assertEquals("number()", string0);
      
      QName qName0 = new QName("", "number");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationNegate0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationOr0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      coreFunction1.getFunctionName();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      // Undeclared exception!
      try { 
        coreFunction1.compute(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      coreOperationNegate0.computeContextDependent();
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1490, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      coreFunction0.getArgumentCount();
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, (NodeSet) null);
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte) (-33);
      byteArray0[7] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction1 = new CoreFunction(74, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction1.functionFalse((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      coreFunction1.functionTrue(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      Constant constant0 = new Constant("`E=GZCY*{3}1g~h6&p");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, constant0);
      QName qName0 = new QName("`E=GZCY*{3}1g~h6&p");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreOperationDivide");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step0 = new Step(26, nodeNameTest1, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2880));
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(26, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      coreFunction0.getFunctionName();
      String string0 = coreFunction0.toString();
      assertEquals("string()", string0);
      
      QName qName0 = new QName("vaT", "vaT");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreOperationLessThan0);
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      int int0 = 11;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNamespaceURI((EvalContext) null);
      EvalContext evalContext1 = null;
      coreFunction0.functionLocalName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction((-715), expressionArray0);
      coreFunction0.getArg1();
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeValue((EvalContext) null);
      QName qName0 = new QName(",zT7Y");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction0()()");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      Step step1 = new Step((-25), nodeNameTest0, expressionArray0);
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      stepArray0[1] = step2;
      stepArray0[2] = step1;
      stepArray0[3] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "unknownFunction0()()");
      expressionPath0.isSimpleExpressionPath();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) ",zT7Y");
      Locale locale0 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionPath0);
      EvalContext evalContext0 = rootContext0.getConstantContext(predicateContext0);
      expressionPath0.evalSteps(evalContext0);
      coreFunction0.functionStringLength(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 8;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(488, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(488, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[7];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[3] = expression0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreFunction0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[6] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, coreOperationOr0);
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      expressionArray1[3] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(1441792, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction3.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.getFunctionName();
      String string0 = coreFunction0.toString();
      assertEquals("number()", string0);
      
      QName qName0 = new QName("number", "number()");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      int int0 = coreFunction1.getFunctionCode();
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(1441792, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(114, expressionArray0);
      coreFunction0.getArg3();
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction((-4948), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      String string0 = "";
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1329);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, false, false);
      ParentContext parentContext0 = new ParentContext(childContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1208()('preceding')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction1 = new CoreFunction((-113), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction2 = new CoreFunction((-2147483647), expressionArray0);
      coreFunction1.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction1.functionName(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName("local-name()", "");
      coreFunction0.isContextDependent();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$_]?|,U+g");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        predicateContext0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-114), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-114), expressionArray0);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      coreFunction1.iteratePointers((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(688, expressionArray0);
      coreFunction2.functionSubstring((EvalContext) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ">yu4j7AEZ7V0F^H(EB`");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionNormalizeSpace(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction688()(org.apache.commons.jxpath.ri.compiler.Constant@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-467), expressionArray0);
      EvalContext evalContext1 = null;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 17;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction((-33), expressionArray0);
      Step step0 = new Step((-33), processingInstructionTest0, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3230);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, (Step[]) null);
      expressionPath0.createContextForStep((EvalContext) null, 436, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      int int0 = (-1208);
      Expression[] expressionArray0 = new Expression[1];
      String string0 = "preceding";
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      QName qName0 = new QName("");
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-114), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, expression0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction((-114), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction1.functionSubstringBefore((EvalContext) null);
      coreFunction1.iteratePointers((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-114()(org.apache.commons.jxpath.ri.compiler.Constant@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 < (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(2610, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreOperationDivide0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "X}";
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(3787, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName("number", "number()");
      QName qName1 = new QName("_]|?|,U+g", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "number()");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(1436, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(1436, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName("number", "number()");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(558);
      Step step0 = new Step(18, nodeTypeTest0, (Expression[]) null);
      Step step1 = new Step(15, nodeTypeTest0, (Expression[]) null);
      Step step2 = new Step(2351, nodeTypeTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(558);
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-1208), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1208));
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction2 = new CoreFunction((-1208), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      CoreFunction coreFunction1 = new CoreFunction((-113), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction2 = new CoreFunction((-2147483647), expressionArray0);
      coreFunction1.getFunctionCode();
      Expression[] expressionArray1 = new Expression[0];
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName("local-name()", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$_]?|,U+g");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-238), (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1065), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName("number", "number()");
      QName qName1 = new QName("_]|?|,U+g", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "number()");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction(1436, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(410, (Expression[]) null);
      coreFunction0.getArgumentCount();
      assertEquals(410, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray0 = new Expression[2];
      int int0 = 8;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      CoreFunction coreFunction1 = new CoreFunction((-113), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction2 = new CoreFunction((-2147483647), expressionArray0);
      coreFunction1.getFunctionCode();
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction3 = new CoreFunction(0, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(111, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationNegate0);
      Constant constant0 = new Constant("`E=GZCY*{3}1g~h6&p");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate1, constant0);
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationNegate0);
      CoreOperationNegate coreOperationNegate2 = new CoreOperationNegate(coreOperationDivide0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreFunction0, coreOperationDivide0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, coreOperationDivide1);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      coreFunction0.getArgumentCount();
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5lS+1v");
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[2];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction(960, (Expression[]) null);
      coreFunction1.getFunctionCode();
      CoreFunction coreFunction2 = new CoreFunction((-2), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      QName qName0 = new QName("HKd^}pSl", "HKd^}pSl");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      Locale locale1 = Locale.ROOT;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      PredicateContext predicateContext1 = new PredicateContext(rootContext0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(predicateContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      JXPathContext.newContext((Object) descendantContext0);
      CoreFunction coreFunction1 = new CoreFunction(40, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(40, processingInstructionTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 40, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionFalse((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      coreFunction0.functionTrue(attributeContext0);
      coreFunction0.functionNumber(attributeContext0);
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5lS+1v");
      int int0 = (-2);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("5lS+1v");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-123), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = 22;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("`c|");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(variableReference0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide1, coreOperationDivide1);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2773), expressionArray0);
      coreFunction0.getArgumentCount();
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = (EvalContext) selfContext0;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext(selfContext0, evalContextArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = 40;
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2), (Expression[]) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(512, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction512()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      QName qName0 = new QName("h[Ne0");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale locale0 = Locale.CANADA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationAnd0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreOperationAnd0);
      PredicateContext predicateContext1 = new PredicateContext(rootContext0, coreOperationAnd0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(1860, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[1] = expression0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expression0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationNegate0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      Expression expression1 = coreFunction0.getArg1();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      coreOperationMultiply0.computeValue(childContext0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, expression1);
      expressionArray0[6] = (Expression) coreOperationLessThan1;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 = org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) < (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003), $org.apache.commons.jxpath.ri.compiler.CoreFunction, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005 != org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000005) * org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 < (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[19];
      CoreFunction coreFunction0 = new CoreFunction((-3097), expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction((-3097), expressionArray0);
      coreFunction1.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3097()(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      boolean boolean0 = false;
      Step[] stepArray0 = new Step[3];
      String string0 = "";
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(314, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(314, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Constant constant0 = new Constant("");
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(314, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      CoreFunction coreFunction0 = new CoreFunction((-4398), (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1196, expressionArray0);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      QName qName0 = new QName("Mi|DXZ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Mi|DXZ");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext1, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1196()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("T\"nl", "G=<kDP");
      QName qName1 = new QName("T\"nl", "G=<kDP");
      VariableReference variableReference0 = new VariableReference(qName1);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getArg1();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[13];
      Step[] stepArray0 = new Step[1];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      coreFunction0.toString();
      CoreFunction coreFunction2 = new CoreFunction(227, expressionArray0);
      coreFunction2.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction227()(/null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3511));
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) locationPath0;
      expressionArray0[2] = (Expression) locationPath0;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-3511), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationMultiply0);
      expressionArray1[1] = (Expression) coreOperationNegate1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationNegate0);
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreOperationNegate0;
      expressionArray2[2] = (Expression) coreFunction0;
      expressionArray2[3] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray2, stepArray0);
      // Undeclared exception!
      try { 
        expressionPath0.isSimpleExpressionPath();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      JXPathContext.newContext((Object) descendantContext0);
      CoreFunction coreFunction1 = new CoreFunction(40, (Expression[]) null);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(40, processingInstructionTest0, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 40, processingInstructionTest0);
      assertEquals(40, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest1);
      coreFunction0.functionFalse((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest1);
      coreFunction0.functionTrue(attributeContext0);
      coreFunction0.functionNumber(attributeContext0);
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()()", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int int0 = 227;
      boolean boolean0 = true;
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      JXPathContext jXPathContext0 = null;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction227()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("S0");
      Step step0 = new Step(29, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(22, processingInstructionTest0, expressionArray0);
      step0.isContextDependent();
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("S0");
      Step step2 = new Step(2118, processingInstructionTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(29, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      step0.toString();
      Step step4 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(656, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(2118, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction2, (Expression[]) null, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      expressionPath0.createContextForStep((EvalContext) null, 0, processingInstructionTest1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest1);
      coreFunction2.functionFalse((EvalContext) null);
      coreFunction0.functionTrue(namespaceContext0);
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4398), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4398()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "X}";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      coreFunction0.compute(descendantContext0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      coreFunction0.functionString(ancestorContext0);
      coreFunction0.functionPosition(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("_y#Xb6/(", "Cannot set property: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(28, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(28, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(28, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-975), nodeNameTest0, expressionArray0);
      stepArray0[1] = step3;
      Step step4 = new Step(3551, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      step2.toString();
      Step step5 = new Step(28, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, (Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationDivide0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, (Expression) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("preceding");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-1208), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1208));
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionPath0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      CoreFunction coreFunction2 = new CoreFunction((-1208), expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionFalse(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1208()('preceding')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(656, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(656, expressionArray0);
      QName qName0 = new QName("lang");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.toString();
      QName qName0 = new QName(", ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "_]|?|,U+g");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeTest nodeTest0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      QName qName0 = new QName("string-length");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Z\"&)", "_y#Xb6/(");
      VariableReference variableReference0 = new VariableReference(qName0);
      variableReference0.toString();
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "X}";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      coreFunction0.compute(descendantContext0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      coreFunction0.functionString(ancestorContext0);
      coreFunction0.functionPosition(descendantContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Expression[] expressionArray1 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], coreOperationAnd0);
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      Step step0 = new Step(13, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(13, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray1);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1105), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-1105), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1119));
      expressionPath0.createContextForStep((EvalContext) null, (-1105), nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1208), expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1208()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("`c|");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(variableReference0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationDivide1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide1, coreOperationDivide1);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2773), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(8, int0);
      assertEquals((-2773), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      int int0 = 227;
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) locationPath0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) locationPath0;
      CoreFunction coreFunction2 = new CoreFunction(227, expressionArray1);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction2, expressionArray1[1]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[4]);
      CoreFunction coreFunction3 = new CoreFunction(227, expressionArray1);
      coreFunction3.getFunctionName();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction227()(, unknownFunction227()(), unknownFunction227()(), , unknownFunction227()(), unknownFunction227()(), )
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-2437), (Expression[]) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2437()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("_y#Xb6/(", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, variableReference0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationDivide0);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Z\"&)", "_y#Xb6/(");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = 227;
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Z\"&)", "_y#Xb6/(");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("key");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "@TiR3`g*pOKHX_lxE");
      Pointer pointer0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, "@TiR3`g*pOKHX_lxE", (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      QName qName0 = new QName("_y#Xb6/(", "substring-before");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, nameAttributeTest0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationDivide0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply1, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide((Expression) null, coreOperationLessThanOrEqual1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationLessThanOrEqual0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply1, coreOperationDivide0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      expressionArray0[5] = (Expression) coreOperationMultiply1;
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-655), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      CoreFunction coreFunction1 = new CoreFunction((-655), expressionArray0);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step((-655), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-655), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      nodeTypeTest0.toString();
      expressionPath0.createContextForStep((EvalContext) null, 1168, nodeTypeTest0);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-655()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeTest nodeTest0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2437), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2437()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2137), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(741, (Expression[]) null);
      NodeTest nodeTest0 = null;
      coreFunction0.compute((EvalContext) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, coreFunction0);
      // Undeclared exception!
      try { 
        ancestorContext0.getJXPathContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(227);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2023);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("Z\"&)", "_y#Xb6/(");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, variableReference0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationDivide0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction1, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction1);
      CoreFunction coreFunction2 = new CoreFunction(227, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction2.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion1, coreOperationSubtract0);
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      ExpressionPath expressionPath2 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionPath2.createContextForStep((EvalContext) null, (-419), nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) expressionPath2;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("e}ul");
      Step step0 = new Step(2800, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(2800, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-126), expressionArray0);
      coreFunction1.getArg2();
      coreFunction0.getArg3();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step2);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) step0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, parentContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, processingInstructionTest0);
      RootContext rootContext0 = ancestorContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-126()(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(227);
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("eul");
      Step step0 = new Step(2800, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      Step step2 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      QName qName0 = new QName("", "eul");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant1 = new Constant("eul");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(2800, expressionArray0);
      coreFunction0.getArg2();
      coreFunction0.getArg3();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(227);
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction227()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[17];
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("eul");
      Step step0 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step0;
      Step step1 = new Step((-126), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step2;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "eul");
      Step step3 = new Step((-126), nodeNameTest0, expressionArray0);
      stepArray0[4] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[5] = step4;
      Step step5 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[6] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      Constant constant1 = new Constant("u7W0o#$icfjB~>");
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], constant1);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, (Expression) null);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual2 = new CoreOperationGreaterThanOrEqual(constant0, expressionArray0[1]);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual2;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, coreOperationAdd0);
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-126), expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(locationPath0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationMultiply0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThanOrEqual0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, coreOperationMultiply0);
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, locationPath1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction((-542), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-542()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("X}");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) descendantContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, processingInstructionTest0, (Pointer) null);
      EvalContext evalContext1 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-655), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-655()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      String string0 = "org.jdom.Document";
      Constant constant0 = new Constant("org.jdom.Document");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreFunction0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      expressionArray0[4] = (Expression) coreFunction1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, (Expression) null);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[3], (Expression) null);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[6], nameAttributeTest0);
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(227, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(227, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(227);
      expressionPath0.createContextForStep((EvalContext) null, 0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("#nAC%7+");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[0]);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationOr0;
      Float float0 = new Float((double) 19);
      Constant constant0 = new Constant(float0);
      expressionArray0[6] = (Expression) constant0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      coreFunction0.getArg2();
      Step[] stepArray0 = new Step[8];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "#nAC%7+");
      Step step0 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2602, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(19, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(10, nodeNameTest0, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      expressionPath0.createContextForStep(namespaceContext0, 0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1314), (Expression[]) null);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "jg$aXL:uL$*St<1#RM");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], variableReference0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationMod0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-343), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-343()($:jg$aXL:uL$*St<1#RM, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 * org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000003), org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 div (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000007 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("format-number");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], variableReference0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, coreOperationLessThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(24, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName(">nm45m\"io~", ">nm45m\"io~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      expressionArray1[6] = (Expression) coreOperationUnion0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      Step step2 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(5, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionArray1[2]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray1[2]);
      expressionArray0[6] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1174);
      Step step0 = new Step(2340, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationNegate0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, coreOperationLessThan0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThan0, coreOperationNegate0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationLessThan0, coreOperationNotEqual0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2340, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      QName qName0 = new QName("", "");
      Locale locale0 = Locale.TAIWAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, step1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2340()((org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007) > (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000008), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000009 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000010 or org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000011, org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000006 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(981, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      coreFunction0.functionNull(predicateContext0);
      assertEquals(981, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion1, coreOperationSubtract0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(115, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-116), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionTrue((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationEqual0, coreOperationSubtract0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationEqual1);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, (Step[]) null);
      expressionArray0[3] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[4] = (Expression) locationPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[2], expressionArray0, (Step[]) null);
      expressionArray0[5] = (Expression) expressionPath1;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      expressionArray1[6] = (Expression) locationPath0;
      expressionArray1[7] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      expressionArray0[7] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction((-3511), expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-3511()", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      int int0 = (-853);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-853), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("o 4z8_F5", "o 4z8_F5");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(47);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAdd0, variableReference0);
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      Step step0 = new Step(395, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[9];
      expressionArray2[0] = (Expression) coreOperationOr0;
      expressionArray2[1] = (Expression) coreOperationNotEqual0;
      expressionArray2[2] = (Expression) coreOperationAdd0;
      expressionArray2[3] = (Expression) coreOperationOr0;
      expressionArray2[4] = (Expression) coreOperationMod0;
      expressionArray2[5] = (Expression) coreOperationMod0;
      expressionArray2[6] = (Expression) coreOperationAdd0;
      expressionArray2[7] = (Expression) coreOperationMod0;
      expressionArray2[8] = (Expression) variableReference0;
      Step step2 = new Step(47, nodeTypeTest0, expressionArray2);
      stepArray0[2] = step2;
      Step step3 = new Step(395, nodeTypeTest0, expressionArray2);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(395, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(395, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNegate0, coreOperationSubtract0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1184, expressionArray0);
      coreFunction0.getFunctionCode();
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1184);
      Step step0 = new Step(1184, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1184, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1184, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        expressionPath0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("w(SD{");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("K=EXvVk", "div");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "div");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      constant0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("qo%b 1,;=&^oc");
      String string0 = ",,|D\"W4S.K2#Wv";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ",,|D\"W4S.K2#Wv");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        selfContext0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // JXPath iterators cannot remove nodes
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2065), expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2065()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
