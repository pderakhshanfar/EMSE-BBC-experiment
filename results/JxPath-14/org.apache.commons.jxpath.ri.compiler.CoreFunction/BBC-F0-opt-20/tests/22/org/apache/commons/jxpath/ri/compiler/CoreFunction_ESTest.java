/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 23 05:06:07 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray1[0], constant0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray1[3] = (Expression) coreOperationMod0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(5, expressionArray1.length);
      assertFalse(boolean0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.functionPosition(ancestorContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(0, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("boolean");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "ul");
      assertNotNull(nodeNameTest0);
      assertEquals("ul", nodeNameTest0.getNamespaceURI());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertNotNull(attributeContext0);
      assertEquals("ul", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      Object object0 = coreFunction0.functionStringLength(attributeContext0);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("ul", nodeNameTest0.getNamespaceURI());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName((String) null, "normalize-space");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      
      CoreFunction coreFunction0 = new CoreFunction((-2275), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2275), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variablePointer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNotNull(rootContext0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      String string0 = (String)coreFunction0.functionName(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("normalize-space", string0);
      assertNotNull(string0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-2275), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, (NodeTest) null);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(namespaceContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      assertNotNull(nodeTypeTest0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeTypeTest0);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(attributeContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      ParentContext parentContext0 = new ParentContext(attributeContext0, (NodeTest) null);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(parentContext0);
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionFloor((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(273, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(273, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(4, expressionArray0.length);
      assertEquals(273, int0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(273, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction((-3069), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3069), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(5, expressionArray0.length);
      assertEquals((-3069), int0);
      assertEquals((-3069), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(9, expressionArray0.length);
      assertEquals(9, int0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("lg_");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertNotNull(coreOperationEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(723, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(723, coreFunction0.getFunctionCode());
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = (CoreOperationGreaterThan)coreFunction0.getArg3();
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(723, coreFunction0.getFunctionCode());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertSame(coreOperationGreaterThan1, coreOperationGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-781), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-781), coreFunction0.getFunctionCode());
      
      CoreOperationNegate coreOperationNegate1 = (CoreOperationNegate)coreFunction0.getArg2();
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNegate1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-781), coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertSame(coreOperationNegate1, coreOperationNegate0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, (Expression) null);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1543), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1543), coreFunction0.getFunctionCode());
      
      CoreOperationDivide coreOperationDivide1 = (CoreOperationDivide)coreFunction0.getArg1();
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide1);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1543), coreFunction0.getFunctionCode());
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertSame(coreOperationDivide1, coreOperationDivide0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionNull((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(0, expressionArray0.length);
      assertNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(selfContext0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.compute(ancestorContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[6];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("O`VV<D/:u=kx@4$", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1382), expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1382), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-725), (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-725), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(83, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(83, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("03>u!7xtsg4>^6+f");
      assertNotNull(qName0);
      assertEquals("03>u!7xtsg4>^6+f", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("03>u!7xtsg4>^6+f", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "03>u!7xtsg4>^6+f");
      assertNotNull(nodeNameTest0);
      assertEquals("03>u!7xtsg4>^6+f", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("03>u!7xtsg4>^6+f", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("03>u!7xtsg4>^6+f", nodeNameTest0.toString());
      assertEquals("03>u!7xtsg4>^6+f", nodeNameTest0.getNamespaceURI());
      
      Step step0 = new Step(92, nodeNameTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("03>u!7xtsg4>^6+f", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("03>u!7xtsg4>^6+f", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("03>u!7xtsg4>^6+f", nodeNameTest0.toString());
      assertEquals("03>u!7xtsg4>^6+f", nodeNameTest0.getNamespaceURI());
      assertEquals(92, step0.getAxis());
      
      stepArray0[0] = step0;
      stepArray0[1] = stepArray0[0];
      stepArray0[2] = stepArray0[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("03>u!7xtsg4>^6+f", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("03>u!7xtsg4>^6+f", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(92, coreFunction0.getFunctionCode());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      coreFunction0.functionTrue(evalContext0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1534, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1534()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("2}+Cfh(^1Y4]f[[n", "), ");
      assertNotNull(qName0);
      assertEquals("), ", qName0.getName());
      assertEquals("2}+Cfh(^1Y4]f[[n:), ", qName0.toString());
      assertEquals("2}+Cfh(^1Y4]f[[n", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("), ", qName0.getName());
      assertEquals("2}+Cfh(^1Y4]f[[n:), ", qName0.toString());
      assertEquals("2}+Cfh(^1Y4]f[[n", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1610, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1610, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAnd0, coreOperationAnd0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[9];
      QName qName0 = new QName("2kUrx!Z6j");
      assertNotNull(qName0);
      assertEquals("2kUrx!Z6j", qName0.toString());
      assertEquals("2kUrx!Z6j", qName0.getName());
      assertNull(qName0.getPrefix());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("2kUrx!Z6j", qName0.toString());
      assertEquals("2kUrx!Z6j", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("2kUrx!Z6j", nodeNameTest0.toString());
      
      Step step0 = new Step((-2194), nodeNameTest0, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("2kUrx!Z6j", qName0.toString());
      assertEquals("2kUrx!Z6j", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("2kUrx!Z6j", nodeNameTest0.toString());
      assertEquals((-2194), step0.getAxis());
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = stepArray0[0];
      stepArray0[4] = step0;
      stepArray0[5] = step0;
      stepArray0[6] = stepArray0[2];
      stepArray0[7] = step0;
      stepArray0[8] = stepArray0[2];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray1, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-1921), expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1921), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(6, expressionArray0.length);
      assertEquals(0, expressionArray1.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray1, expressionArray0);
      
      // Undeclared exception!
      coreFunction0.functionTranslate(evalContext0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(6144, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(6144, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("bUm(wl0A", (String) null);
      assertNotNull(qName0);
      assertNull(qName0.getName());
      assertEquals("bUm(wl0A:null", qName0.toString());
      assertEquals("bUm(wl0A", qName0.getPrefix());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertNull(qName0.getName());
      assertEquals("bUm(wl0A:null", qName0.toString());
      assertEquals("bUm(wl0A", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertNull(qName0.getName());
      assertEquals("bUm(wl0A:null", qName0.toString());
      assertEquals("bUm(wl0A", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(460, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(460, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(34, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction34()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertNotNull(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, (Expression) null);
      assertNotNull(coreOperationLessThan0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(117, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[5];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(116, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1564), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertNotNull(coreOperationNegate0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationNegate0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationSubtract0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, constant0);
      assertNotNull(coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationDivide0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      assertEquals(8, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationDivide0, expressionArray0[1]);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName((String) null, "normalize-space");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("normalize-space", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("normalize-space", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals("normalize-space", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: normalize-space
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      AncestorContext ancestorContext0 = new AncestorContext(attributeContext0, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-781), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-781), coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-781));
      assertNotNull(nodeTypeTest0);
      assertEquals((-781), nodeTypeTest0.getNodeType());
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, nodeTypeTest0, true);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, extensionFunction0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(predicateContext0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      assertEquals(3, expressionArray0.length);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(selfContext0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals((-781), nodeTypeTest0.getNodeType());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("=");
      assertNotNull(qName0);
      assertEquals("=", qName0.getName());
      assertEquals("=", qName0.toString());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("=", qName0.getName());
      assertEquals("=", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=", qName0.getName());
      assertEquals("=", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '='
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-66), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-66), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-66), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("E+']", "E+']");
      assertNotNull(qName0);
      assertEquals("E+']", qName0.getPrefix());
      assertEquals("E+']", qName0.getName());
      assertEquals("E+']:E+']", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("E+']", qName0.getPrefix());
      assertEquals("E+']", qName0.getName());
      assertEquals("E+']:E+']", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-66), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("E+']", qName0.getPrefix());
      assertEquals("E+']", qName0.getName());
      assertEquals("E+']:E+']", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-66), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("E+']", qName0.getPrefix());
      assertEquals("E+']", qName0.getName());
      assertEquals("E+']:E+']", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(10, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(10, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      assertNotNull(nodeTypeTest0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-3069), expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3069), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("L2eC9*}T0S@YOtG0");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName(":4rj]]tH", ":4rj]]tH");
      assertNotNull(qName0);
      assertEquals(":4rj]]tH::4rj]]tH", qName0.toString());
      assertEquals(":4rj]]tH", qName0.getPrefix());
      assertEquals(":4rj]]tH", qName0.getName());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(":4rj]]tH::4rj]]tH", qName0.toString());
      assertEquals(":4rj]]tH", qName0.getPrefix());
      assertEquals(":4rj]]tH", qName0.getName());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(":4rj]]tH::4rj]]tH", qName0.toString());
      assertEquals(":4rj]]tH", qName0.getPrefix());
      assertEquals(":4rj]]tH", qName0.getName());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("#;bT", "9 :P|tl#JIo.fM( ");
      assertNotNull(qName0);
      assertEquals("9 :P|tl#JIo.fM( ", qName0.getName());
      assertEquals("#;bT:9 :P|tl#JIo.fM( ", qName0.toString());
      assertEquals("#;bT", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("9 :P|tl#JIo.fM( ", qName0.getName());
      assertEquals("#;bT:9 :P|tl#JIo.fM( ", qName0.toString());
      assertEquals("#;bT", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1348), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1348), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("\"rB6u!hn");
      assertNotNull(qName0);
      assertEquals("\"rB6u!hn", qName0.toString());
      assertEquals("\"rB6u!hn", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("\"rB6u!hn", qName0.toString());
      assertEquals("\"rB6u!hn", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("1W@(H}EFyC'`z +`", "normalize-space");
      assertNotNull(qName0);
      assertEquals("1W@(H}EFyC'`z +`", qName0.getPrefix());
      assertEquals("1W@(H}EFyC'`z +`:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("1W@(H}EFyC'`z +`", qName0.getPrefix());
      assertEquals("1W@(H}EFyC'`z +`:normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-323), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-323), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1990), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1990), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName((String) null, "normalize-space");
      assertNotNull(qName0);
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("normalize-space", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(33, coreFunction0.getFunctionCode());
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",qa7{~WU!mnH~`f9ob>");
      assertNotNull(processingInstructionTest0);
      assertEquals(",qa7{~WU!mnH~`f9ob>", processingInstructionTest0.getTarget());
      
      SelfContext selfContext0 = new SelfContext(initialContext0, processingInstructionTest0);
      assertNotNull(selfContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(",qa7{~WU!mnH~`f9ob>", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("normalize-space", "substring-before");
      assertNotNull(qName0);
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.getPrefix());
      assertEquals("normalize-space:substring-before", qName0.toString());
      assertEquals("substring-before", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: normalize-space:substring-before
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(460, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(460, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(460);
      assertNotNull(nodeTypeTest0);
      assertEquals(460, nodeTypeTest0.getNodeType());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext0, nodeTypeTest0, true);
      assertEquals(1, evalContextArray0.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(460, nodeTypeTest0.getNodeType());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction460()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName(";Fr;0pX-P%ahLa");
      assertNotNull(qName0);
      assertEquals(";Fr;0pX-P%ahLa", qName0.getName());
      assertEquals(";Fr;0pX-P%ahLa", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(";Fr;0pX-P%ahLa", qName0.getName());
      assertEquals(";Fr;0pX-P%ahLa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      Step[] stepArray0 = new Step[9];
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals(";Fr;0pX-P%ahLa", qName0.getName());
      assertEquals(";Fr;0pX-P%ahLa", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(6, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2034), expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2034), coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("G'k3&/");
      assertNotNull(processingInstructionTest0);
      assertEquals("G'k3&/", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("G'k3&/", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1564()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(95, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(95, coreFunction0.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(95, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(95, coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[2] = (Expression) extensionFunction0;
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      assertNotNull(nodeTypeTest0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      
      DescendantContext descendantContext0 = new DescendantContext(childContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[1]);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      QName qName0 = new QName("sum", "space");
      assertNotNull(qName0);
      assertEquals("sum:space", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("space", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("sum:space", qName0.toString());
      assertEquals("sum", qName0.getPrefix());
      assertEquals("space", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("sum");
      assertNotNull(processingInstructionTest0);
      assertEquals("sum", processingInstructionTest0.getTarget());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNotNull(attributeContext0);
      assertEquals("sum", processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1514), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1514), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1514()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationLessThan0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      Step[] stepArray0 = new Step[7];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-921), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-921), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("\"Z?$}B3/h@Ko<_In=l", "\"Z?$}B3/h@Ko<_In=l");
      assertNotNull(qName0);
      assertEquals("\"Z?$}B3/h@Ko<_In=l", qName0.getPrefix());
      assertEquals("\"Z?$}B3/h@Ko<_In=l:\"Z?$}B3/h@Ko<_In=l", qName0.toString());
      assertEquals("\"Z?$}B3/h@Ko<_In=l", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("\"Z?$}B3/h@Ko<_In=l", qName0.getPrefix());
      assertEquals("\"Z?$}B3/h@Ko<_In=l:\"Z?$}B3/h@Ko<_In=l", qName0.toString());
      assertEquals("\"Z?$}B3/h@Ko<_In=l", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertNotNull(ancestorContext0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(101, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(101, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      
      NamespaceContext namespaceContext0 = new NamespaceContext(unionContext0, (NodeTest) null);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(namespaceContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      assertNotNull(nodeTypeTest0);
      assertEquals(41, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeTypeTest0);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(attributeContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      
      ParentContext parentContext0 = new ParentContext(attributeContext0, (NodeTest) null);
      assertEquals(4, evalContextArray0.length);
      assertNotNull(parentContext0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(41, nodeTypeTest0.getNodeType());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals(0, expressionArray0.length);
      assertEquals(3, evalContextArray0.length);
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("true");
      assertNotNull(qName0);
      assertEquals("true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("true", qName0.toString());
      assertEquals("true", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1429, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1429, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationMod0);
      assertNotNull(coreOperationMultiply0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(1811, expressionArray0);
      assertEquals(10, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1811, coreFunction0.getFunctionCode());
      assertEquals(10, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1811()(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2746), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2746), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals((-2746), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("zPhxS `)k8\"j(.v~|h", "zPhxS `)k8\"j(.v~|h");
      assertNotNull(qName0);
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getPrefix());
      assertEquals("zPhxS `)k8\"j(.v~|h:zPhxS `)k8\"j(.v~|h", qName0.toString());
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getName());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-2746), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getPrefix());
      assertEquals("zPhxS `)k8\"j(.v~|h:zPhxS `)k8\"j(.v~|h", qName0.toString());
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals((-2746), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getPrefix());
      assertEquals("zPhxS `)k8\"j(.v~|h:zPhxS `)k8\"j(.v~|h", qName0.toString());
      assertEquals("zPhxS `)k8\"j(.v~|h", qName0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(beanPointer0.isContainer());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertNotNull(processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(10, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertNotNull(nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      Object object0 = coreFunction0.functionString(descendantContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(descendantContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2856, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2856, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2856, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("translate");
      assertNotNull(qName0);
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("translate", qName0.toString());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(beanPointer0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2856, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("translate", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(2856, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("translate", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("translate", qName0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2856()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
      assertNotNull(nodeTypeTest0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertNotNull(attributeContext0);
      assertEquals(4, nodeTypeTest0.getNodeType());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("(LrX(Y#+7ev%=A!9C}c");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1458), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1458), coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(evalContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MAX_VALUE);
      assertNotNull(nodeTypeTest0);
      assertEquals(Integer.MAX_VALUE, nodeTypeTest0.getNodeType());
      
      Step step0 = new Step(1, nodeTypeTest0, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(Integer.MAX_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(1, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      assertTrue(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      assertNotNull(coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(11, coreFunction0.getFunctionCode());
      
      coreOperationSubtract0.args = expressionArray0;
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("^eHBybn4bCSkw*lW=", "^eHBybn4bCSkw*lW=");
      assertNotNull(qName0);
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getPrefix());
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getName());
      assertEquals("^eHBybn4bCSkw*lW=:^eHBybn4bCSkw*lW=", qName0.toString());
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[8];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(5, expressionArray1.length);
      assertNotNull(extensionFunction0);
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getPrefix());
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getName());
      assertEquals("^eHBybn4bCSkw*lW=:^eHBybn4bCSkw*lW=", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertEquals(1, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertEquals(8, stepArray0.length);
      assertNotNull(expressionPath0);
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getPrefix());
      assertEquals("^eHBybn4bCSkw*lW=", qName0.getName());
      assertEquals("^eHBybn4bCSkw*lW=:^eHBybn4bCSkw*lW=", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("", "");
      assertNotNull(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(33, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(33, coreFunction0.getFunctionCode());
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) integer0);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(",qa7{~WU!mnH~`f9ob>");
      assertNotNull(processingInstructionTest0);
      assertEquals(",qa7{~WU!mnH~`f9ob>", processingInstructionTest0.getTarget());
      
      ChildContext childContext0 = new ChildContext(initialContext0, processingInstructionTest0, true, true);
      assertNotNull(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(",qa7{~WU!mnH~`f9ob>", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(1689, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1689, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant((Number) null);
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationMod0, coreOperationMod0);
      assertNotNull(coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, constant0);
      assertNotNull(coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationSubtract0);
      assertNotNull(nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      expressionArray0[4] = (Expression) nameAttributeTest0;
      expressionArray0[5] = (Expression) coreOperationAdd0;
      expressionArray0[6] = (Expression) coreOperationAdd0;
      expressionArray0[7] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName((String) null, "5nNj~!'G>9(");
      assertNotNull(qName0);
      assertEquals("5nNj~!'G>9(", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("5nNj~!'G>9(", qName0.getName());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Jfm-{-7-rJO/6<");
      assertNotNull(nodeNameTest0);
      assertEquals("5nNj~!'G>9(", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("5nNj~!'G>9(", qName0.getName());
      assertEquals("5nNj~!'G>9(", nodeNameTest0.toString());
      assertEquals("Jfm-{-7-rJO/6<", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      Step step0 = new Step((-254), nodeNameTest0, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("5nNj~!'G>9(", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("5nNj~!'G>9(", qName0.getName());
      assertEquals("5nNj~!'G>9(", nodeNameTest0.toString());
      assertEquals("Jfm-{-7-rJO/6<", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-254), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(5, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-254), expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals((-254), coreFunction0.getFunctionCode());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertEquals("5nNj~!'G>9(", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("5nNj~!'G>9(", qName0.getName());
      assertEquals("5nNj~!'G>9(", nodeNameTest0.toString());
      assertEquals("Jfm-{-7-rJO/6<", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      
      // Undeclared exception!
      coreFunction0.functionCount(namespaceContext0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("G=sx");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("G=sx", qName0.getName());
      assertEquals("G=sx", qName0.toString());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("G=sx", qName0.getName());
      assertEquals("G=sx", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("G=sx", qName0.getName());
      assertEquals("G=sx", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1721), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1721), coreFunction0.getFunctionCode());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("G=sx", qName0.getName());
      assertEquals("G=sx", qName0.toString());
      assertEquals("G=sx", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertNotNull(ancestorContext0);
      assertNull(qName0.getPrefix());
      assertEquals("G=sx", qName0.getName());
      assertEquals("G=sx", qName0.toString());
      assertEquals("G=sx", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      assertNotNull(coreOperationNegate0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      QName qName0 = new QName(".0");
      assertNotNull(qName0);
      assertEquals(".0", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".0", qName0.getName());
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNotNull(variableReference0);
      assertEquals(".0", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals(".0", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[1]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[4]);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      
      expressionArray0[6] = (Expression) coreOperationAnd0;
      expressionArray0[7] = (Expression) coreFunction0;
      expressionArray0[8] = (Expression) coreOperationAnd0;
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(472, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(472, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction472()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("true");
      assertNotNull(processingInstructionTest0);
      assertEquals("true", processingInstructionTest0.getTarget());
      
      Step step0 = new Step((-95), processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("true", processingInstructionTest0.getTarget());
      assertEquals((-95), step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(8, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-95), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals((-95), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-3673), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-3673), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      assertNotNull(nodeTypeTest0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(21, nodeTypeTest0, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertEquals(21, step0.getAxis());
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      assertNotNull(childContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      
      DescendantContext descendantContext0 = new DescendantContext(childContext0, true, nodeTypeTest0);
      assertNotNull(descendantContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, nodeTypeTest0);
      assertNotNull(ancestorContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(evalContext0);
      assertEquals(21, nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((byte)13, expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-2095), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-2095), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName("");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, "", locale0);
      assertNotNull(beanPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2095()(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("unknownFunction", "unknownFunction");
      assertNotNull(qName0);
      assertEquals("unknownFunction:unknownFunction", qName0.toString());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("unknownFunction:unknownFunction", qName0.toString());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      assertEquals("unknownFunction:unknownFunction", qName0.toString());
      assertEquals("unknownFunction", qName0.getPrefix());
      assertEquals("unknownFunction", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1564), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("key", "");
      assertNotNull(qName0);
      assertEquals("key:", qName0.toString());
      assertEquals("key", qName0.getPrefix());
      assertEquals("", qName0.getName());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("key:", qName0.toString());
      assertEquals("key", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(651, expressionArray0);
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(651, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("true");
      assertNotNull(qName0);
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      assertEquals("true", qName0.getName());
      assertEquals("true", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      
      expressionArray0[5] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Ntz[,&@O/P");
      assertNotNull(processingInstructionTest0);
      assertEquals("Ntz[,&@O/P", processingInstructionTest0.getTarget());
      
      Step step0 = new Step(18, processingInstructionTest0, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      assertEquals("Ntz[,&@O/P", processingInstructionTest0.getTarget());
      assertEquals(18, step0.getAxis());
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      assertFalse(locationPath0.isAbsolute());
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-3673), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3673), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(3, expressionArray0.length);
      assertNull(object0);
      assertEquals((-3673), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      assertNotNull(nodeTypeTest0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(8, nodeTypeTest0.getNodeType());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      String string0 = coreFunction0.toString();
      assertEquals("string-length()", string0);
      assertNotNull(string0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-11), coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(2, expressionArray0.length);
      assertNull(expression0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-11), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(9, expressionArray0.length);
      assertNull(expression0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(34, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction1);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction1, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(predicateContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, (NodeTest) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(selfContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, (NodeTest) null, true);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      
      AttributeContext attributeContext0 = new AttributeContext(precedingOrFollowingContext0, (NodeTest) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(attributeContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      
      Object object0 = coreFunction1.functionSum(attributeContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(1, attributeContext0.getDocumentOrder());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      QName qName0 = new QName((String) null, "normalize-space");
      assertNotNull(qName0);
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext("normalize-space");
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      
      Double double0 = (Double)coreFunction0.functionNumber(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("normalize-space", qName0.toString());
      assertEquals("normalize-space", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("hn$");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-22), coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction1, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(predicateContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      
      Object object0 = coreFunction1.functionNot(predicateContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1534, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1534, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-254), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction1, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(predicateContext0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, (NodeTest) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(selfContext0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, (NodeTest) null, true);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object0 = coreFunction1.functionBoolean(precedingOrFollowingContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-254), coreFunction1.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("(LrX(Y#+7ev%=A!}c");
      assertNotNull(constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals("(LrX(Y#+7ev%=A!}c", object0);
      assertNotNull(object0);
      assertEquals(1534, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-41), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-41), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-3673), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3673), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3673), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals((-3673), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals((-3673), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-22), coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("substring-after");
      assertNotNull(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNotNull(nodeNameTest0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertEquals("substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertNotNull(namespaceContext0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertEquals("substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      assertNotNull(selfContext0);
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertEquals("substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.functionSubstringAfter(selfContext0);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertEquals("substring-after", qName0.getName());
      assertEquals("substring-after", qName0.toString());
      assertEquals("substring-after", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1564), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1564), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-1564), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-1564), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1564), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionContains((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals((-1564), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-11), coreFunction0.getFunctionCode());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-11), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-3673), expressionArray0);
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-3673), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-3673), expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3673), coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(2, expressionArray1.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-3673), coreFunction1.getFunctionCode());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      assertEquals(2, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals(2, expressionArray0.length);
      assertEquals("true", object0);
      assertNotNull(object0);
      assertEquals((-11), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("true");
      assertNotNull(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1534, coreFunction0.getFunctionCode());
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1534, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-22), coreFunction0.getFunctionCode());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction1, coreFunction1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(nameAttributeTest0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, nameAttributeTest0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(predicateContext0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      
      Object object0 = coreFunction1.functionLocalName(predicateContext0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-22), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertNotNull(coreFunction1);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      
      Object object0 = coreFunction1.functionNamespaceURI((EvalContext) null);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertEquals(1, expressionArray1.length);
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(95, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertEquals(0, expressionArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(8, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-921), expressionArray0);
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      assertEquals((-921), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("translate");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "translate");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(namespaceContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-22), expressionArray0);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(95, expressionArray1);
      assertEquals(95, coreFunction1.getFunctionCode());
      
      Object object0 = coreFunction1.functionCount((EvalContext) null);
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("ge(~w_Er#T^");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      Object object0 = coreFunction0.functionCount(ancestorContext0);
      assertEquals(1.0, object0);
      assertEquals(1534, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ParentContext parentContext0 = new ParentContext(initialContext0, nodeNameTest0);
      Double double0 = (Double)coreFunction0.functionLast(parentContext0);
      assertEquals(1, parentContext0.getPosition());
      assertEquals(0.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(2, initialContext0.getPosition());
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationGreaterThanOrEqual0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = new Double(0.0);
      Constant constant0 = new Constant(double0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(6, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(41, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(28, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((byte)24, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(24, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(23, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(20, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(17, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(14, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(14, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(11, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(10, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(9, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(7, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(3, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      assertEquals(1, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("position", "position");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(16, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((byte)24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("number", string0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("not(null, null, null, null, null, null)", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("concat", string0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      SelfContext selfContext0 = new SelfContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1));
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, (Expression) null);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, false, nodeTypeTest0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      Locale locale0 = Locale.ITALY;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd");
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationLessThan0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      assertEquals(28, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1534, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
      expressionArray0[0] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(723, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(723, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, false);
      coreFunction0.functionFalse(precedingOrFollowingContext0);
      assertEquals(8, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1458), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionID(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }
}
