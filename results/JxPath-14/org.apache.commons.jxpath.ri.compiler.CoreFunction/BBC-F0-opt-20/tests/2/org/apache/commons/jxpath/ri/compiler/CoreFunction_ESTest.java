/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 08:19:24 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.text.ParsePosition;
import java.util.Iterator;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Constant constant0 = new Constant("Y\u0013(mLye.");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertFalse(constant0.equals((Object)constant1));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant1, coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(constant0.equals((Object)constant1));
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1842), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-1842), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2065, expressionArray0);
      assertEquals(2065, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(21, expressionArray0);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(21, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("/'GO}z%3YB{s-|{");
      assertEquals("/'GO}z%3YB{s-|{", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("/'GO}z%3YB{s-|{", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring(namespaceContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Short short0 = new Short((short)4823);
      assertEquals((short)4823, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)4823, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4823, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((short)4823, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(4823, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(4823, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Short short0 = new Short((short)4823);
      assertEquals((short)4823, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)4823, expressionArray0);
      assertEquals(4823, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((short)4823, expressionArray0);
      assertEquals(4823, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(4823, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("4823", object0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("normqlize8space");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(65528, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(65528, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(65528, coreFunction0.getFunctionCode());
      assertEquals("normqrizq8mpocq", object0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals(40, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()('normqlize8space', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'normqlize8space')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Gs7DAFj\"7.~a");
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Gs7DAFj\"7.~a", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, false, nodeNameTest0);
      assertEquals("Gs7DAFj\"7.~a", qName0.toString());
      assertEquals("Gs7DAFj\"7.~a", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("Gs7DAFj\"7.~a", nodeNameTest0.toString());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Gs7DAFj\"7.~a
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Short short0 = new Short((short)0);
      assertEquals((short)0, (short)short0);
      assertNotNull(short0);
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(iterator0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((short)0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-974), expressionArray0);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-974), expressionArray0);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-974), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.computeValue((EvalContext) null);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNull(object1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object2 = coreFunction1.functionTranslate((EvalContext) null);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals("0", object2);
      assertNotNull(object2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Constant constant0 = new Constant("A");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-974), expressionArray0);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction((-974), expressionArray0);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-974), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Object object1 = coreFunction2.computeValue((EvalContext) null);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-974), coreFunction2.getFunctionCode());
      assertNull(object1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      Object object2 = coreFunction1.functionTranslate((EvalContext) null);
      assertEquals((-974), coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals("A", object2);
      assertNotNull(object2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Constant constant0 = new Constant("normqlize8space");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-551), expressionArray0);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("unknownFunction-551()", string0);
      assertNotNull(string0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-551), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("normqlize8space", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant("stringlegthstring-length");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("NaNNaN");
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "NaNNaN");
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.toString());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-1082), nodeNameTest0, expressionArray0);
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.toString());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals((-1082), step0.getAxis());
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.toString());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals(2, step1.getAxis());
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(4009, nodeNameTest0, expressionArray1);
      assertEquals("NaNNaN", qName0.toString());
      assertEquals("NaNNaN", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("NaNNaN", nodeNameTest0.toString());
      assertEquals("NaNNaN", nodeNameTest0.getNamespaceURI());
      assertEquals(4009, step2.getAxis());
      assertNotNull(step2);
      assertEquals(8, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[1], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, expressionArray1.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[2] = (Expression) expressionPath0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      expressionArray1[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(81, expressionArray1);
      assertEquals(81, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3308, expressionArray0);
      assertEquals(3308, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertEquals(3308, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreFunction0);
      assertEquals(3308, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, coreFunction0);
      assertEquals(3308, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationNotEqual0);
      assertEquals(3308, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant((String) null);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertFalse(constant1.equals((Object)constant0));
      
      Object object0 = coreOperationNegate0.computeValue((EvalContext) null);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(-0.0, object0);
      assertNotNull(object0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotSame(constant1, constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2398, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2398, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2398, coreFunction0.getFunctionCode());
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(3, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(92, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(92, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(92, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("ey");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("ey");
      assertEquals("ey", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("ey", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      Object object0 = coreFunction0.functionStringLength(namespaceContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals("ey", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(2.0, object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.compute((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals("ey", object2);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      assertFalse(object2.equals((Object)object1));
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("Tp$;K<=ZU]Aev]DU_");
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], variableReference0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[3]);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationAdd0, expressionArray0[1]);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertNotNull(nameAttributeTest1);
      assertEquals(8, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      
      expressionArray0[5] = (Expression) nameAttributeTest1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], extensionFunction0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(65536, expressionArray0);
      assertEquals(65536, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) nameAttributeTest0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(8, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertNotSame(nameAttributeTest0, nameAttributeTest1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreOperationLessThanOrEqual0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(8, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(nameAttributeTest0, nameAttributeTest1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer((QName) null, expressionArray0[4], locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertNotNull(beanPointer0);
      assertEquals(8, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, expressionArray0[4], beanPointer0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(8, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(rootContext0);
      assertEquals(8, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "<<unknown namespace>>");
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Tp$;K<=ZU]Aev]DU_", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext0, nodeNameTest0, true);
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.toString());
      assertEquals("Tp$;K<=ZU]Aev]DU_", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isCollection());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("<<unknown namespace>>", nodeNameTest0.getNamespaceURI());
      assertEquals("Tp$;K<=ZU]Aev]DU_", nodeNameTest0.toString());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      assertEquals(8, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      coreFunction0.functionTranslate(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("'null'", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(123, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(123, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(123, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals("0", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant constant0 = new Constant("_y");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      
      Object object0 = coreFunction0.functionConcat(childContext0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals("0", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(1204, expressionArray0);
      assertEquals(1204, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(1204, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction0.functionContains(childContext0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNull(qName0.toString());
      assertNull(nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(false, object1);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)boolean0));
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'null'", string0);
      assertNotNull(string0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Constant constant0 = new Constant("DynaProperty[name=");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-2853), nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals((-2853), step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(29, nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(29, step1.getAxis());
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(322, nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(322, step2.getAxis());
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2853), nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals((-2853), step3.getAxis());
      assertNotNull(step3);
      assertEquals(4, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step(29, nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(29, step4.getAxis());
      assertNotNull(step4);
      assertEquals(4, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      
      stepArray0[4] = step4;
      Step step5 = new Step(12, nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(12, step5.getAxis());
      assertNotNull(step5);
      assertEquals(4, expressionArray0.length);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      
      stepArray0[5] = step5;
      Step step6 = new Step(41, nodeTypeTest0, expressionArray0);
      assertEquals(41, step6.getAxis());
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(step6);
      assertEquals(4, expressionArray0.length);
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step1));
      
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2853), expressionArray0);
      assertEquals((-2853), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(322, expressionArray0);
      assertEquals(322, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)28;
      byteArray0[8] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(15, byteArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-12), expressionArray0);
      assertEquals((-12), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-12), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-12()('null', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant("=DzZ7jI");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction1 = new CoreFunction((-23), expressionArray1);
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals((-23), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNull(object0);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction0.computeValue((EvalContext) null);
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(object1);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object2 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("true", object2);
      assertNotNull(object2);
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("4%/", "~Jn98Sx8:0ac(d");
      assertEquals("4%/:~Jn98Sx8:0ac(d", qName0.toString());
      assertEquals("~Jn98Sx8:0ac(d", qName0.getName());
      assertEquals("4%/", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("4%/:~Jn98Sx8:0ac(d", qName0.toString());
      assertEquals("~Jn98Sx8:0ac(d", qName0.getName());
      assertEquals("4%/", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[4], coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationUnion0, coreOperationEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      
      expressionArray0[6] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      QName qName0 = new QName((String) null, (String) null);
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertNotNull(beanPointer0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl2, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      
      Object object0 = coreFunction0.functionName(rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(object0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals("number", string0);
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Constant constant0 = new Constant("ey");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      QName qName0 = new QName("ey");
      assertEquals("ey", qName0.getName());
      assertEquals("ey", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ey");
      assertEquals("ey", qName0.getName());
      assertEquals("ey", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("ey", nodeNameTest0.getNamespaceURI());
      assertEquals("ey", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep(nodeSetContext0, 1, nodeNameTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("ey", qName0.getName());
      assertEquals("ey", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("ey", nodeNameTest0.getNamespaceURI());
      assertEquals("ey", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertNotNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLang(evalContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(1, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("ey", qName0.getName());
      assertEquals("ey", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("ey", nodeNameTest0.getNamespaceURI());
      assertEquals("ey", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last('ey')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("starts-with");
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-2240), nodeNameTest0, expressionArray0);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-2240), step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      Step step1 = new Step(17, nodeNameTest0, expressionArray1);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(17, step1.getAxis());
      assertNotNull(step1);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2240), nodeNameTest0, expressionArray1);
      assertEquals((-2240), step2.getAxis());
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step2);
      assertEquals(4, expressionArray1.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(89, nodeNameTest0, expressionArray1);
      assertEquals(89, step3.getAxis());
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step3);
      assertEquals(4, expressionArray1.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(89, nodeNameTest0, expressionArray1);
      assertEquals(89, step4.getAxis());
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step4);
      assertEquals(4, expressionArray1.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2240), nodeNameTest0, expressionArray1);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals((-2240), step5.getAxis());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(step5);
      assertEquals(4, expressionArray1.length);
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[3] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(41, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertEquals("starts-with", qName0.getName());
      assertEquals("starts-with", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("starts-with", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      coreFunction0.functionName(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)12;
      byteArray0[0] = (byte)10;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte) (-71);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)28, (byte)12, (byte)0, (byte)0, (byte)28, (byte) (-71)}, byteArray0);
      assertFalse(boolean0);
      assertEquals(7, byteArray0.length);
      
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(2, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, expressionArray0[0]);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-55);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)109;
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)28;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-55), (byte)84, (byte)109, (byte) (-71), (byte)12, (byte)10, (byte)28, (byte)6, (byte)28}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(false, object1);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      assertTrue(object1.equals((Object)boolean0));
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()('null', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("a`gYX{");
      assertEquals("a`gYX{", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertEquals("a`gYX{", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      assertEquals("a`gYX{", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(selfContext0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Y/M{CV?b");
      assertNull(qName0.getPrefix());
      assertEquals("Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertNull(qName0.getPrefix());
      assertEquals("Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-998));
      assertEquals((-998), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      assertNull(qName0.getPrefix());
      assertEquals("Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals((-998), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Y/M{CV?b
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(105, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(105, step0.getAxis());
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(45, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(45, step1.getAxis());
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(105);
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step2 = new Step(1, nodeTypeTest0, expressionArray0);
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertEquals(1, step2.getAxis());
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(14, nodeTypeTest0, expressionArray0);
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertEquals(14, step3.getAxis());
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(1, nodeTypeTest0, expressionArray0);
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertEquals(1, step4.getAxis());
      assertNotNull(step4);
      assertEquals(6, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      
      stepArray0[4] = step4;
      Step step5 = new Step(45, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(45, step5.getAxis());
      assertNotNull(step5);
      assertEquals(6, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      
      stepArray0[5] = step5;
      Step step6 = new Step(719, nodeTypeTest0, expressionArray0);
      assertEquals(719, step6.getAxis());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(step6);
      assertEquals(6, expressionArray0.length);
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      
      stepArray0[6] = step6;
      Step step7 = new Step(719, nodeTypeTest0, expressionArray0);
      assertEquals(719, step7.getAxis());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(step7);
      assertEquals(6, expressionArray0.length);
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step3));
      
      stepArray0[7] = step7;
      Step step8 = new Step(14, nodeTypeTest0, expressionArray0);
      assertEquals(14, step8.getAxis());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(step8);
      assertEquals(6, expressionArray0.length);
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step2));
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("true");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      assertEquals(6, expressionArray0.length);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      assertEquals(9, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      
      expressionArray0[5] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      Step[] stepArray1 = new Step[2];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step7;
      stepArray1[1] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray1);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray1.length);
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      assertEquals(8, evalContextArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(unionContext0, basicNodeSet0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      assertEquals(8, evalContextArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, nodeTypeTest0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(ancestorContext0);
      assertEquals(8, evalContextArray0.length);
      
      ChildContext childContext0 = new ChildContext(ancestorContext0, processingInstructionTest0, true, true);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals("", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertNotNull(childContext0);
      assertEquals(8, evalContextArray0.length);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(childContext0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(105, nodeTypeTest0.getNodeType());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(1, childContext0.getDocumentOrder());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertNotNull(evalContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray1.length);
      assertEquals(8, evalContextArray0.length);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotSame(stepArray1, stepArray0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvalContext evalContext0 = null;
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThanOrEqual0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[4]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationNegate0;
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationGreaterThanOrEqual0.equals((Object)coreOperationGreaterThanOrEqual1));
      
      expressionArray0[7] = (Expression) coreOperationMod0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(584, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(584, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("Y/M{CV?b", "Y/M{CV?b");
      assertEquals("Y/M{CV?b", qName0.getPrefix());
      assertEquals("Y/M{CV?b:Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("Y/M{CV?b", qName0.getPrefix());
      assertEquals("Y/M{CV?b:Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("Y/M{CV?b", qName0.getPrefix());
      assertEquals("Y/M{CV?b:Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("Y/M{CV?b", qName0.getPrefix());
      assertEquals("Y/M{CV?b:Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      InitialContext initialContext0 = new InitialContext(evalContextArray0[0]);
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      assertEquals(6, evalContextArray0.length);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionTrue(initialContext0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(0, expressionArray0.length);
      assertEquals(6, evalContextArray0.length);
      
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals("Y/M{CV?b", qName0.getPrefix());
      assertEquals("Y/M{CV?b:Y/M{CV?b", qName0.toString());
      assertEquals("Y/M{CV?b", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      assertEquals(6, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("6}:)i=4", "6}:)i=4");
      assertEquals("6}:)i=4:6}:)i=4", qName0.toString());
      assertEquals("6}:)i=4", qName0.getPrefix());
      assertEquals("6}:)i=4", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("6}:)i=4:6}:)i=4", qName0.toString());
      assertEquals("6}:)i=4", qName0.getPrefix());
      assertEquals("6}:)i=4", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[0]);
      assertEquals("6}:)i=4:6}:)i=4", qName0.toString());
      assertEquals("6}:)i=4", qName0.getPrefix());
      assertEquals("6}:)i=4", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("6}:)i=4:6}:)i=4", qName0.toString());
      assertEquals("6}:)i=4", qName0.getPrefix());
      assertEquals("6}:)i=4", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], expressionArray0[2]);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1957));
      assertEquals((-1957), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      assertEquals((-1957), nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-975), expressionArray0);
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(true, object1);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-975()('ky', 'ky')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-975), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(true, object1);
      assertNotNull(object1);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-975()('ky', 'ky')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Constant constant0 = new Constant("_y");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'_y'", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-5394), expressionArray0);
      assertEquals((-5394), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      QName qName0 = new QName("k/");
      assertEquals("k/", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("k/", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "k/");
      assertEquals("k/", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("k/", qName0.getName());
      assertEquals("k/", nodeNameTest0.getNamespaceURI());
      assertEquals("k/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("k/", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("k/", qName0.getName());
      assertEquals("k/", nodeNameTest0.getNamespaceURI());
      assertEquals("k/", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("key");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, constant0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("key");
      assertEquals("key", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertEquals("key", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertNotNull(nullPointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("key", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("key", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("key", qName0.getName());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(nullPointer0.isLeaf());
      assertFalse(nullPointer0.isCollection());
      assertNull(nullPointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isRoot());
      assertEquals(0, nullPointer0.getLength());
      assertFalse(nullPointer0.isAttribute());
      assertTrue(nullPointer0.isNode());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      assertEquals(2, expressionArray0.length);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('ky', 'ky')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationMultiply0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationEqual0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[1]);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      QName qName0 = new QName("'U{N [_/3epL");
      assertNull(qName0.getPrefix());
      assertEquals("'U{N [_/3epL", qName0.getName());
      assertEquals("'U{N [_/3epL", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("'U{N [_/3epL", qName0.getName());
      assertEquals("'U{N [_/3epL", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[1]);
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertNotNull(coreOperationMultiply1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction0 = new CoreFunction((-2573), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-2573), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'U{N [_/3epL");
      assertEquals("'U{N [_/3epL", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-2573), processingInstructionTest0, expressionArray0);
      assertEquals("'U{N [_/3epL", processingInstructionTest0.getTarget());
      assertEquals((-2573), step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) extensionFunction0;
      Step step1 = new Step((-2573), processingInstructionTest0, expressionArray1);
      assertEquals("'U{N [_/3epL", processingInstructionTest0.getTarget());
      assertEquals((-2573), step1.getAxis());
      assertNotNull(step1);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertNotNull(evalContext0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, processingInstructionTest0);
      assertEquals("'U{N [_/3epL", processingInstructionTest0.getTarget());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      assertEquals(5, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      coreFunction0.functionLast(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("'ky'", string0);
      assertNotNull(string0);
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(expressionArray1, expressionArray0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('ky', 'ky')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-975), expressionArray1);
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction1 = new CoreFunction((-3035), expressionArray0);
      assertEquals((-3035), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.functionContains((EvalContext) null);
      assertEquals((-975), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction0, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      
      nameAttributeTest0.args = expressionArray0;
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      
      Integer integer0 = new Integer((-272));
      assertEquals((-272), (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationLessThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(5, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Constant constant0 = new Constant("=DzZ7jI");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual1;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationGreaterThanOrEqual1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals("falsefalsetrue", object0);
      assertNotNull(object0);
      assertEquals(3, expressionArray0.length);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(3, expressionArray0.length);
      assertFalse(object1.equals((Object)object0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant("ky");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("ky", "ky");
      assertEquals("ky", qName0.getPrefix());
      assertEquals("ky:ky", qName0.toString());
      assertEquals("ky", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("ky", qName0.getPrefix());
      assertEquals("ky:ky", qName0.toString());
      assertEquals("ky", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(7, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Constant constant0 = new Constant("=DzZ7jI");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-23), expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-23), coreFunction0.getFunctionCode());
      assertEquals("=DzZ7jI=DzZ7jIfalse=DzZ7jI=DzZ7jI=DzZ7jI", object0);
      assertNotNull(object0);
      assertEquals(6, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("<", "<");
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertNotNull(qName0);
      
      QName qName1 = new QName("<", "<");
      assertEquals("<:<", qName1.toString());
      assertEquals("<", qName1.getPrefix());
      assertEquals("<", qName1.getName());
      assertNotNull(qName1);
      assertTrue(qName1.equals((Object)qName0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName1);
      assertEquals("<:<", qName1.toString());
      assertEquals("<", qName1.getPrefix());
      assertEquals("<", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(qName1.equals((Object)qName0));
      assertNotSame(qName1, qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(qName0.equals((Object)qName1));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertEquals("<:<", qName1.toString());
      assertEquals("<", qName1.getPrefix());
      assertEquals("<", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(qName0.equals((Object)qName1));
      assertTrue(qName1.equals((Object)qName0));
      
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      SelfContext selfContext0 = new SelfContext(rootContext0, (NodeTest) null);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertEquals("<:<", qName1.toString());
      assertEquals("<", qName1.getPrefix());
      assertEquals("<", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(qName0.equals((Object)qName1));
      assertTrue(qName1.equals((Object)qName0));
      
      Double double0 = (Double)coreFunction0.functionLast(selfContext0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertEquals("<:<", qName1.toString());
      assertEquals("<", qName1.getPrefix());
      assertEquals("<", qName1.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(1, selfContext0.getPosition());
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(qName0.equals((Object)qName1));
      assertTrue(qName1.equals((Object)qName0));
      assertNotSame(qName0, qName1);
      assertNotSame(qName1, qName0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      assertEquals(39, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(1215, expressionArray0);
      assertEquals(1215, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.functionCount((EvalContext) null);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      Object object1 = coreFunction1.functionName((EvalContext) null);
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("K]`0a@yj.XeE", "K]`0a@yj.XeE");
      assertEquals("K]`0a@yj.XeE:K]`0a@yj.XeE", qName0.toString());
      assertEquals("K]`0a@yj.XeE", qName0.getName());
      assertEquals("K]`0a@yj.XeE", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("K]`0a@yj.XeE:K]`0a@yj.XeE", qName0.toString());
      assertEquals("K]`0a@yj.XeE", qName0.getName());
      assertEquals("K]`0a@yj.XeE", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], variableReference0);
      assertEquals("K]`0a@yj.XeE:K]`0a@yj.XeE", qName0.toString());
      assertEquals("K]`0a@yj.XeE", qName0.getName());
      assertEquals("K]`0a@yj.XeE", qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double(40);
      assertEquals(40.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(40, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(40, step0.getAxis());
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(19, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(19, step1.getAxis());
      assertNotNull(step1);
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(981, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(981, step2.getAxis());
      assertNotNull(step2);
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(32, step3.getAxis());
      assertNotNull(step3);
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[0]);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      ExpressionPath expressionPath1 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(expressionPath1);
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[4] = (Expression) expressionPath1;
      Step[] stepArray1 = new Step[8];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step3;
      stepArray1[1] = step0;
      stepArray1[2] = step0;
      stepArray1[3] = step0;
      stepArray1[4] = step3;
      stepArray1[5] = step1;
      stepArray1[6] = step2;
      stepArray1[7] = step2;
      ExpressionPath expressionPath2 = new ExpressionPath(constant0, expressionArray0, stepArray1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(expressionPath2);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, stepArray1.length);
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      expressionArray0[5] = (Expression) expressionPath2;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(ancestorContext0);
      
      EvalContext evalContext0 = expressionPath2.evalSteps(ancestorContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(evalContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, stepArray1.length);
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotSame(expressionPath2, expressionPath0);
      assertNotSame(expressionPath2, expressionPath1);
      assertNotSame(stepArray1, stepArray0);
      
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeTypeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      assertEquals(6, expressionArray0.length);
      assertEquals(8, stepArray1.length);
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("xmlns");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertNotNull(expression0);
      assertEquals(4, expressionArray0.length);
      assertSame(expression0, constant0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expression0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(expression0.isContextDependent());
      assertFalse(expression0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("C6F\"", "C6F\"");
      assertEquals("C6F\"", qName0.getName());
      assertEquals("C6F\"", qName0.getPrefix());
      assertEquals("C6F\":C6F\"", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "C6F\"");
      assertEquals("C6F\"", qName0.getName());
      assertEquals("C6F\"", qName0.getPrefix());
      assertEquals("C6F\":C6F\"", qName0.toString());
      assertEquals("C6F\"", nodeNameTest0.getNamespaceURI());
      assertEquals("C6F\":C6F\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(25, nodeNameTest0, expressionArray0);
      assertEquals("C6F\"", qName0.getName());
      assertEquals("C6F\"", qName0.getPrefix());
      assertEquals("C6F\":C6F\"", qName0.toString());
      assertEquals("C6F\"", nodeNameTest0.getNamespaceURI());
      assertEquals("C6F\":C6F\"", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(25, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertTrue(boolean0);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationUnion0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) jXPathContextReferenceImpl0, (Object) "xmlns");
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      Integer integer0 = new Integer(1715);
      assertEquals(1715, (int)integer0);
      assertNotNull(integer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl2 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl1, integer0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(jXPathContextReferenceImpl2);
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl2.getAbsoluteRootContext();
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(jXPathContextReferenceImpl2.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(initialContext0);
      assertEquals(4, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl2));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl2.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl2);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl2, jXPathContextReferenceImpl0);
      
      // Undeclared exception!
      coreFunction0.functionTrue(initialContext0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("<", "<");
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<:<", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<:<", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<:<", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction((-1997), expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1997), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<:<", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<:<", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      assertEquals(1, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("<", "<");
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("<", "<");
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getPrefix());
      assertEquals("<", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("<", "<");
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertEquals("<:<", qName0.toString());
      assertEquals("<", qName0.getName());
      assertEquals("<", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "|K{86(i|oJjjx-9");
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "not");
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertEquals("not", nodeNameTest0.getNamespaceURI());
      assertEquals(":|K{86(i|oJjjx-9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertEquals("not", nodeNameTest0.getNamespaceURI());
      assertEquals(":|K{86(i|oJjjx-9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertEquals("not", nodeNameTest0.getNamespaceURI());
      assertEquals(":|K{86(i|oJjjx-9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      Expression[] expressionArray0 = new Expression[3];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-5939), expressionArray0);
      assertEquals((-5939), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      assertEquals("|K{86(i|oJjjx-9", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":|K{86(i|oJjjx-9", qName0.toString());
      assertEquals("not", nodeNameTest0.getNamespaceURI());
      assertEquals(":|K{86(i|oJjjx-9", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(namespaceContext0.isChildOrderingRequired());
      assertEquals(1, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(2374, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2374, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 77;
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction0 = new CoreFunction(77, expressionArray0);
      assertEquals(77, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeNameTest0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) ancestorContext0;
      evalContextArray0[1] = (EvalContext) ancestorContext0;
      evalContextArray0[2] = (EvalContext) ancestorContext0;
      evalContextArray0[3] = (EvalContext) ancestorContext0;
      UnionContext unionContext0 = new UnionContext(ancestorContext0, evalContextArray0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      assertEquals(4, evalContextArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(4501, expressionArray0);
      assertEquals(4501, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(4501, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNull(expression0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = null;
      Expression expression1 = coreFunction0.getArg1();
      assertEquals(4501, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(expression1);
      assertEquals(5, expressionArray0.length);
      assertSame(expression1, expressionPath0);
      
      expressionArray0[2] = expression1;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationSubtract0, (Expression[]) null, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(expressionPath1);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(expressionPath1.equals((Object)expression1));
      
      expressionArray0[3] = (Expression) expressionPath1;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(4172, expressionArray0);
      assertEquals(4172, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      coreFunction1.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = 15;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v3\"SCW\"jTzbJp2Q$");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Step[] stepArray0 = new Step[1];
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v3\"SCW\"jTzbJp2Q$");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      NodeTest nodeTest0 = null;
      Step step0 = new Step(15, (NodeTest) null, (Expression[]) null);
      assertEquals(15, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      assertEquals(1, stepArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "N#=fprBY08");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, (Expression) null);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      Float float0 = new Float((float) 26);
      assertEquals(26.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest((Expression) null, expressionArray0[0]);
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertNotNull(nameAttributeTest1);
      assertEquals(9, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[1]);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(9, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, coreOperationDivide0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      expressionArray0[7] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, nameAttributeTest1);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(9, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(77, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(77, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(rootContext0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(77, coreFunction0.getFunctionCode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isActual());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(77, expressionArray0);
      assertEquals(77, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(14, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(3, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationNegate0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      ParentContext parentContext0 = new ParentContext(childContext0, nodeNameTest0);
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) parentContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals(0, childContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(unionContext0);
      assertEquals(3, evalContextArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionContains(unionContext0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1317), (Expression[]) null);
      assertEquals((-1317), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[oN6u4DOaNa'IF N}");
      assertEquals("[oN6u4DOaNa'IF N}", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertEquals("[oN6u4DOaNa'IF N}", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      assertEquals("[oN6u4DOaNa'IF N}", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertNotNull(selfContext0);
      
      NodePointer nodePointer0 = selfContext0.getCurrentNodePointer();
      assertEquals("[oN6u4DOaNa'IF N}", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getPosition());
      assertNull(nodePointer0);
      
      Object object0 = coreFunction0.functionLast(selfContext0);
      assertEquals((-1317), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("[oN6u4DOaNa'IF N}", processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, selfContext0.getDocumentOrder());
      assertTrue(selfContext0.isChildOrderingRequired());
      assertEquals(1, selfContext0.getPosition());
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.compute((EvalContext) null);
      assertEquals((-1317), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("key");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("key");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Iterator iterator0 = constant0.iterate((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(iterator0);
      
      expressionArray0[0] = (Expression) constant0;
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'key'", string0);
      assertNotNull(string0);
      
      CoreFunction coreFunction0 = new CoreFunction((-518), expressionArray0);
      assertEquals((-518), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionName((EvalContext) null);
      assertEquals((-518), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      assertFalse(object0.equals((Object)string0));
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals((-518), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(false, object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray0[0]);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], expressionArray0[2]);
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      
      expressionArray0[3] = (Expression) coreOperationNotEqual1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-567));
      assertEquals((-567), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1041), nodeTypeTest0, expressionArray0);
      assertEquals((-567), nodeTypeTest0.getNodeType());
      assertEquals((-1041), step0.getAxis());
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1041), nodeTypeTest0, expressionArray0);
      assertEquals((-567), nodeTypeTest0.getNodeType());
      assertEquals((-1041), step1.getAxis());
      assertNotNull(step1);
      assertEquals(8, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      
      expressionArray0[6] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      
      boolean boolean1 = expressionPath0.isSimpleExpressionPath();
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(boolean1);
      assertEquals(8, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertTrue(boolean1 == boolean0);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(736, expressionArray0);
      assertEquals(736, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      EvalContext evalContext0 = null;
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      String string0 = coreOperationSubtract0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: :
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      String string0 = "iW#v:";
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-852), expressionArray0);
      assertEquals((-852), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(";.e{g", "?R6;GoCa'1p");
      assertEquals(";.e{g:?R6;GoCa'1p", qName0.toString());
      assertEquals("?R6;GoCa'1p", qName0.getName());
      assertEquals(";.e{g", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(";.e{g:?R6;GoCa'1p", qName0.toString());
      assertEquals("?R6;GoCa'1p", qName0.getName());
      assertEquals(";.e{g", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(constant0, expressionArray0[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg1();
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      assertEquals(7, expressionArray0.length);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(7, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertNotNull(iterator0);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      coreFunction1.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("floor", "5QFHd3xRy|");
      assertEquals("5QFHd3xRy|", qName0.getName());
      assertEquals("floor:5QFHd3xRy|", qName0.toString());
      assertEquals("floor", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "5QFHd3xRy|");
      assertEquals("5QFHd3xRy|", qName0.getName());
      assertEquals("floor:5QFHd3xRy|", qName0.toString());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("5QFHd3xRy|", nodeNameTest0.getNamespaceURI());
      assertEquals("floor:5QFHd3xRy|", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("5QFHd3xRy|", qName0.getName());
      assertEquals("floor:5QFHd3xRy|", qName0.toString());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("5QFHd3xRy|", nodeNameTest0.getNamespaceURI());
      assertEquals("floor:5QFHd3xRy|", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      Object object0 = coreFunction0.computeValue(ancestorContext0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("5QFHd3xRy|", qName0.getName());
      assertEquals("floor:5QFHd3xRy|", qName0.toString());
      assertEquals("floor", qName0.getPrefix());
      assertEquals("5QFHd3xRy|", nodeNameTest0.getNamespaceURI());
      assertEquals("floor:5QFHd3xRy|", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction1);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(3, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction1, coreOperationNegate0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(3, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[2], expressionArray0[2]);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreOperationEqual coreOperationEqual2 = new CoreOperationEqual(locationPath1, expressionArray0[0]);
      assertFalse(locationPath1.isAbsolute());
      assertEquals("=", coreOperationEqual2.getSymbol());
      assertNotNull(coreOperationEqual2);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual0));
      assertFalse(coreOperationEqual2.equals((Object)coreOperationEqual1));
      
      expressionArray0[4] = (Expression) coreOperationEqual2;
      Short short0 = new Short((short) (-25));
      assertEquals((short) (-25), (short)short0);
      assertNotNull(short0);
      
      coreOperationEqual2.args = expressionArray0;
      assertFalse(locationPath1.isAbsolute());
      assertEquals("=", coreOperationEqual2.getSymbol());
      
      Constant constant0 = new Constant(short0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(expressionPath0);
      assertEquals(7, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(55, expressionArray0);
      assertEquals(55, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-10));
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(62, nodeTypeTest0, expressionArray0);
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertEquals(62, step0.getAxis());
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(62, nodeTypeTest0, expressionArray0);
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertEquals(62, step1.getAxis());
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-2017), nodeTypeTest0, expressionArray0);
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertEquals((-2017), step2.getAxis());
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      QName qName0 = new QName("key", "descendant::");
      assertEquals("descendant::", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("key:descendant::", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("descendant::", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("key:descendant::", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key:descendant::", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step3 = new Step(32, nodeNameTest0, expressionArray0);
      assertEquals("descendant::", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("key:descendant::", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key:descendant::", nodeNameTest0.toString());
      assertEquals(32, step3.getAxis());
      assertNotNull(step3);
      assertEquals(2, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step(3602, nodeNameTest0, expressionArray0);
      assertEquals(3602, step4.getAxis());
      assertEquals("descendant::", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("key:descendant::", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key:descendant::", nodeNameTest0.toString());
      assertNotNull(step4);
      assertEquals(2, expressionArray0.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      
      stepArray0[4] = step4;
      Step step5 = new Step(32, nodeNameTest0, expressionArray0);
      assertEquals(32, step5.getAxis());
      assertEquals("descendant::", qName0.getName());
      assertEquals("key", qName0.getPrefix());
      assertEquals("key:descendant::", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("key:descendant::", nodeNameTest0.toString());
      assertNotNull(step5);
      assertEquals(2, expressionArray0.length);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step2));
      
      stepArray0[5] = step5;
      Step step6 = new Step(3602, nodeTypeTest0, expressionArray0);
      assertEquals(3602, step6.getAxis());
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertNotNull(step6);
      assertEquals(2, expressionArray0.length);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      
      stepArray0[6] = step6;
      Step step7 = new Step(9, nodeTypeTest0, expressionArray0);
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertEquals(9, step7.getAxis());
      assertNotNull(step7);
      assertEquals(2, expressionArray0.length);
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step2));
      
      stepArray0[7] = step7;
      Step step8 = new Step(9, nodeTypeTest0, expressionArray0);
      assertEquals((-10), nodeTypeTest0.getNodeType());
      assertEquals(9, step8.getAxis());
      assertNotNull(step8);
      assertEquals(2, expressionArray0.length);
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(2, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(62, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(62, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      
      Object object1 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      
      Object object2 = coreFunction0.functionName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals("", object2);
      assertNotNull(object2);
      assertEquals(1, expressionArray0.length);
      
      Object object3 = coreFunction0.functionFloor((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(0.0, object3);
      assertNotNull(object3);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[1], expressionArray0[0]);
      assertEquals("div", coreOperationDivide1.getSymbol());
      assertNotNull(coreOperationDivide1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationDivide1.equals((Object)coreOperationDivide0));
      
      expressionArray0[3] = (Expression) coreOperationDivide1;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2351));
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(10, nodeTypeTest0, expressionArray0);
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertEquals(10, step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationDivide1;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[1], coreOperationDivide0);
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationMultiply1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      
      expressionArray1[1] = (Expression) coreOperationMultiply1;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[1], expressionArray1[2]);
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertNotNull(coreOperationLessThan1);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationLessThan1.equals((Object)coreOperationLessThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[3] = (Expression) coreOperationLessThan1;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationDivide0;
      expressionArray1[7] = (Expression) coreOperationLessThan0;
      expressionArray1[8] = (Expression) coreOperationAnd0;
      Step step1 = new Step(2522, nodeTypeTest0, expressionArray1);
      assertEquals(2522, step1.getAxis());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertNotNull(step1);
      assertEquals(9, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationMultiply1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationDivide0, expressionArray0[1]);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(coreOperationDivide0.equals((Object)coreOperationDivide1));
      
      expressionArray2[1] = (Expression) coreOperationSubtract0;
      Step step2 = new Step(2522, nodeTypeTest0, expressionArray2);
      assertEquals(2522, step2.getAxis());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      assertEquals(2, expressionArray2.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      Step step3 = new Step(25, nodeTypeTest0, (Expression[]) null);
      assertEquals(25, step3.getAxis());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertNotNull(step3);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(10, nodeTypeTest0, expressionArray0);
      assertEquals(10, step4.getAxis());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertNotNull(step4);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray1[2]);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertEquals(9, expressionArray1.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray2);
      assertNotSame(expressionArray1, expressionArray0);
      
      QName qName0 = new QName("YC #'");
      assertNull(qName0.getPrefix());
      assertEquals("YC #'", qName0.toString());
      assertEquals("YC #'", qName0.getName());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, step0);
      assertNull(qName0.getPrefix());
      assertEquals("YC #'", qName0.toString());
      assertEquals("YC #'", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertEquals(10, step0.getAxis());
      assertNotNull(beanPointer0);
      assertEquals(5, expressionArray0.length);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step4));
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(expressionArray0, expressionArray2);
      assertNotSame(step0, step1);
      assertNotSame(step0, step2);
      assertNotSame(step0, step3);
      assertNotSame(step0, step4);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("YC #'", qName0.toString());
      assertEquals("YC #'", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(10, step0.getAxis());
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("YC #'", qName0.toString());
      assertEquals("YC #'", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(10, step0.getAxis());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertEquals(5, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, expressionPath0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("YC #'", qName0.toString());
      assertEquals("YC #'", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isContainer());
      assertEquals((-2351), nodeTypeTest0.getNodeType());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(10, step0.getAxis());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertNotNull(predicateContext0);
      assertEquals(5, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertEquals(9, expressionArray1.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(step0.equals((Object)step1));
      assertFalse(step0.equals((Object)step2));
      assertFalse(step0.equals((Object)step3));
      assertFalse(step0.equals((Object)step4));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      coreFunction0.functionBoolean(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertNull(object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Constant constant0 = new Constant("/(cI%!^zdF]K,t%");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, (Step[]) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(expressionPath1);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNull(expression0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = null;
      ExpressionPath expressionPath2 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      assertNotNull(expressionPath2);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionPath2.equals((Object)expressionPath0));
      assertFalse(expressionPath2.equals((Object)expressionPath1));
      
      expressionArray0[3] = (Expression) expressionPath2;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expression0, expressionArray0[0]);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[5] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, expressionArray0[0]);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Expression[] expressionArray1 = new Expression[7];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[3] = null;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) expressionPath2;
      expressionArray1[6] = (Expression) expressionPath2;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[7] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ':'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("translate", "oZ#hEroVI-`XD");
      assertEquals("oZ#hEroVI-`XD", qName0.getName());
      assertEquals("translate", qName0.getPrefix());
      assertEquals("translate:oZ#hEroVI-`XD", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("oZ#hEroVI-`XD", qName0.getName());
      assertEquals("translate", qName0.getPrefix());
      assertEquals("translate:oZ#hEroVI-`XD", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("oZ#hEroVI-`XD", qName0.getName());
      assertEquals("translate", qName0.getPrefix());
      assertEquals("translate:oZ#hEroVI-`XD", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(1588, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(1588, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(1588, coreFunction0.getFunctionCode());
      assertTrue(expression0.computeContextDependent());
      assertNotNull(expression0);
      assertEquals(9, expressionArray0.length);
      assertSame(expression0, extensionFunction0);
      
      expressionArray0[3] = expression0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = (CoreOperationLessThanOrEqual)coreFunction0.getArg2();
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(1588, coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(9, expressionArray0.length);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction((-1967), expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals((-1967), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction((-93), expressionArray0);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals((-93), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      coreFunction2.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("-2472", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "L$Sr\"e6T.g");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(268435456, (NodeTest) null, expressionArray0);
      assertEquals(268435456, step0.getAxis());
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(41, (NodeTest) null, expressionArray0);
      assertEquals(41, step1.getAxis());
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-575), (NodeTest) null, expressionArray0);
      assertEquals((-575), step2.getAxis());
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(21, (NodeTest) null, expressionArray0);
      assertEquals(21, step3.getAxis());
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      
      stepArray0[3] = step3;
      Step step4 = new Step(1227, (NodeTest) null, expressionArray0);
      assertEquals(1227, step4.getAxis());
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      
      stepArray0[4] = step4;
      Step step5 = new Step(37, (NodeTest) null, expressionArray0);
      assertEquals(37, step5.getAxis());
      assertNotNull(step5);
      assertEquals(1, expressionArray0.length);
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(6, stepArray0.length);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(268435456, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(268435456, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      boolean boolean1 = expressionPath0.isSimpleExpressionPath();
      assertFalse(locationPath0.isAbsolute());
      assertFalse(boolean1);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = step4.isContextDependent();
      assertEquals(1227, step4.getAxis());
      assertTrue(boolean2);
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step5));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertNotSame(step4, step0);
      assertNotSame(step4, step5);
      assertNotSame(step4, step2);
      assertNotSame(step4, step1);
      assertNotSame(step4, step3);
      
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      assertFalse(evalContext0.isChildOrderingRequired());
      assertEquals(0, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"descendant-or-self::\"");
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1169, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1169, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1169, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(17, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(17, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertFalse(boolean1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName((String) null, "B`]B>");
      assertEquals("B`]B>", qName0.getName());
      assertEquals("B`]B>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("B`]B>", qName0.getName());
      assertEquals("B`]B>", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(336, expressionArray0);
      assertEquals(336, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-591), expressionArray0);
      assertEquals((-591), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      Iterator iterator0 = coreFunction0.iteratePointers(predicateContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals((-591), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(predicateContext0.isChildOrderingRequired());
      assertEquals(1, predicateContext0.getDocumentOrder());
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1146), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-1146), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(2, (Expression[]) null);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      EvalContext evalContext0 = null;
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertNotNull(predicateContext0);
      
      // Undeclared exception!
      try { 
        predicateContext0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1596));
      assertEquals((-1596), (int)integer0);
      assertNotNull(integer0);
      
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(0, stepArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNull(expression0);
      assertEquals(3, expressionArray0.length);
      
      boolean boolean1 = locationPath0.computeContextDependent();
      assertFalse(locationPath0.isAbsolute());
      assertTrue(boolean1);
      assertEquals(0, stepArray0.length);
      assertFalse(boolean1 == boolean0);
      
      expressionArray0[1] = null;
      Constant constant0 = new Constant("after: '");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(3, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(3, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationSubtract0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathAbstractFactoryException");
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-3), nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", nodeNameTest0.toString());
      assertEquals((-3), step0.getAxis());
      assertNotNull(step0);
      assertEquals(3, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(3042, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", nodeNameTest0.toString());
      assertEquals(3042, step1.getAxis());
      assertNotNull(step1);
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3), nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.getName());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("org.apache.commons.jxpath.JXPathAbstractFactoryException", nodeNameTest0.toString());
      assertEquals((-3), step2.getAxis());
      assertNotNull(step2);
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[2] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction1.getArgumentCount();
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(3, int0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(2117, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2117, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, (QName) null);
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      UnionContext unionContext0 = new UnionContext(rootContext0, (EvalContext[]) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      coreFunction0.functionID(unionContext0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-492), (Expression[]) null);
      assertEquals((-492), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(24, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(24, coreFunction2.getFunctionCode());
      assertFalse(boolean0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction((-1), (Expression[]) null);
      assertEquals((-1), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      
      String string0 = "";
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2472));
      assertEquals((-2472L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("namespace-uri", "namespace-uri");
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      String string0 = coreFunction1.getFunctionName();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals("count", string0);
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(147);
      assertEquals(147, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      ParentContext parentContext0 = new ParentContext(rootContext0, nodeTypeTest0);
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(147, nodeTypeTest0.getNodeType());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(parentContext0);
      assertEquals("namespace-uri:namespace-uri", qName0.toString());
      assertEquals("namespace-uri", qName0.getPrefix());
      assertEquals("namespace-uri", qName0.getName());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(147, nodeTypeTest0.getNodeType());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(false, object0);
      assertNotNull(object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-3197), (Expression[]) null);
      assertEquals((-3197), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(11, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(11, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(11, coreFunction2.getFunctionCode());
      assertFalse(boolean0);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, coreOperationSubtract0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, coreOperationEqual0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("0a\"+$Gd8H:[.y;vJrA", "0a\"+$Gd8H:[.y;vJrA");
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getPrefix());
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getName());
      assertEquals("0a\"+$Gd8H:[.y;vJrA:0a\"+$Gd8H:[.y;vJrA", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getPrefix());
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getName());
      assertEquals("0a\"+$Gd8H:[.y;vJrA:0a\"+$Gd8H:[.y;vJrA", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(26);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(37, nodeTypeTest0, expressionArray0);
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertEquals(37, step0.getAxis());
      assertNotNull(step0);
      assertEquals(7, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeTypeTest0, expressionArray0);
      assertEquals(40, step1.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step1);
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(3082, nodeTypeTest0, expressionArray0);
      assertEquals(3082, step2.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(3082, nodeTypeTest0, expressionArray0);
      assertEquals(3082, step3.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step3);
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeTypeTest0, expressionArray0);
      assertEquals(40, step4.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step4);
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      
      stepArray0[4] = step4;
      Step step5 = new Step(512, nodeTypeTest0, expressionArray0);
      assertEquals(512, step5.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step5);
      assertEquals(7, expressionArray0.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      
      stepArray0[5] = step5;
      Step step6 = new Step(26, nodeTypeTest0, expressionArray0);
      assertEquals(26, step6.getAxis());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(step6);
      assertEquals(7, expressionArray0.length);
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(7, stepArray0.length);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], extensionFunction0);
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getPrefix());
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getName());
      assertEquals("0a\"+$Gd8H:[.y;vJrA:0a\"+$Gd8H:[.y;vJrA", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(7, expressionArray0.length);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationNotEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getPrefix());
      assertEquals("0a\"+$Gd8H:[.y;vJrA", qName0.getName());
      assertEquals("0a\"+$Gd8H:[.y;vJrA:0a\"+$Gd8H:[.y;vJrA", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(locationPath0, expressionArray0[3]);
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(coreOperationSubtract1);
      assertEquals(7, expressionArray0.length);
      assertEquals(7, stepArray0.length);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction((-1421), expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-1421), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(attributeContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "B'(Vyt|>Yh_");
      assertEquals("B'(Vyt|>Yh_", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, true, nodeNameTest0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals("B'(Vyt|>Yh_", nodeNameTest0.getNamespaceURI());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(26, nodeTypeTest0.getNodeType());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      coreFunction0.functionStartsWith(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(1, expressionArray0.length);
      
      coreOperationDivide0.args = expressionArray0;
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      coreOperationDivide0.args = expressionArray0;
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(65536, expressionArray0);
      assertEquals(65536, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationDivide0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertNotNull(predicateContext0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("oPxQ8.", "oPxQ8.");
      assertEquals("oPxQ8.", qName0.getPrefix());
      assertEquals("oPxQ8.:oPxQ8.", qName0.toString());
      assertEquals("oPxQ8.", qName0.getName());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(4096, expressionArray0);
      assertEquals(4096, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Integer integer0 = new Integer((-1883));
      assertEquals((-1883), (int)integer0);
      assertNotNull(integer0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean1 = coreOperationEqual0.computeContextDependent();
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationEqual0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationMod0, expressionArray0[0]);
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertNotNull(coreOperationGreaterThan1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[5] = (Expression) coreOperationEqual0;
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], expressionArray0[4]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationSubtract0;
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean2 = coreFunction1.isContextDependent();
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertFalse(boolean2);
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, int0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("I(W!", "I(W!");
      assertEquals("I(W!", qName0.getPrefix());
      assertEquals("I(W!", qName0.getName());
      assertEquals("I(W!:I(W!", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("I(W!", qName0.getPrefix());
      assertEquals("I(W!", qName0.getName());
      assertEquals("I(W!:I(W!", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      Double double0 = new Double(3039.04827957933);
      assertEquals(3039.04827957933, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, constant0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreOperationNotEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertNotNull(coreOperationNotEqual1);
      assertFalse(coreOperationNotEqual1.equals((Object)coreOperationNotEqual0));
      
      expressionArray0[4] = (Expression) coreOperationNotEqual1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], coreOperationMultiply0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(8, expressionArray0.length);
      assertFalse(coreOperationNotEqual0.equals((Object)coreOperationNotEqual1));
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      VariableReference variableReference1 = new VariableReference(qName0);
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertEquals("I(W!", qName0.getPrefix());
      assertEquals("I(W!", qName0.getName());
      assertEquals("I(W!:I(W!", qName0.toString());
      assertNotNull(variableReference1);
      assertFalse(variableReference1.equals((Object)variableReference0));
      
      expressionArray0[6] = (Expression) variableReference1;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(12);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(12, nodeTypeTest0, expressionArray0);
      assertEquals(12, nodeTypeTest0.getNodeType());
      assertEquals(12, step0.getAxis());
      assertNotNull(step0);
      assertEquals(8, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[7] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationAnd coreOperationAnd1 = (CoreOperationAnd)coreFunction0.getArg1();
      assertEquals(41, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("and", coreOperationAnd1.getSymbol());
      assertNotNull(coreOperationAnd1);
      assertEquals(5, expressionArray0.length);
      assertSame(coreOperationAnd1, coreOperationAnd0);
      
      expressionArray0[2] = (Expression) coreOperationAnd1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, expressionArray0[0]);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[3] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("unknownFunction");
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      assertEquals("unknownFunction", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("unknownFunction", qName0.toString());
      assertEquals("unknownFunction", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction1 = new CoreFunction(41, expressionArray0);
      assertEquals(41, coreFunction1.getFunctionCode());
      assertEquals(5, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction1.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(4, expressionArray0.length);
      
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(6, nodeTypeTest0, expressionArray0);
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertEquals(6, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationUnion0, expressionArray0, stepArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, expressionPath0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(4, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationAdd0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      expressionArray0[3] = (Expression) expressionPath1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2237, expressionArray0);
      assertEquals(2237, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(4, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationLessThanOrEqual0, expressionPath0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(expressionPath0.equals((Object)expressionPath1));
      
      CoreFunction coreFunction2 = new CoreFunction(2237, expressionArray0);
      assertEquals(2237, coreFunction2.getFunctionCode());
      assertEquals(4, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertEquals(7, nodeTypeTest0.getNodeType());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.compute(selfContext0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      QName qName0 = new QName("erLkl44f=/;", "erLkl44f=/;");
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, variableReference0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, coreOperationNegate0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationEqual0);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertNotNull(coreOperationNegate1);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      boolean boolean1 = coreOperationEqual0.computeContextDependent();
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationNegate1);
      assertEquals("erLkl44f=/;:erLkl44f=/;", qName0.toString());
      assertEquals("erLkl44f=/;", qName0.getPrefix());
      assertEquals("erLkl44f=/;", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName(")7wt ,k-u*b_e@");
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertEquals(")7wt ,k-u*b_e@", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(117, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertEquals(")7wt ,k-u*b_e@", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(117, step0.getAxis());
      assertNotNull(step0);
      assertEquals(9, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(117, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertEquals(")7wt ,k-u*b_e@", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(117, step1.getAxis());
      assertNotNull(step1);
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(117, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertEquals(")7wt ,k-u*b_e@", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(117, step2.getAxis());
      assertNotNull(step2);
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertNull(qName0.getPrefix());
      assertEquals(")7wt ,k-u*b_e@", qName0.getName());
      assertEquals(")7wt ,k-u*b_e@", qName0.toString());
      assertNotNull(extensionFunction0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[4]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(9, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionPath0, coreOperationGreaterThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationSubtract1.getSymbol());
      assertNotNull(coreOperationSubtract1);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(coreOperationSubtract1.equals((Object)coreOperationSubtract0));
      
      expressionArray0[6] = (Expression) coreOperationSubtract1;
      ExpressionPath expressionPath1 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertNotNull(expressionPath1);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[4], expressionPath1);
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[6], expressionPath1);
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual1);
      assertEquals(9, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      assertEquals(117, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(9, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionNull((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(30, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreFunction coreFunction0 = new CoreFunction((-4553), (Expression[]) null);
      assertEquals((-4553), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals((-4553), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNull(object0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion1;
      expressionArray1[1] = (Expression) coreOperationUnion1;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(0, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)109;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)103, (byte)109}, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(nameAttributeTest0, nameAttributeTest0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("", (String) null);
      assertEquals("", qName0.getPrefix());
      assertNull(qName0.getName());
      assertEquals(":null", qName0.toString());
      assertNotNull(qName0);
      
      int int0 = 9;
      int int1 = 12;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-2472);
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-4L));
      assertEquals((-4L), (long)long0);
      assertNotNull(long0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      assertEquals(0, unionContext0.getPosition());
      assertNotNull(unionContext0);
      
      QName qName0 = new QName("mYE*izqG>sj", "mYE*izqG>sj");
      assertEquals("mYE*izqG>sj:mYE*izqG>sj", qName0.toString());
      assertEquals("mYE*izqG>sj", qName0.getPrefix());
      assertEquals("mYE*izqG>sj", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "mYE*izqG>sj");
      assertEquals("mYE*izqG>sj:mYE*izqG>sj", qName0.toString());
      assertEquals("mYE*izqG>sj", qName0.getPrefix());
      assertEquals("mYE*izqG>sj", qName0.getName());
      assertEquals("mYE*izqG>sj", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("mYE*izqG>sj:mYE*izqG>sj", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      ParentContext parentContext0 = new ParentContext(unionContext0, nodeNameTest0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals("mYE*izqG>sj:mYE*izqG>sj", qName0.toString());
      assertEquals("mYE*izqG>sj", qName0.getPrefix());
      assertEquals("mYE*izqG>sj", qName0.getName());
      assertEquals("mYE*izqG>sj", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("mYE*izqG>sj:mYE*izqG>sj", nodeNameTest0.toString());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName(parentContext0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-4L));
      assertEquals((-4L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("{f}", "");
      assertEquals("{f}:", qName0.toString());
      assertEquals("{f}", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      int int0 = 9;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("k|x3");
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Constant constant0 = new Constant("k|x3");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, constant0);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      assertEquals(6, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[1] = (Expression) extensionFunction1;
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction2.computeContextDependent());
      assertNotNull(extensionFunction2);
      assertEquals(6, expressionArray0.length);
      assertFalse(extensionFunction2.equals((Object)extensionFunction0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction1));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, extensionFunction2);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertTrue(extensionFunction2.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      assertFalse(extensionFunction2.equals((Object)extensionFunction0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction1));
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction1);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      assertFalse(extensionFunction0.equals((Object)extensionFunction2));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction2));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      boolean boolean3 = extensionFunction1.isContextDependent();
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertTrue(boolean3);
      assertEquals(6, expressionArray0.length);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(extensionFunction1.equals((Object)extensionFunction2));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotSame(extensionFunction1, extensionFunction2);
      assertNotSame(extensionFunction1, extensionFunction0);
      
      boolean boolean4 = coreOperationNotEqual0.isContextDependent();
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertTrue(extensionFunction1.computeContextDependent());
      assertTrue(boolean4);
      assertEquals(6, expressionArray0.length);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(extensionFunction0.equals((Object)extensionFunction2));
      assertFalse(extensionFunction0.equals((Object)extensionFunction1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction2));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotSame(extensionFunction0, extensionFunction2);
      assertNotSame(extensionFunction0, extensionFunction1);
      assertNotSame(extensionFunction1, extensionFunction2);
      assertNotSame(extensionFunction1, extensionFunction0);
      
      boolean boolean5 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      
      boolean boolean6 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, extensionFunction2);
      assertNull(qName0.getPrefix());
      assertEquals("k|x3", qName0.toString());
      assertEquals("k|x3", qName0.getName());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(extensionFunction2.computeContextDependent());
      assertNotNull(coreOperationLessThan0);
      assertEquals(6, expressionArray0.length);
      assertFalse(extensionFunction2.equals((Object)extensionFunction0));
      assertFalse(extensionFunction2.equals((Object)extensionFunction1));
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, int0);
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      Integer integer0 = new Integer(26);
      assertEquals(26, (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, (Expression[]) null);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray1[1] = (Expression) extensionFunction1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(10, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray1[2] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[3] = (Expression) constant0;
      String string0 = extensionFunction1.toString();
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(":()", string0);
      assertNotNull(string0);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotSame(extensionFunction1, extensionFunction0);
      
      CoreFunction coreFunction0 = new CoreFunction((-10), expressionArray0);
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(10, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals((-10), coreFunction0.getFunctionCode());
      assertNull(expression0);
      assertEquals(10, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotSame(expressionArray0, expressionArray1);
      
      expressionArray1[4] = null;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, expressionArray1[2]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(10, expressionArray0.length);
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction1 = new CoreFunction(644, expressionArray1);
      assertEquals(644, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction2 = new CoreFunction((-10), expressionArray0);
      assertEquals(10, coreFunction2.getArgumentCount());
      assertEquals((-10), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(10, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreFunction2;
      expressionArray2[1] = (Expression) extensionFunction1;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) extensionFunction1;
      expressionArray2[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction3 = new CoreFunction(14, expressionArray2);
      assertEquals(5, coreFunction3.getArgumentCount());
      assertEquals(14, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      assertEquals(5, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction3.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = (-2472);
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-4L));
      assertEquals((-4L), (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("{f}", "");
      assertEquals("", qName0.getName());
      assertEquals("{f}", qName0.getPrefix());
      assertEquals("{f}:", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      QName qName1 = new QName("", "");
      assertEquals("", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertEquals(":", qName1.toString());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(true, object0);
      assertNotNull(object0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      EvalContext evalContext0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, (Step[]) null);
      assertEquals(30, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(expressionPath0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, expressionArray0[0]);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1717, expressionArray0);
      assertEquals(1717, coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertNull(processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('null')", string0);
      assertNotNull(string0);
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreOperationAnd0;
      expressionArray0[2] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1493), expressionArray0);
      assertEquals((-1493), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray0[0]);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(1, expressionArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertNull(processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('null')", string0);
      assertNotNull(string0);
      
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      ParentContext parentContext0 = new ParentContext(attributeContext0, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, true, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(860, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(860, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.computeValue(parentContext0);
      assertEquals((-1493), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object1 = coreFunction0.functionSum(descendantContext0);
      assertEquals((-1493), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0.0, object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      Object object2 = coreFunction1.compute(parentContext0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(860, coreFunction1.getFunctionCode());
      assertNull(object2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      QName qName0 = new QName("-jyK_|C!XA(Cmri");
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) extensionFunction0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-20), expressionArray0);
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(1, step0.getAxis());
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-312), nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals((-312), step1.getAxis());
      assertNotNull(step1);
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(1, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(1, step2.getAxis());
      assertNotNull(step2);
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(3, stepArray0.length);
      
      expressionArray0[0] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      assertTrue(locationPath1.isAbsolute());
      assertNotNull(locationPath1);
      assertEquals(3, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      
      expressionArray0[1] = (Expression) locationPath1;
      CoreFunction coreFunction0 = new CoreFunction((-312), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals((-312), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      coreOperationSubtract0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("number");
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(rootContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean1);
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Long long0 = new Long(2640L);
      assertEquals(2640L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      expressionArray0[1] = (Expression) constant0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(0, stepArray0.length);
      
      expressionArray0[2] = (Expression) expressionPath0;
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("')Sn=LWC0rTV-EI\",");
      assertEquals("')Sn=LWC0rTV-EI\",", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertEquals("')Sn=LWC0rTV-EI\",", processingInstructionTest0.getTarget());
      assertNotNull(childContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) childContext0);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("')Sn=LWC0rTV-EI\",", processingInstructionTest0.getTarget());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName((String) null, "')Sn=LWC0rTV-EI\",");
      assertNull(qName0.getPrefix());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.toString());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.toString());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer("ik2p}!{wmsAlq");
      assertNull(qName0.getPrefix());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.toString());
      assertEquals("')Sn=LWC0rTV-EI\",", qName0.getName());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, expressionArray0[2], (Pointer) null);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("')Sn=LWC0rTV-EI\",", processingInstructionTest0.getTarget());
      assertNotNull(jXPathContextReferenceImpl1);
      assertEquals(6, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals("')Sn=LWC0rTV-EI\",", processingInstructionTest0.getTarget());
      assertNotNull(rootContext0);
      assertEquals(6, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      coreFunction0.functionNot(rootContext0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("number", "number");
      assertEquals("number", qName0.getPrefix());
      assertEquals("number:number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNotNull(qName0);
      
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(iterator0);
      assertEquals(1, expressionArray0.length);
      
      Double double0 = (Double)coreFunction0.functionCount((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      QName qName0 = new QName("-jyK_|C!XA(Cmri");
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationEqual0;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      assertEquals(23, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 = org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.NodeTest");
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertNotNull(expression0);
      assertEquals(6, expressionArray0.length);
      assertSame(expression0, variableReference0);
      
      expressionArray0[2] = expression0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expression0, expression0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.NodeTest");
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(11, processingInstructionTest0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", processingInstructionTest0.getTarget());
      assertEquals(11, step0.getAxis());
      assertNotNull(step0);
      assertEquals(6, expressionArray0.length);
      
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", qName0.toString());
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[1] = (Expression) extensionFunction0;
      Step step1 = new Step(22, processingInstructionTest0, expressionArray1);
      assertEquals(22, step1.getAxis());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", processingInstructionTest0.getTarget());
      assertNotNull(step1);
      assertEquals(2, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step1;
      Expression[] expressionArray2 = new Expression[2];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) variableReference0;
      expressionArray2[1] = (Expression) coreOperationLessThan0;
      Step step2 = new Step(22, processingInstructionTest0, expressionArray2);
      assertEquals(22, step2.getAxis());
      assertEquals("org.apache.commons.jxpath.ri.compiler.NodeTest", processingInstructionTest0.getTarget());
      assertNotNull(step2);
      assertEquals(2, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(6, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[4], coreOperationLessThanOrEqual0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      expressionArray0[5] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(22, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, (Step[]) null);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(expressionPath0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[0] = (Expression) expressionPath0;
      QName qName0 = new QName("");
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      Float float0 = new Float(213.43491214);
      assertEquals(213.4349F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, locationPath0);
      assertFalse(locationPath0.isAbsolute());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[6] = (Expression) constant1;
      boolean boolean1 = coreOperationMod0.isContextDependent();
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertTrue(boolean1);
      assertEquals(8, expressionArray0.length);
      assertFalse(boolean1 == boolean0);
      
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction((-3295), expressionArray0);
      assertEquals((-3295), coreFunction0.getFunctionCode());
      assertEquals(8, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("k5");
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(26, processingInstructionTest0, (Expression[]) null);
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertEquals(26, step0.getAxis());
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      Step step1 = new Step(38, processingInstructionTest0, (Expression[]) null);
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertEquals(38, step1.getAxis());
      assertNotNull(step1);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[2] = step1;
      Step step2 = new Step(256, processingInstructionTest0, (Expression[]) null);
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertEquals(256, step2.getAxis());
      assertNotNull(step2);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[3] = step2;
      Step step3 = new Step(256, processingInstructionTest0, (Expression[]) null);
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertEquals(256, step3.getAxis());
      assertNotNull(step3);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[4] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(expressionPath0);
      assertEquals(5, stepArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("k5", processingInstructionTest0.getTarget());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      QName qName0 = new QName("YbXwfyYvgl[Ngde}");
      assertEquals("YbXwfyYvgl[Ngde}", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("YbXwfyYvgl[Ngde}", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "YbXwfyYvgl[Ngde}");
      assertEquals("YbXwfyYvgl[Ngde}", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("YbXwfyYvgl[Ngde}", qName0.getName());
      assertEquals("YbXwfyYvgl[Ngde}", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("YbXwfyYvgl[Ngde}", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      // Undeclared exception!
      try { 
        ancestorContext0.getJXPathContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-1220), expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1220), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName((String) null, "number");
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      NodePointer nodePointer0 = variablePointer0.namespacePointer((String) null);
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(variablePointer0.isActual());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertNull(nodePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionNot(rootContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("org.apache.commons.jxpath.JXPathInvalidSyntaxException", ",properties = ");
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException:,properties = ", qName0.toString());
      assertEquals(",properties = ", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.JXPathInvalidSyntaxException:,properties = ", qName0.toString());
      assertEquals(",properties = ", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, expressionArray0[0]);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertEquals(3, expressionArray0.length);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-175), expressionArray0);
      assertEquals((-175), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(3, expressionArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("+D2");
      assertEquals("+D2", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("+D2", processingInstructionTest0.getTarget());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("+D2", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('+D2')", string0);
      assertNotNull(string0);
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, false, processingInstructionTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals("+D2", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1387), expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals((-1387), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object0 = coreFunction0.computeValue(nodeSetContext0);
      assertEquals((-175), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNull(object0);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-1387), expressionArray0);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-1387), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNull(nodeSetContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(2083, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2083, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, expressionArray0[0]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction2 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(", ");
      assertEquals(", ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      assertEquals(12, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.iteratePointers(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, int0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      
      QName qName0 = new QName("IJc6bJ");
      assertEquals("IJc6bJ", qName0.getName());
      assertEquals("IJc6bJ", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction1, coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      QName qName0 = new QName("Cannot replace the root object", "Cannot replace the root object");
      assertEquals("Cannot replace the root object:Cannot replace the root object", qName0.toString());
      assertEquals("Cannot replace the root object", qName0.getPrefix());
      assertEquals("Cannot replace the root object", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertEquals("Cannot replace the root object:Cannot replace the root object", qName0.toString());
      assertEquals("Cannot replace the root object", qName0.getPrefix());
      assertEquals("Cannot replace the root object", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("Cannot replace the root object:Cannot replace the root object", qName0.toString());
      assertEquals("Cannot replace the root object", qName0.getPrefix());
      assertEquals("Cannot replace the root object", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, nodeTypeTest0);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("Cannot replace the root object:Cannot replace the root object", qName0.toString());
      assertEquals("Cannot replace the root object", qName0.getPrefix());
      assertEquals("Cannot replace the root object", qName0.getName());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(Integer.MIN_VALUE, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: Cannot replace the root object:Cannot replace the root object
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      Double double0 = Expression.NOT_A_NUMBER;
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals("", object0);
      assertNotNull(object0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Object object1 = coreFunction1.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals("NaN", object1);
      assertNotNull(object1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(object1.equals((Object)object0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, int0);
      
      CoreFunction coreFunction1 = new CoreFunction(122, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(122, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" hY9TII'g<;il");
      assertEquals(" hY9TII'g<;il", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      QName qName0 = new QName("-jyK_|C!XA(Cmri");
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("-jyK_|C!XA(Cmri", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("-jyK_|C!XA(Cmri", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) variableReference0;
      expressionArray0[1] = (Expression) variableReference0;
      expressionArray0[2] = (Expression) coreOperationEqual0;
      QName qName1 = new QName("");
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertNull(qName1.getPrefix());
      assertEquals("", qName1.getName());
      assertEquals("", qName1.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(4, expressionArray0.length);
      assertFalse(qName1.equals((Object)qName0));
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" could not be added to the document: ");
      assertEquals(" could not be added to the document: ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(11, processingInstructionTest0, expressionArray0);
      assertEquals(" could not be added to the document: ", processingInstructionTest0.getTarget());
      assertEquals(11, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2338, processingInstructionTest0, expressionArray0);
      assertEquals(" could not be added to the document: ", processingInstructionTest0.getTarget());
      assertEquals(2338, step1.getAxis());
      assertNotNull(step1);
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-934), processingInstructionTest0, expressionArray0);
      assertEquals((-934), step2.getAxis());
      assertEquals(" could not be added to the document: ", processingInstructionTest0.getTarget());
      assertNotNull(step2);
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(4, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
      assertEquals(4, expressionArray0.length);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(" could not be added to the document: ", processingInstructionTest0.getTarget());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      coreFunction0.functionSubstring(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("+t(j&<;,jlJqskL<6");
      assertEquals("+t(j&<;,jlJqskL<6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("+t(j&<;,jlJqskL<6", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("+t(j&<;,jlJqskL<6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("+t(j&<;,jlJqskL<6", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+t(j&<;,jlJqskL<6", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-7), nodeNameTest0, expressionArray0);
      assertEquals("+t(j&<;,jlJqskL<6", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("+t(j&<;,jlJqskL<6", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("+t(j&<;,jlJqskL<6", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-7), step0.getAxis());
      assertNotNull(step0);
      assertEquals(2, expressionArray0.length);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(1, stepArray0.length);
      
      CoreFunction coreFunction0 = new CoreFunction((-7), expressionArray0);
      assertEquals((-7), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-510), expressionArray0);
      assertEquals((-510), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction1.getFunctionCode();
      assertEquals((-510), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-510), int0);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction((-371), expressionArray0);
      assertEquals((-371), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName(" ,]5#*${KG[e}pb", " ,]5#*${KG[e}pb");
      assertEquals(" ,]5#*${KG[e}pb: ,]5#*${KG[e}pb", qName0.toString());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getPrefix());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(" ,]5#*${KG[e}pb: ,]5#*${KG[e}pb", qName0.toString());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getPrefix());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(2, expressionArray0.length);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertEquals(" ,]5#*${KG[e}pb: ,]5#*${KG[e}pb", qName0.toString());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getPrefix());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(2, expressionArray0.length);
      
      boolean boolean0 = coreOperationNegate0.computeContextDependent();
      assertEquals(" ,]5#*${KG[e}pb: ,]5#*${KG[e}pb", qName0.toString());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getPrefix());
      assertEquals(" ,]5#*${KG[e}pb", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertTrue(boolean0);
      assertEquals(2, expressionArray0.length);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(Integer.MIN_VALUE, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionStringLength(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ':'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName(";.e{g", "?R6;GoCa'1p");
      assertEquals(";.e{g", qName0.getPrefix());
      assertEquals("?R6;GoCa'1p", qName0.getName());
      assertEquals(";.e{g:?R6;GoCa'1p", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(";.e{g", qName0.getPrefix());
      assertEquals("?R6;GoCa'1p", qName0.getName());
      assertEquals(";.e{g:?R6;GoCa'1p", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionArray0[0]);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(7, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(constant0, expressionArray0[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertNotNull(coreOperationEqual1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(1441792, expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(7, expressionArray0.length);
      
      CoreOperationAdd coreOperationAdd1 = (CoreOperationAdd)coreFunction0.getArg1();
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertEquals("+", coreOperationAdd1.getSymbol());
      assertNotNull(coreOperationAdd1);
      assertEquals(7, expressionArray0.length);
      assertSame(coreOperationAdd1, coreOperationAdd0);
      
      expressionArray0[6] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(1441792, coreFunction0.getFunctionCode());
      assertNotNull(iterator0);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction1 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("space");
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "string-length");
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("space", nodeNameTest0.toString());
      assertEquals("string-length", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(20, nodeNameTest0, expressionArray0);
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("space", nodeNameTest0.toString());
      assertEquals("string-length", nodeNameTest0.getNamespaceURI());
      assertEquals(20, step0.getAxis());
      assertNotNull(step0);
      assertEquals(1, expressionArray0.length);
      
      stepArray0[0] = step0;
      Step step1 = new Step(198, nodeNameTest0, expressionArray0);
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("space", nodeNameTest0.toString());
      assertEquals("string-length", nodeNameTest0.getNamespaceURI());
      assertEquals(198, step1.getAxis());
      assertNotNull(step1);
      assertEquals(1, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-51), nodeNameTest0, expressionArray0);
      assertEquals((-51), step2.getAxis());
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("space", nodeNameTest0.toString());
      assertEquals("string-length", nodeNameTest0.getNamespaceURI());
      assertNotNull(step2);
      assertEquals(1, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      
      stepArray0[2] = step2;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("space", nodeNameTest1.toString());
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(nodeNameTest1);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      
      Step step3 = new Step(798, nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("space", nodeNameTest1.toString());
      assertEquals(798, step3.getAxis());
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step3);
      assertEquals(1, expressionArray0.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-6031), nodeNameTest1, expressionArray0);
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("space", nodeNameTest1.toString());
      assertEquals((-6031), step4.getAxis());
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(step4);
      assertEquals(1, expressionArray0.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(expressionPath0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, 1643, nodeNameTest1);
      assertFalse(nodeNameTest1.isWildcard());
      assertNull(nodeNameTest1.getNamespaceURI());
      assertEquals("space", nodeNameTest1.toString());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("space", qName0.getName());
      assertEquals("space", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(evalContext0);
      assertEquals(1, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertNotSame(nodeNameTest1, nodeNameTest0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      
      Double double0 = (Double)coreFunction2.functionStringLength((EvalContext) null);
      assertEquals(40, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, (Expression) null);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, (Expression) null);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, (Expression) null);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("VLU!)B");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      QName qName0 = new QName("VLU!)B", "");
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(8, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationNegate0);
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(8, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThan0, constant1);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertFalse(constant1.equals((Object)constant0));
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertNotNull(variableReference0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(variableReference0, coreOperationLessThanOrEqual0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertNotNull(coreOperationLessThanOrEqual1);
      assertFalse(coreOperationLessThanOrEqual1.equals((Object)coreOperationLessThanOrEqual0));
      
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      Integer integer0 = new Integer((-4376));
      assertEquals((-4376), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant2 = new Constant(integer0);
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.isContextDependent());
      assertNotNull(constant2);
      assertFalse(constant2.equals((Object)constant0));
      assertFalse(constant2.equals((Object)constant1));
      
      expressionArray1[1] = (Expression) constant2;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationLessThanOrEqual0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual1);
      assertEquals(2, expressionArray1.length);
      assertFalse(coreOperationLessThanOrEqual0.equals((Object)coreOperationLessThanOrEqual1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual1;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertNotNull(extensionFunction1);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction1, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("VLU!)B:", qName0.toString());
      assertEquals("", qName0.getName());
      assertEquals("VLU!)B", qName0.getPrefix());
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant0.equals((Object)constant2));
      assertFalse(constant0.equals((Object)constant1));
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      
      expressionArray0[7] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(536, expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals(536, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, (NodeTest) null);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, (NodeTest) null);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(4, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(9, int0);
      assertEquals(4, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      QName qName0 = new QName("number");
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1848), expressionArray0);
      assertEquals((-1848), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1848()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      int int0 = 25;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-4345), (Expression[]) null);
      assertEquals((-4345), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray1);
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(8, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction-4345()(), null, unknownFunction-4345()(), unknownFunction-4345()(), unknownFunction-4345()(), unknownFunction-4345()(), unknownFunction-4345()(), unknownFunction-4345()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "pn~>d}=t({P");
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Constant constant0 = new Constant("pn~>d}=t({P");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[2] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("pn~>d}=t({P");
      assertEquals("pn~>d}=t({P", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(860, processingInstructionTest0, expressionArray0);
      assertEquals("pn~>d}=t({P", processingInstructionTest0.getTarget());
      assertEquals(860, step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(860, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(860, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      coreFunction0.functionKey((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(6, expressionArray0.length);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      assertEquals(6, expressionArray0.length);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(6, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, expressionArray0[0]);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      
      coreOperationEqual0.args = expressionArray0;
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(6, expressionArray0.length);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("''", string0);
      assertNotNull(string0);
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000005 = org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 = org.apache.commons.jxpath.ri.compiler.LocationPath@0000000007 = org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000008 = org.apache.commons.jxpath.ri.compiler.Constant@0000000009, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000004) div (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003), , (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) - org.apache.commons.jxpath.ri.compiler.LocationPath@0000000007, '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean1 = coreOperationEqual0.computeContextDependent();
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(40);
      assertEquals(40, (int)integer0);
      assertNotNull(integer0);
      
      Step[] stepArray0 = new Step[0];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1765);
      assertEquals(1765, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals("unknownFunction28()", string0);
      assertNotNull(string0);
      assertEquals(5, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, int0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      Constant constant1 = new Constant("|");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertNotNull(constant1);
      assertFalse(constant1.equals((Object)constant0));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, constant1);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(constant1.equals((Object)constant0));
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean0);
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotSame(expressionArray1, expressionArray0);
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(25, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, int0);
      
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      nodeSetContext0.reset();
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      
      String string0 = "IJc6bJ";
      String string1 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NodeSetContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, int0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      QName qName0 = new QName("IJc6bJ");
      assertNull(qName0.getPrefix());
      assertEquals("IJc6bJ", qName0.toString());
      assertEquals("IJc6bJ", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("IJc6bJ", qName0.toString());
      assertEquals("IJc6bJ", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("IJc6bJ", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      boolean boolean2 = coreFunction0.computeContextDependent();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = coreFunction0.getFunctionCode();
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(29, int1);
      assertFalse(int1 == int0);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertNotNull(unionContext0);
      assertEquals(6, evalContextArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(2, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      assertEquals(25, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, qName0, (Pointer) null);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName1 = new QName("number");
      assertNull(qName1.getPrefix());
      assertEquals("number", qName1.toString());
      assertEquals("number", qName1.getName());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertEquals("", qName0.getName());
      assertEquals("", qName0.getPrefix());
      assertEquals(":", qName0.toString());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(qName0.equals((Object)qName1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ':'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(860, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(860, coreFunction0.getFunctionCode());
      assertEquals(860, int0);
      
      EvalContext evalContext0 = null;
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(860, coreFunction0.getFunctionCode());
      assertNotNull(iterator0);
      
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(", ");
      assertEquals(", ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, processingInstructionTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(", ", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals(", ", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction(', ')", string0);
      assertNotNull(string0);
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, processingInstructionTest0);
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(", ", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      basicVariables0.declareVariable("number", "");
      QName qName0 = new QName("number");
      assertEquals("number", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("number", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(Integer.MIN_VALUE, coreFunction1.getFunctionCode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("number");
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("number");
      assertEquals("number", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(rootContext1, true, processingInstructionTest0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals("number", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      Double double0 = (Double)coreOperationSubtract0.computeValue(rootContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("number", qName0.getName());
      assertEquals("number", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2472()((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationUnion1;
      expressionArray1[1] = (Expression) coreOperationUnion1;
      expressionArray1[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(3, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(19, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      Integer integer0 = new Integer(38);
      assertEquals(38, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("C3c+u");
      assertEquals("C3c+u", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("C3c+u", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, processingInstructionTest0);
      assertEquals("C3c+u", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(38, coreFunction0.getFunctionCode());
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(1, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(6, int0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("w+B'L_;qj{ _o3Z/=+");
      assertEquals("w+B'L_;qj{ _o3Z/=+", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("w+B'L_;qj{ _o3Z/=+", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('w+B'L_;qj{ _o3Z/=+')", string0);
      assertNotNull(string0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("w+B'L_;qj{ _o3Z/=+", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      String string1 = processingInstructionTest0.toString();
      assertEquals("w+B'L_;qj{ _o3Z/=+", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('w+B'L_;qj{ _o3Z/=+')", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("w+B'L_;qj{ _o3Z/=+", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      String string2 = coreFunction0.getFunctionName();
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("namespace-uri", string2);
      assertNotNull(string2);
      assertEquals(1, expressionArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      QName qName0 = new QName("L");
      assertEquals("L", qName0.toString());
      assertEquals("L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("L", qName0.toString());
      assertEquals("L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("L", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-580), nodeNameTest0, expressionArray0);
      assertEquals("L", qName0.toString());
      assertEquals("L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("L", nodeNameTest0.toString());
      assertEquals((-580), step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      
      Step step1 = new Step((-341), nodeNameTest0, expressionArray0);
      assertEquals("L", qName0.toString());
      assertEquals("L", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("L", nodeNameTest0.toString());
      assertEquals((-341), step1.getAxis());
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      
      Step[] stepArray0 = new Step[8];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      stepArray0[4] = step0;
      stepArray0[5] = step1;
      stepArray0[6] = step1;
      stepArray0[7] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(8, stepArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      int int0 = coreFunction1.getFunctionCode();
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(13, coreFunction1.getFunctionCode());
      assertEquals(13, int0);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion2.getSymbol());
      assertNotNull(coreOperationUnion2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion1));
      assertFalse(coreOperationUnion2.equals((Object)coreOperationUnion0));
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(3725, expressionArray0);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals(3725, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      coreFunction2.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, int0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(3, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Expression[] expressionArray1 = new Expression[8];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction2;
      expressionArray1[1] = (Expression) coreFunction2;
      expressionArray1[2] = (Expression) coreFunction2;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction1;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction1;
      CoreFunction coreFunction3 = new CoreFunction(3, expressionArray1);
      assertEquals(8, coreFunction3.getArgumentCount());
      assertEquals(3, coreFunction3.getFunctionCode());
      assertNotNull(coreFunction3);
      assertEquals(8, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertEquals(":", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(0, expressionArray0.length);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      assertEquals(0, expressionArray0.length);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2253), expressionArray0);
      assertEquals((-2253), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertNotNull(decimalFormat0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) decimalFormat0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, (Object) null, (Pointer) null);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("ZrT$,O");
      assertEquals("ZrT$,O", qName0.toString());
      assertEquals("ZrT$,O", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("ZrT$,O", qName0.toString());
      assertEquals("ZrT$,O", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("ZrT$,O", qName0.toString());
      assertEquals("ZrT$,O", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      CoreFunction coreFunction2 = new CoreFunction(98, expressionArray0);
      assertEquals(98, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      String string0 = (String)coreFunction1.functionNamespaceURI(rootContext0);
      assertEquals((-2253), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals("ZrT$,O", qName0.toString());
      assertEquals("ZrT$,O", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      EvalContext evalContext0 = null;
      String string0 = (String)coreFunction0.functionLocalName((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      
      Double double0 = (Double)coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2472), expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      String string1 = (String)coreFunction1.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      QName qName0 = new QName("8*:.IBcXV$5oSF:>n");
      assertEquals("8*", qName0.getPrefix());
      assertEquals(".IBcXV$5oSF:>n", qName0.getName());
      assertEquals("8*:.IBcXV$5oSF:>n", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("8*", qName0.getPrefix());
      assertEquals(".IBcXV$5oSF:>n", qName0.getName());
      assertEquals("8*:.IBcXV$5oSF:>n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8*:.IBcXV$5oSF:>n", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals("8*", qName0.getPrefix());
      assertEquals(".IBcXV$5oSF:>n", qName0.getName());
      assertEquals("8*:.IBcXV$5oSF:>n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8*:.IBcXV$5oSF:>n", nodeNameTest0.toString());
      assertNotNull(namespaceContext0);
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeNameTest0);
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals("8*", qName0.getPrefix());
      assertEquals(".IBcXV$5oSF:>n", qName0.getName());
      assertEquals("8*:.IBcXV$5oSF:>n", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("8*:.IBcXV$5oSF:>n", nodeNameTest0.toString());
      assertNotNull(descendantContext0);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 15;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertNotNull(coreOperationAnd0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[1]);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationNegate0);
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      QName qName0 = new QName("L");
      assertNull(qName0.getPrefix());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("L", qName0.getName());
      assertEquals("L", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean1 = coreOperationEqual0.computeContextDependent();
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName1 = new QName("", "org.apache.commons.beanutils.converters.SqlTimestampConverter");
      assertEquals("org.apache.commons.beanutils.converters.SqlTimestampConverter", qName1.getName());
      assertEquals(":org.apache.commons.beanutils.converters.SqlTimestampConverter", qName1.toString());
      assertEquals("", qName1.getPrefix());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      String string0 = variableReference0.toString();
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("$jyK_|C!XA(Cmri: could not be added to the document: ", string0);
      assertNotNull(string0);
      assertFalse(qName0.equals((Object)qName1));
      assertNotSame(qName0, qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationNegate0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      assertFalse(qName0.equals((Object)qName1));
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, nameAttributeTest0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertFalse(qName0.equals((Object)qName1));
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(22, int0);
      assertEquals(0, expressionArray0.length);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("floor");
      assertEquals("floor", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("floor", processingInstructionTest0.getTarget());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      String string0 = processingInstructionTest0.toString();
      assertEquals("floor", processingInstructionTest0.getTarget());
      assertEquals("processing-instruction('floor')", string0);
      assertNotNull(string0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      assertEquals("floor", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      initialContext0.forEachRemaining(consumer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      Iterator iterator0 = new InitialContext(initialContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(iterator0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      CoreFunction coreFunction1 = new CoreFunction((-244), expressionArray0);
      assertEquals((-244), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Double double0 = (Double)coreFunction1.functionCeiling(initialContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-244), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(initialContext0.equals((Object)iterator0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(initialContext0, iterator0);
      assertNotSame(coreFunction1, coreFunction0);
      
      String string1 = (String)coreFunction1.functionString(initialContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-244), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("0", string1);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(initialContext0.equals((Object)iterator0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(initialContext0, iterator0);
      assertNotSame(coreFunction1, coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      Integer integer0 = new Integer(103);
      assertEquals(103, (int)integer0);
      assertNotNull(integer0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, variableReference0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      
      boolean boolean1 = coreOperationEqual0.computeContextDependent();
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      QName qName1 = new QName("", "org.apache.commons.beanutils.converters.SqlTimestampConverter");
      assertEquals("org.apache.commons.beanutils.converters.SqlTimestampConverter", qName1.getName());
      assertEquals("", qName1.getPrefix());
      assertEquals(":org.apache.commons.beanutils.converters.SqlTimestampConverter", qName1.toString());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      assertFalse(qName0.equals((Object)qName1));
      
      EvalContext evalContext0 = null;
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      assertFalse(qName0.equals((Object)qName1));
      
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, nodeNameTest0);
      assertEquals("jyK_|C!XA(Cmri", qName0.getPrefix());
      assertEquals(" could not be added to the document: ", qName0.getName());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("jyK_|C!XA(Cmri: could not be added to the document: ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      assertFalse(qName0.equals((Object)qName1));
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("number");
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      Boolean boolean0 = (Boolean)coreFunction0.functionBoolean(rootContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      
      String string0 = (String)coreFunction0.functionName(rootContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isRoot());
      assertTrue(variablePointer0.isContainer());
      assertFalse(variablePointer0.isNode());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertNotNull(initialContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      EvalContext evalContext0 = null;
      String string1 = (String)coreFunction0.functionLocalName((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      
      Double double0 = (Double)coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      String string2 = (String)coreFunction1.functionLocalName((EvalContext) null);
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Double double1 = (Double)coreFunction2.functionRound((EvalContext) null);
      assertEquals((-2472), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      String string3 = "ijjvOcX5(Wy8i";
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(6, expressionArray0.length);
      
      QName qName0 = new QName("!qbIT:");
      assertEquals("!qbIT:", qName0.toString());
      assertEquals("!qbIT", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("!qbIT:", qName0.toString());
      assertEquals("!qbIT", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("!qbIT:", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      assertEquals("!qbIT:", qName0.toString());
      assertEquals("!qbIT", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("!qbIT:", nodeNameTest0.toString());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      QName qName0 = new QName("`n*,sTJl<ac3]7Hh", "not");
      assertEquals("`n*,sTJl<ac3]7Hh", qName0.getPrefix());
      assertEquals("not", qName0.getName());
      assertEquals("`n*,sTJl<ac3]7Hh:not", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction0 = new CoreFunction(110, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(110, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Integer integer0 = new Integer(218);
      assertEquals(218, (int)integer0);
      assertNotNull(integer0);
      
      CoreFunction coreFunction1 = new CoreFunction((-937), (Expression[]) null);
      assertEquals((-937), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Iterator iterator0 = coreFunction1.iteratePointers((EvalContext) null);
      assertEquals((-937), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(iterator0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-154));
      assertEquals((-154), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(30);
      assertEquals(30, nodeTypeTest1.getNodeType());
      assertNotNull(nodeTypeTest1);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      String string0 = nodeTypeTest1.toString();
      assertEquals(30, nodeTypeTest1.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      assertNotSame(nodeTypeTest1, nodeTypeTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest1, false);
      assertEquals(30, nodeTypeTest1.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, false, nodeTypeTest0);
      assertEquals((-154), nodeTypeTest0.getNodeType());
      assertEquals(30, nodeTypeTest1.getNodeType());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      assertFalse(nodeTypeTest0.equals((Object)nodeTypeTest1));
      assertFalse(nodeTypeTest1.equals((Object)nodeTypeTest0));
      
      CoreFunction coreFunction2 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(30, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      EvalContext evalContext0 = null;
      String string0 = (String)coreFunction0.functionLocalName((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, expressionArray0.length);
      
      Double double0 = (Double)coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      String string1 = (String)coreFunction1.functionLocalName((EvalContext) null);
      assertEquals((-2472), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotSame(coreFunction1, coreFunction0);
      
      CoreFunction coreFunction2 = new CoreFunction((-2472), expressionArray0);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-2472), coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Double double1 = (Double)coreFunction2.functionRound((EvalContext) null);
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-2472), coreFunction2.getFunctionCode());
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      
      String string2 = "ijjvOcX5(Wy8i";
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2472), int0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(8, int0);
      assertEquals(1, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      ChildContext childContext0 = new ChildContext(rootContext0, (NodeTest) null, true, true);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertNotNull(childContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext(childContext0, basicNodeSet0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertNotNull(nodeSetContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, true, (NodeTest) null);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      
      RootContext rootContext1 = ancestorContext0.getRootContext();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext2);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertSame(rootContext2, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      
      Double double0 = (Double)coreFunction0.functionRound(rootContext2);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext0);
      assertSame(rootContext2, rootContext1);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(1, expressionArray0.length);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreOperationSubtract0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(nameAttributeTest0);
      assertEquals(1, expressionArray0.length);
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(1, expressionArray0.length);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertNotNull(coreOperationUnion1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationUnion1.equals((Object)coreOperationUnion0));
      
      int int0 = 10;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
      assertNotNull(long0);
      
      Constant constant0 = new Constant(long0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-2472), expressionArray0);
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(1, expressionArray0.length);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreOperationSubtract0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNotNull(jXPathContextReferenceImpl0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, long0, (Pointer) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNotNull(jXPathContextReferenceImpl1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("number");
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(variablePointer0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertNotNull(rootContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNotNull(rootContext1);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("number");
      assertEquals("number", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext1, true, processingInstructionTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals("number", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertNotNull(ancestorContext0);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      
      NamespaceResolver namespaceResolver0 = variablePointer0.getNamespaceResolver();
      assertTrue(namespaceResolver0.isSealed());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertNotNull(namespaceResolver0);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      
      Boolean boolean0 = (Boolean)coreFunction0.functionBoolean(ancestorContext0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals("number", processingInstructionTest0.getTarget());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, ancestorContext0.getPosition());
      assertFalse(boolean0);
      assertNotNull(boolean0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      
      Object object0 = coreFunction0.computeValue(rootContext1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals((-2472), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("number", qName0.toString());
      assertEquals("number", qName0.getName());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertNull(object0);
      assertEquals(1, expressionArray0.length);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      CoreFunction coreFunction0 = new CoreFunction((-937), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-937), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreOperationUnion0;
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(2, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Double double0 = Expression.ONE;
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, (Expression[]) null, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(expressionPath0);
      assertEquals(0, stepArray0.length);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(nodeNameTest0);
      
      EvalContext evalContext0 = expressionPath0.createContextForStep((EvalContext) null, (-937), nodeNameTest0);
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("", nodeNameTest0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("", qName0.getName());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNull(evalContext0);
      assertEquals(0, stepArray0.length);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("?`okMEm");
      assertEquals("?`okMEm", qName0.toString());
      assertEquals("?`okMEm", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("?`okMEm", qName0.toString());
      assertEquals("?`okMEm", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("?`okMEm", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Integer integer0 = new Integer(34);
      assertEquals(34, (int)integer0);
      assertNotNull(integer0);
      
      Iterator iterator0 = coreFunction0.iteratePointers((EvalContext) null);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(iterator0);
      assertEquals(0, expressionArray0.length);
      
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray1);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(53, expressionArray1);
      assertEquals(53, coreFunction2.getFunctionCode());
      assertEquals(5, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before(unknownFunction53()(), unknownFunction53()(), unknownFunction53()(), unknownFunction53()(), unknownFunction53()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      assertEquals(5, expressionArray0.length);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertNotNull(coreOperationOr1);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      
      expressionArray0[1] = (Expression) coreOperationOr1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[1], coreOperationMod0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(5, expressionArray0.length);
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      
      expressionArray0[2] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2962);
      assertEquals(2962, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      Step step0 = new Step(2962, nodeTypeTest0, expressionArray1);
      assertEquals(2962, nodeTypeTest0.getNodeType());
      assertEquals(2962, step0.getAxis());
      assertNotNull(step0);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[0] = step0;
      Step step1 = new Step(2962, nodeTypeTest0, expressionArray1);
      assertEquals(2962, step1.getAxis());
      assertEquals(2962, nodeTypeTest0.getNodeType());
      assertNotNull(step1);
      assertEquals(4, expressionArray1.length);
      assertFalse(step1.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[1] = step1;
      Step step2 = new Step(1437, nodeTypeTest0, expressionArray1);
      assertEquals(1437, step2.getAxis());
      assertEquals(2962, nodeTypeTest0.getNodeType());
      assertNotNull(step2);
      assertEquals(4, expressionArray1.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(3, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr0.equals((Object)coreOperationOr1));
      
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr2 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr2.getSymbol());
      assertNotNull(coreOperationOr2);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationOr2.equals((Object)coreOperationOr1));
      assertFalse(coreOperationOr2.equals((Object)coreOperationOr0));
      
      expressionArray0[4] = (Expression) coreOperationOr2;
      CoreFunction coreFunction0 = new CoreFunction((-1578), expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals((-1578), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      coreFunction0.functionNumber((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(3, int0);
      assertEquals(0, expressionArray0.length);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(":", nodeNameTest0.toString());
      assertEquals(2, step0.getAxis());
      assertNotNull(step0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertNotNull(locationPath0);
      assertEquals(2, stepArray0.length);
      
      expressionArray1[0] = (Expression) locationPath0;
      QName qName1 = new QName("'LQ6~W->{h_#_7H,", "'LQ6~W->{h_#_7H,");
      assertEquals("'LQ6~W->{h_#_7H,:'LQ6~W->{h_#_7H,", qName1.toString());
      assertEquals("'LQ6~W->{h_#_7H,", qName1.getName());
      assertEquals("'LQ6~W->{h_#_7H,", qName1.getPrefix());
      assertNotNull(qName1);
      assertFalse(qName1.equals((Object)qName0));
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      assertEquals("'LQ6~W->{h_#_7H,:'LQ6~W->{h_#_7H,", qName1.toString());
      assertEquals("'LQ6~W->{h_#_7H,", qName1.getName());
      assertEquals("'LQ6~W->{h_#_7H,", qName1.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(qName1.equals((Object)qName0));
      
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreFunction1;
      expressionArray1[3] = (Expression) coreFunction1;
      expressionArray1[4] = (Expression) coreFunction1;
      expressionArray1[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray1);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(3, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(6, expressionArray1.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction2.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(:/:, 'LQ6~W->{h_#_7H,:'LQ6~W->{h_#_7H,(), count(), count(), count(), count())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertNotNull(coreOperationNegate0);
      assertEquals(0, expressionArray0.length);
      
      CoreFunction coreFunction1 = new CoreFunction((-1200), expressionArray0);
      assertEquals((-1200), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      Integer integer0 = new Integer((-439));
      assertEquals((-439), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = coreOperationNegate0.computeContextDependent();
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(boolean0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotSame(coreFunction0, coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(53, expressionArray0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(53, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      
      Iterator iterator0 = coreFunction2.iteratePointers((EvalContext) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(53, coreFunction2.getFunctionCode());
      assertNotNull(iterator0);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      
      Expression[] expressionArray1 = new Expression[9];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction1;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, expressionArray1[0]);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertNotNull(coreOperationSubtract0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction1, coreOperationSubtract0);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals((-1200), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, (Expression) null);
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals((-1200), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[1] = (Expression) nameAttributeTest0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationNegate0;
      expressionArray1[7] = (Expression) coreFunction2;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(38, expressionArray1);
      assertEquals(38, coreFunction3.getFunctionCode());
      assertEquals(9, coreFunction3.getArgumentCount());
      assertNotNull(coreFunction3);
      assertEquals(9, expressionArray1.length);
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreFunction coreFunction4 = new CoreFunction((-1249), expressionArray1);
      assertEquals(9, coreFunction4.getArgumentCount());
      assertEquals((-1249), coreFunction4.getFunctionCode());
      assertNotNull(coreFunction4);
      assertEquals(9, expressionArray1.length);
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      // Undeclared exception!
      try { 
        coreFunction4.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(53, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      assertEquals(0, expressionArray0.length);
      
      QName qName0 = new QName("?`okMEm");
      assertEquals("?`okMEm", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("?`okMEm", qName0.toString());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("?`okMEm", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("?`okMEm", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("?`okMEm", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Object object0 = coreFunction0.functionFalse((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(53, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
      assertNotNull(object0);
      assertEquals(0, expressionArray0.length);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      assertEquals("?`okMEm", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("?`okMEm", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("?`okMEm", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction53()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1196), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1196), coreFunction1.getFunctionCode());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, descendantContext0.getPosition());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.DescendantContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.ZERO;
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step((-937), (NodeTest) null, expressionArray0);
      assertEquals((-937), step0.getAxis());
      assertNotNull(step0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      stepArray0[0] = step0;
      Step step1 = new Step((-3348), (NodeTest) null, expressionArray0);
      assertEquals((-3348), step1.getAxis());
      assertNotNull(step1);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step1.equals((Object)step0));
      
      stepArray0[1] = step1;
      Step step2 = new Step((-3348), (NodeTest) null, expressionArray1);
      assertEquals((-3348), step2.getAxis());
      assertNotNull(step2);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      
      stepArray0[2] = step2;
      Step step3 = new Step(122, (NodeTest) null, expressionArray1);
      assertEquals(122, step3.getAxis());
      assertNotNull(step3);
      assertEquals(3, expressionArray1.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[3] = step3;
      Step step4 = new Step((-937), (NodeTest) null, expressionArray1);
      assertEquals((-937), step4.getAxis());
      assertNotNull(step4);
      assertEquals(3, expressionArray1.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      assertNotNull(expressionPath0);
      assertEquals(5, expressionArray0.length);
      assertEquals(3, expressionArray1.length);
      assertEquals(5, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertNotNull(coreOperationAdd0);
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      assertEquals((-937), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertNotNull(coreFunction1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction1, coreFunction1);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertNotNull(coreOperationEqual0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(6, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(6, coreFunction2.getFunctionCode());
      assertNotNull(coreFunction2);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreFunction0);
      coreFunction0.isContextDependent();
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step((-937), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3348), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3348), (NodeTest) null, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(122, (NodeTest) null, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-937), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      coreFunction0.computeValue(descendantContext0);
      assertEquals((-937), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      QName qName0 = new QName("jyK_|C!XA(Cmri", " could not be added to the document: ");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, variableReference0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      coreOperationEqual0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      Integer integer0 = new Integer(40);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, (Expression[]) null, stepArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1765);
      expressionPath0.createContextForStep((EvalContext) null, 1765, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.getFunctionCode();
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAdd1;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray1);
      coreFunction0.getArgumentCount();
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("@4#:~>xiIEkjevp!&y", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationEqual0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      Integer integer0 = new Integer(38);
      EvalContext evalContext0 = null;
      coreFunction0.iteratePointers((EvalContext) null);
      coreOperationNegate0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(38, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1()((org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, null, -(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000005), $@4#:~>xiIEkjevp!&y:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("X>fAi^1");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2538));
      Step step0 = new Step(15, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(119, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-2538), expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(selfContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Float float0 = new Float(2203.9F);
      Constant constant0 = new Constant(float0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], constant0);
      expressionArray0[2] = (Expression) coreOperationEqual1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationAdd0);
      expressionArray0[6] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004) + (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000005) + org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008 + (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000009), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008 and org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000009, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000005), $, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000006 != org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName((String) null, "Tr(<tOg&Bw'`CEk");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((byte)13, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((byte)13, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((byte)13, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(25, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step((byte)13, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(25, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) locationPath0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationLessThan0;
      expressionArray1[5] = (Expression) locationPath0;
      expressionArray1[6] = (Expression) coreOperationDivide0;
      expressionArray1[7] = (Expression) coreOperationLessThan0;
      expressionArray1[8] = (Expression) coreOperationNegate0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray0[0], expressionArray1[6]);
      expressionArray0[4] = (Expression) coreOperationLessThan1;
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan(locationPath0, (Expression) null);
      expressionArray0[5] = (Expression) coreOperationLessThan2;
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray0[2], coreOperationDivide0);
      expressionArray0[6] = (Expression) coreOperationDivide1;
      CoreFunction coreFunction0 = new CoreFunction(1765, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      Integer integer0 = new Integer(1282);
      Constant constant0 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], (Expression) null);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1282, expressionArray0);
      EvalContext evalContext0 = null;
      constant0.iterate((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-937), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-937), (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2, (Expression[]) null);
      coreFunction2.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, (Expression) null);
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2836);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      QName qName0 = new QName("`n*,sTJ:<a!3]7Hh", "jyK_|C!XA(Cmri");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, variableReference0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, variableReference0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, coreOperationEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = (Expression) variableReference0;
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationEqual0.computeContextDependent();
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      Integer integer0 = new Integer(40);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false(null, -(org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003), -(org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003), $`n*,sTJ:<a!3]7Hh:jyK_|C!XA(Cmri, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 >= org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) > (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-937), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreFunction0);
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, constant0);
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      coreFunction1.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      namespaceContext0.setPosition(0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      coreFunction0.functionTrue(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(860, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      coreFunction1.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction860()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationOr0);
      Integer integer0 = new Integer((-272));
      JXPathContext.newContext((Object) coreOperationLessThan0);
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant("");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, coreOperationNegate0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, constant0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      Expression[] expressionArray1 = new Expression[20];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationMultiply0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 = org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007), (org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000004) * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003) - org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', -org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 or org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("c^/6xI");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, variableReference0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = null;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray1[1] = expression0;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-396), expressionArray0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction2 = new CoreFunction(53, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(244, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(1327, expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      coreFunction0.getArg1();
      expressionArray0[3] = null;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd1, coreOperationAnd1);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[6] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[6], (Expression) null);
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(1327, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(971, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction((-1742), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      coreFunction1.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(4349, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction4349()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationOr0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(34, expressionArray0);
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction34()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 + (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) + (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000005 + (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 < org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002) mod (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000004), org.apache.commons.jxpath.ri.compiler.Constant@0000000006 = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      Constant constant0 = new Constant("/");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      Float float0 = new Float((float) 1167);
      Constant constant1 = new Constant(float0);
      expressionArray0[4] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(1167, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(1167, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-937), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-937()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, (Expression) null);
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-937), expressionArray0);
      coreFunction1.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.util.KeyManagerUtils$SingleNodeExtendedKeyManager");
      CoreFunction coreFunction1 = new CoreFunction((-595), expressionArray0);
      int int0 = 10;
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction1);
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      QName qName0 = new QName((String) null, (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "/`,@4hsfssp,");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionTrue((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest1);
      CoreFunction coreFunction1 = new CoreFunction((-791), (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      coreFunction1.functionNumber(namespaceContext0);
      CoreFunction coreFunction2 = new CoreFunction(0, (Expression[]) null);
      coreFunction2.iteratePointers(selfContext0);
      CoreFunction coreFunction3 = new CoreFunction(22, (Expression[]) null);
      coreFunction2.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction1.functionString(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-937), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction((-1196), (Expression[]) null);
      coreFunction2.getFunctionCode();
      CoreFunction coreFunction3 = new CoreFunction((-12), (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-195), (Expression[]) null);
      coreFunction1.getFunctionCode();
      CoreFunction coreFunction2 = new CoreFunction(13, (Expression[]) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-195));
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      coreFunction0.functionStringLength(ancestorContext0);
      ancestorContext0.toString();
      CoreFunction coreFunction3 = new CoreFunction(11, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.functionCeiling(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer((-272));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "f4Q");
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      attributeContext0.getCurrentNodePointer();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      jXPathContext1.iterate("f4Q");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, nodeNameTest0, (Pointer) null);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      coreFunction2.functionStringLength(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "SBo";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      processingInstructionTest0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      coreFunction0.getFunctionCode();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-2326), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction53()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      QName qName0 = new QName("", "JXPath: found system property");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction((-3179), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("null()");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[1] = expression0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationUnion1;
      expressionArray1[4] = (Expression) coreOperationUnion1;
      expressionArray1[5] = (Expression) coreOperationUnion1;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      Step step4 = new Step(10, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-937), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, false);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(precedingOrFollowingContext0, evalContextArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep(unionContext0, 13, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      EvalContext evalContext0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(21, int0);
      
      QName qName0 = new QName("1d fv1~C|pxp 4");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionString(namespaceContext0);
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(240, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContextArray0[0], nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      evalContextArray0[1] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction240()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("null()");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      Step step0 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray1[1] = expression0;
      expressionArray1[2] = (Expression) coreOperationAdd1;
      expressionArray1[3] = (Expression) coreOperationUnion1;
      expressionArray1[4] = (Expression) coreOperationUnion1;
      expressionArray1[5] = (Expression) coreOperationUnion1;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      Step step4 = new Step(10, nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step((-937), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(selfContext0, nodeTypeTest0, false);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext(precedingOrFollowingContext0, evalContextArray0);
      EvalContext evalContext0 = expressionPath0.createContextForStep(unionContext0, 13, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) | org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007), org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000003 > org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, $null(), org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 + org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) + org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000007)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationOr0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = null;
      expressionArray1[1] = null;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationEqual0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-199), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(3, int0);
      
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("*||pG", "*||pG");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(18, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(76, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      evalContextArray0[5] = (EvalContext) precedingOrFollowingContext0;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.functionNull(unionContext0);
      assertEquals(3, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, coreOperationSubtract0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(240, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContextArray0[0], nodeNameTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeNameTest0);
      evalContextArray0[1] = (EvalContext) attributeContext0;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "SBo";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2254, (Expression[]) null);
      QName qName0 = new QName("org.apache.commons.beanutils.DynaBean", "*");
      QName qName1 = new QName("y6E|(jKsj,$\"WuK4#S", "org.apache.commons.beanutils.DynaBean");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1);
      Step step0 = new Step((-937), nodeNameTest1, (Expression[]) null);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      QName qName0 = new QName("*", (String) null);
      QName qName1 = new QName("*", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      Step step0 = new Step(21, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      EvalContext evalContext0 = null;
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      ParsePosition parsePosition0 = new ParsePosition(1048);
      decimalFormat0.parse("ts!cs5FY?", parsePosition0);
      Constant constant0 = new Constant((Number) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationMultiply0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = (Expression) coreOperationMultiply0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      expressionArray1[4] = (Expression) coreOperationMod0;
      expressionArray1[5] = (Expression) coreOperationEqual0;
      expressionArray1[6] = (Expression) coreOperationSubtract0;
      expressionArray1[7] = (Expression) constant0;
      Step step0 = new Step(1048, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1048, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-604));
      Step step2 = new Step(1048, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(932, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMod0);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      coreFunction0.getArg1();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreFunction0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference((QName) null);
      Constant constant0 = new Constant("number");
      CoreFunction coreFunction1 = new CoreFunction((-2790), (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, nameAttributeTest0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      QName qName0 = new QName("_h<w3EHQy+");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("o]t");
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(53, expressionArray0);
      coreFunction0.getFunctionCode();
      coreFunction0.iteratePointers((EvalContext) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction53()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(20, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[1];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(variableReference0, variableReference0);
      coreOperationDivide0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 div org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("@-cuh1VsTgmjvH#");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], constant0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-94), expressionArray0);
      QName qName0 = new QName("@-cuh1VsTgmjvH#", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "key");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-94()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002) | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 | (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006), org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000006)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      String string0 = "SBo";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      coreFunction0.getArgumentCount();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer((-272));
      coreFunction1.functionPosition(selfContext0);
      JXPathContext.newContext((Object) namespaceContext0);
      NodeTest nodeTest0 = null;
      Consumer<AncestorContext> consumer0 = (Consumer<AncestorContext>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        namespaceContext0.forEachRemaining(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-937), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      QName qName0 = new QName("", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(21, nodeNameTest0, (Expression[]) null);
      Step[] stepArray0 = new Step[1];
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, (Expression[]) null, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      QName qName0 = new QName("_h<w3EHQy+");
      VariableReference variableReference0 = new VariableReference(qName0);
      Constant constant0 = new Constant("o]t");
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[0]);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-937), expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("string");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1540, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContextArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      int int0 = 21;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[6];
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer((-272));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "f4Q");
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      attributeContext0.getCurrentNodePointer();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      jXPathContext1.iterate("f4Q");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, nodeNameTest0, (Pointer) null);
      CoreFunction coreFunction2 = new CoreFunction(8, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      String string0 = " of ";
      QName qName0 = new QName("unknownFunction860()", " of ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "hz?HfYbL");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer((String) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(Integer.MIN_VALUE);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeTypeTest0);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, nameAttributeTest0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      QName qName0 = new QName("_h<w3EHQy+");
      VariableReference variableReference0 = new VariableReference(qName0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationEqual0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E]iU4<G-=r*_w%Dgv");
      QName qName0 = new QName("", "jRU0v?");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], coreOperationAnd0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2046), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      boolean boolean0 = false;
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2046()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005 and org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000007 and org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 | (org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005) | (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000007) | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000008), -org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002 div org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) mod org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000002, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000005 > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2340, expressionArray0);
      coreFunction0.getArgumentCount();
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(2340, int0);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      String string0 = "string";
      QName qName0 = new QName("string");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1540, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(21);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeTypeTest0);
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-937), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      QName qName0 = new QName("G~J;t^Ks4|", "G~J;t^Ks4|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionTrue((EvalContext) null);
      assertEquals((-937), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationOr0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, (Expression) null);
      Float float0 = new Float((float) 24);
      Constant constant0 = new Constant(float0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationEqual0, coreOperationEqual0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, (Expression) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[1] = (Expression) coreOperationEqual0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
      QName qName0 = new QName("_h<w3EHQy+");
      QName qName1 = new QName("translate", "translate");
      Constant constant0 = new Constant("f>X.Nk`");
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("f4Q", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, coreOperationMultiply0);
      CoreFunction coreFunction1 = new CoreFunction((-2096), (Expression[]) null);
      assertEquals((-2096), coreFunction1.getFunctionCode());
      
      String string0 = coreFunction0.toString();
      assertEquals("unknownFunction0()()", string0);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1068, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreOperationAnd0);
      QName qName0 = new QName((String) null, "g-,|u}yQ~/B8V|");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      VariableReference variableReference1 = new VariableReference(qName0);
      Constant constant0 = new Constant("LVyr]:u5TRW");
      CoreFunction coreFunction1 = new CoreFunction((-1800), (Expression[]) null);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName((String) null, "SBo");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", ");
      SelfContext selfContext0 = new SelfContext(parentContext0, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      coreFunction0.functionLast(selfContext0);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      coreFunction1.getFunctionCode();
      coreFunction0.getArgumentCount();
      Integer integer0 = new Integer((-272));
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "f4Q");
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, processingInstructionTest0);
      attributeContext0.getCurrentNodePointer();
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, nodeNameTest0, (Pointer) null);
      jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = 860;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      CoreFunction coreFunction1 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction860()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("uXhn8Q", "uXhn8Q");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2827), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      String string0 = "string";
      QName qName0 = new QName("string", "string");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1540, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1540()(-org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000001 * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000006) >= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("uXhn8Q", "uXhn8Q");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(variableReference0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2827), expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext[] evalContextArray0 = new EvalContext[1];
      variableReference0.toString();
      evalContextArray0[0] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".7");
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      ChildContext childContext0 = new ChildContext(selfContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        variableReference0.iteratePointers(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      int int0 = 3537;
      CoreFunction coreFunction0 = new CoreFunction(3537, (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        unionContext0.getContextNodeList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("SBo");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      QName qName0 = new QName("f4Q", (String) null);
      String string0 = "";
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext(parentContext0, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1068, expressionArray0);
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((-1800), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      Step step1 = new Step((-1800), (NodeTest) null, expressionArray1);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("XtG53mAU}9(k");
      Step step2 = new Step(3, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1800), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1574), (NodeTest) null, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(1068, (NodeTest) null, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      EvalContext evalContext0 = expressionPath0.evalSteps(childContext0);
      PredicateContext predicateContext0 = new PredicateContext(evalContext0, expressionPath0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1068()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(860, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction860()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "v2^7,#S6+B[\f'6");
      Step step0 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-844), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2022, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMultiply0, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMultiply0, coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, nameAttributeTest0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, expressionPath0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationLessThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[2], expressionPath0);
      expressionArray0[8] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("(D7`Fglp*2&Iso=0*PA", "ld`08#");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1727), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step((-433), nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-3502), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-528), nodeNameTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-1403), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-1727), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Constant constant0 = new Constant("floor");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      QName qName0 = new QName("O$y*9M@}B)OJX9@*", "g-,|u}yQ~/B8V|");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference1;
      Constant constant1 = new Constant("p9]FE/$oZ5VqO:}A");
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-1467), expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, variableReference1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1467()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 div org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 and (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007) and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008 and org.apache.commons.jxpath.ri.compiler.Constant@0000000009, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 mod (org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002), $O$y*9M@}B)OJX9@*:g-,|u}yQ~/B8V|, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000003 or org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000004 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000007 or org.apache.commons.jxpath.ri.compiler.VariableReference@0000000008 or org.apache.commons.jxpath.ri.compiler.Constant@0000000009, $O$y*9M@}B)OJX9@*:g-,|u}yQ~/B8V|, 'p9]FE/$oZ5VqO:}A')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3430), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3430()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-937), (Expression[]) null);
      QName qName0 = new QName("G~J;t^Ks4|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-937()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Double double0 = new Double((-3841.07));
      Constant constant0 = new Constant(double0);
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationLessThan0, constant0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationMod0, expressionArray0[0]);
      expressionArray0[3] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((-3074), expressionArray0);
      coreFunction0.toString();
      assertEquals((-3074), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Float float0 = new Float(331.3591F);
      Constant constant0 = new Constant(float0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[3], nameAttributeTest0);
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) jXPathContext0);
      QName qName0 = new QName("unknownFunction0()()", "unknownFunction0()()");
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, nodePointer0);
      // Undeclared exception!
      try { 
        nodePointer0.createChild(jXPathContext0, qName0, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot create an object for path //unknownFunction0()():unknownFunction0()()[3], operation is not allowed for this type of node
         //
         verifyException("org.apache.commons.jxpath.ri.model.NodePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant((Number) null);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step((-1260), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1260), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-1260), expressionArray0);
      coreFunction0.getArg2();
      assertEquals((-1260), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-852), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }
}
