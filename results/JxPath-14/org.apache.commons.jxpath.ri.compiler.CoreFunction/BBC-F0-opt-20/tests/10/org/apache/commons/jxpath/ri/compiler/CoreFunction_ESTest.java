/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 06:00:33 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction((-530), (Expression[]) null);
      coreFunction0.toString();
      SelfContext selfContext0 = new SelfContext(nodeSetContext0, (NodeTest) null);
      selfContext0.getValue();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(selfContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Constant constant0 = new Constant("not");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      coreOperationLessThanOrEqual0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Constant constant0 = new Constant("");
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(290, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction(290, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Constant constant0 = new Constant("fjPYLY]y2g@ZT&/^\fjPYLY]y2g@ZT&/^");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Constant constant0 = new Constant("J0k5:me");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationLessThanOrEqual0.args = expressionArray0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant((String) null);
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-498), expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2535, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("O(:u%vr+g3,T&)ZI", "fa");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "O(:u%vr+g3,T&)ZI", (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: O(:u%vr+g3,T&)ZI:fa
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-804));
      Step step0 = new Step(93, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-246), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(6);
      Step step3 = new Step((-143), nodeTypeTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-778), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-246), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Constant constant0 = new Constant(" ");
      CoreFunction coreFunction0 = new CoreFunction(291, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName(" ");
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, " ", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Constant constant0 = new Constant((String) null);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      coreOperationNotEqual0.equal((Object) null, (Object) null);
      QName qName0 = new QName((String) null, "Cannot create collection of type: ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      coreOperationNotEqual0.args = expressionArray0;
      expressionArray0[2] = (Expression) extensionFunction0;
      extensionFunction0.isContextDependent();
      CoreFunction coreFunction0 = new CoreFunction((-74), expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-74), int0);
      
      Expression expression0 = coreFunction0.getArg1();
      Expression expression1 = coreFunction0.getArg3();
      assertEquals((-74), coreFunction0.getFunctionCode());
      
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-74));
      Step step0 = new Step(835, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(835, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = expression0;
      expressionArray1[1] = expression1;
      expressionArray1[2] = expression0;
      expressionArray1[3] = (Expression) coreOperationNotEqual0;
      Step step2 = new Step(12, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-74), nodeTypeTest0, coreOperationNotEqual0.args);
      stepArray0[3] = step3;
      Step step4 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-74), nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      Integer.getInteger((String) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, false, nodeTypeTest0);
      expressionPath0.createContextForStep(ancestorContext0, 284, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionPosition((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Constant constant0 = new Constant("J0k5:me");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Expression[] expressionArray0 = new Expression[8];
      Integer integer0 = new Integer(1593);
      Constant constant0 = new Constant(integer0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationNegate0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNotEqual0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      QName qName0 = new QName("CalseCalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[5], extensionFunction1);
      expressionArray0[6] = (Expression) coreOperationSubtract0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-1970), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreOperationLessThanOrEqual0);
      // Undeclared exception!
      coreFunction0.functionNull(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(39, expressionArray0);
      coreFunction0.getArg1();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationNegate1;
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      QName qName0 = new QName("J0k5:me");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[5] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(732, expressionArray0);
      // Undeclared exception!
      coreFunction2.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Step step0 = new Step(78, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(40, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Step step2 = new Step(78, processingInstructionTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(10, processingInstructionTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(78, processingInstructionTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(78, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(882, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) processingInstructionTest1);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, processingInstructionTest0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) descendantContext0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, false, processingInstructionTest0);
      ancestorContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, precedingOrFollowingContext0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Constant constant0 = new Constant("QvalseQvalse");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3249, expressionArray0);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("0<4l");
      expressionArray0[0] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      Constant constant1 = new Constant(", ");
      expressionArray0[3] = (Expression) constant1;
      Double double0 = Expression.ZERO;
      Constant constant2 = new Constant(double0);
      expressionArray0[4] = (Expression) constant2;
      Constant constant3 = new Constant(double0);
      expressionArray0[5] = (Expression) constant3;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationOr1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[6], expressionArray0[3]);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], extensionFunction0);
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      coreFunction0.functionRound(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 327;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CoreFunction coreFunction0 = new CoreFunction(327, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName((String) null, (String) null);
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      JXPathContext jXPathContext0 = rootContext0.getJXPathContext();
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      coreFunction1.functionName(rootContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'null'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[4] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      Step step0 = new Step(216, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(216, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Constant constant0 = new Constant("6");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-18), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      coreOperationDivide0.isContextDependent();
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionContains((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Constant constant0 = new Constant("");
      Constant constant1 = new Constant(", ");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      constant1.iterate((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction((-2921), expressionArray0);
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      coreOperationAdd0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("number(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)");
      Step step0 = new Step(23, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(23, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant("number(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)");
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreFunction0;
      QName qName0 = new QName("I{{.4", "number(+org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000001)");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[3] = (Expression) variableReference0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step2 = new Step((-3232), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-3232), processingInstructionTest0, coreOperationAdd0.args);
      stepArray0[3] = step3;
      Step step4 = new Step((-3232), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1179, processingInstructionTest0, coreOperationAdd0.args);
      stepArray0[5] = step5;
      Step step6 = new Step((-3232), processingInstructionTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, coreOperationAdd0.args, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 23, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionCeiling(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationDivide0.isContextDependent();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Constant constant0 = new Constant("gvalsegvalse");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3313, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      constant0.toString();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionTranslate((EvalContext) null);
      coreOperationGreaterThan0.toString();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationDivide0.isContextDependent();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      coreOperationGreaterThanOrEqual0.compute((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      coreFunction0.functionStartsWith((EvalContext) null);
      EvalContext evalContext0 = null;
      coreFunction0.functionContains((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(111, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction111()(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      coreOperationDivide0.isContextDependent();
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      EvalContext evalContext0 = null;
      coreOperationGreaterThanOrEqual0.compute((EvalContext) null);
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext1 = null;
      coreFunction0.functionContains((EvalContext) null);
      coreOperationGreaterThanOrEqual0.toString();
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000002 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Constant constant0 = new Constant("Qls[ ");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      Step step0 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1341, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(3836, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, (Expression[]) null, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1341, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Constant constant0 = new Constant("");
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("'6A D\"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-24), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      QName qName0 = new QName("O(:u%vr+g3,T&)Z3I", "O(:u%vr+g3,T&)Z3I");
      Locale locale0 = Locale.US;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, qName0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "O(:u%vr+g3,T&)Z3I");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      coreFunction0.functionNamespaceURI(rootContext0);
      CoreFunction coreFunction1 = new CoreFunction(1340, (Expression[]) null);
      QName qName1 = new QName("falsefalse");
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName1);
      coreFunction1.compute(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: falsefalse
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("falsefalse", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Constant constant0 = new Constant("[nbBa!m ,(K7o#F9}");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(74, expressionArray0);
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(2274, expressionArray0);
      coreFunction1.functionLocalName((EvalContext) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[nbBa!m ,(K7o#F9}");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      QName qName0 = new QName("h", "h");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, extensionFunction0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion1;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAdd0;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "L/my");
      Step step0 = new Step(2603, nodeNameTest0, expressionArray0);
      expressionPath0.isSimpleStep(step0);
      CoreFunction coreFunction0 = new CoreFunction(2603, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      coreFunction0.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Byte byte0 = new Byte((byte)37);
      Constant constant0 = new Constant(byte0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[5];
      Step step0 = new Step((byte)37, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((byte)37, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(56, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1), (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2276), (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(606, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2184);
      Step step0 = new Step((-1852), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2184, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1930, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(88, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("~$Q");
      Step step4 = new Step((-1852), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-1852), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.compute(attributeContext0);
      coreFunction0.functionLast(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Constant constant0 = new Constant("gvalsegvalse");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3301, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Constant constant0 = new Constant("false");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1361), expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("false");
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("falsefalse", "falsefalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("falsefalse");
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("falsefalse");
      Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1117), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, expressionArray0, stepArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      expressionPath0.createContextForStep(childContext0, (-1117), processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("<SNEIH?8Z/i,,%3\"-", "<SNEIH?8Z/i,,%3\"-");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-1210), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1210), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1210));
      Step step2 = new Step((-1210), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, nameAttributeTest0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(nameAttributeTest0, coreOperationDivide0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[2], expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[5] = (Expression) coreOperationNegate1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-1210), expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeTypeTest0);
      // Undeclared exception!
      coreFunction0.functionKey(descendantContext0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%l<rb3!@?[|QO");
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("gvalsegvalse", "gvalsegvalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "starts-with");
      Step step0 = new Step(3355, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      extensionFunction0.isContextDependent();
      expressionArray0[5] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[5], coreOperationGreaterThanOrEqual1);
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(3355, expressionArray0);
      coreFunction0.getArg3();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, true, false);
      // Undeclared exception!
      coreFunction0.functionID(childContext0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      QName qName0 = new QName("O(:u%vr+g3,T&)Z3I", "O(:u%vr+g3,T&)Z3I");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "O(:u%vr+g3,T&)Z3I");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Constant constant0 = new Constant(" KAQjZEIhK");
      constant0.toString();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      NodeTest nodeTest0 = null;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant("M0<en!2w]1y@sz**k'9");
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1471, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(attributeContext0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("falsefalse");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationAdd0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray1[2], coreOperationGreaterThanOrEqual0);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-3530), expressionArray0);
      Integer integer0 = new Integer((-3530));
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "falsefalse", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      coreFunction0.functionFloor(evalContext0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[2];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      Step step0 = new Step(32768, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[3], expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Constant constant0 = new Constant("false");
      EvalContext evalContext0 = null;
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName("\"(6/s!p{Qh)8");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(66, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationSubtract0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, coreOperationNotEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      coreOperationMultiply0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = new Double((-1.0));
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("ceiling");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Byte byte0 = new Byte((byte)1);
      Constant constant1 = new Constant(byte0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      Constant constant2 = new Constant(double0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant2, constant2);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant2, constant2);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1324), expressionArray0);
      Locale locale0 = new Locale("ceiling");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[5], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, qName0, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ceiling");
      SelfContext selfContext0 = new SelfContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionLang(selfContext0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1483), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2066), expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2066), expressionArray0);
      coreFunction1.functionSubstring((EvalContext) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      QName qName0 = new QName("fse", "1");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray0[2], locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction1.compute(evalContext0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Constant constant0 = new Constant("7LPYv$SgBm(");
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, coreOperationEqual0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationEqual0, constant0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("W<Qyn0>*r6");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7LPYv$SgBm(");
      Step step0 = new Step(2541, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(117, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(2541, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.jxpath.ri.compiler.CoreOperationOr");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("XHPj:4yf6`amftyX");
      expressionArray0[0] = (Expression) constant0;
      QName qName0 = new QName("XHPj:4yf6`amftyX");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      extensionFunction0.isContextDependent();
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      constant0.toString();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(extensionFunction0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-3532), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("&fMcAjij&K", "&fMcAjij&K");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 != org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-2234), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "gvalsegvalse");
      Step step0 = new Step(1293, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1293, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1293, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionPath0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], coreOperationNegate1);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate2 = new CoreOperationNegate(coreOperationNegate0);
      coreOperationNegate1.isContextDependent();
      expressionArray0[2] = (Expression) coreOperationNegate2;
      Byte byte0 = new Byte((byte) (-127));
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(763, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[3]);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(predicateContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("J");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(48, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      coreFunction1.computeValue((EvalContext) null);
      Object object0 = coreFunction1.functionSubstring((EvalContext) null);
      assertEquals("false", object0);
      
      Object object1 = coreFunction0.functionContains((EvalContext) null);
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(29);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, nodeTypeTest0);
      coreFunction0.functionFalse(descendantContext0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.toString();
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Incorrect number of arguments: ");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract((Expression) null, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationSubtract0, (Expression) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMultiply0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(coreOperationNotEqual0, expressionArray0[2]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, coreOperationNotEqual1);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationAnd0, (Expression) null);
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((-1296), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant constant0 = new Constant("false");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationMod0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("gvalsegvalse");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-430), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-430), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("falsefalse");
      Step step2 = new Step(397, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(109, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationAdd0, coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-145), expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      QName qName0 = new QName("(:u%vr+g3,T&)Z3I", "ceiling");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "(:u%vr+g3,T&)Z3I");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "(:u%vr+g3,T&)Z3I");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, "(:u%vr+g3,T&)Z3I", nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(117, (Expression[]) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Constant constant0 = new Constant("false");
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 >= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'false', 'false', 'false', 'false', 'false', 'false', 'false')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Constant constant0 = new Constant("gvalse");
      constant0.iterate((EvalContext) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(117, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction117()('gvalse', 'gvalse')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(2649, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction1;
      expressionArray1[1] = (Expression) coreFunction1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[1], coreFunction0);
      expressionArray1[2] = (Expression) coreOperationEqual0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(1720, expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(parentContext0, evalContextArray0);
      UnionContext unionContext1 = new UnionContext(unionContext0, evalContextArray0);
      Locale locale0 = Locale.CHINA;
      NodePointer nodePointer0 = NodePointer.newNodePointer((QName) null, unionContext1, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, unionContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getAbsoluteRootContext();
      coreFunction2.functionConcat(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      QName qName0 = new QName("!:u%vr+g3,T&)Z3I", "!:u%vr+g3,T&)Z3I");
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "!:u%vr+g3,T&)Z3I");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      coreFunction0.functionNamespaceURI(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      constant0.toString();
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, (Step[]) null);
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[5] = (Expression) locationPath0;
      expressionArray0[6] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[3] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) locationPath0;
      expressionArray1[7] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-1849), expressionArray1);
      expressionArray0[7] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(1610612736, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction1.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(1610612736, expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(1610612736, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("", "");
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      expressionArray0[4] = (Expression) constant0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1610612736);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(17, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2649, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("!2n5Ufl&>?]");
      Step step0 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(30, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(27, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(590, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(904, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(5966, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, expressionPath0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Constant constant0 = new Constant("false");
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(87, expressionArray0);
      coreFunction0.functionCount((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction87()('false')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Constant constant0 = new Constant("false");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(22, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-969), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      coreFunction1.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Constant constant0 = new Constant(";c(xlOp8d=_");
      EvalContext evalContext0 = null;
      int int0 = 23;
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAnd0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2561, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionConcat((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Constant constant0 = new Constant(";c(xlOp8d=_");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(';c(xlOp8d=_')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 3;
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      QName qName0 = new QName("/k3{z<[%p/e6", " I");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      extensionFunction0.args = expressionArray0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      coreFunction0.functionTranslate((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2252, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Constant constant0 = new Constant("false");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Step[] stepArray0 = new Step[6];
      QName qName0 = new QName("YSAi0:YljZZ}LFig");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2647), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-4631), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-948), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-2647), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-948), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("IlL!%_+;*kDA=");
      Step step0 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("IlL!%_+;*kDA=");
      Step step2 = new Step(1035, processingInstructionTest1, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, expressionPath0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], coreOperationAnd0);
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationAnd1);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionPath0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationGreaterThan0, (Expression) null);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, processingInstructionTest0, false);
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, processingInstructionTest1);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, true, processingInstructionTest1);
      // Undeclared exception!
      coreFunction0.functionLang(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName((String) null, "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "yPF517{L5");
      Step step0 = new Step((-168), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-168), nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationUnion0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-168), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant("L/");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-752));
      Step step0 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      QName qName0 = new QName("L/", "L/");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "p\":T{)l\"Lw*");
      Step step1 = new Step(32, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-752), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreOperationSubtract0);
      ParentContext parentContext0 = new ParentContext(predicateContext0, nodeNameTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "L/");
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeNameTest1);
      // Undeclared exception!
      coreFunction0.functionNot(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("b");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-174), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionStartsWith((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Constant constant0 = new Constant("f\"Xse");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object0);
      assertEquals(23, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Constant constant0 = new Constant("false");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction1.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number('false', 'false')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("p|q[}");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2156, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(18);
      Constant constant0 = new Constant(integer0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("18");
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 18, 18, 18, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 18)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'false'");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.compute(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("position", "position");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      Constant constant0 = new Constant("position");
      expressionArray0[2] = (Expression) constant0;
      coreOperationEqual0.toString();
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(variableReference0, coreOperationOr0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(390, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      CoreFunction coreFunction1 = new CoreFunction((-1866), expressionArray0);
      Object object0 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertEquals((-1866), coreFunction1.getFunctionCode());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(432, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Constant constant0 = new Constant("false");
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-29));
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      String string0 = coreFunction0.toString();
      assertEquals("format-number('false', 'false')", string0);
      
      nodeTypeTest0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      Object object0 = coreFunction0.functionSubstring(attributeContext0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EvalContext evalContext0 = null;
      int int0 = 18;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = null;
      Constant constant0 = new Constant("normalize-space");
      constant0.toString();
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("'normalize-space'", "'normalize-space'");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "MQl\u0000");
      Step step0 = new Step((-13), nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step((-13), nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-13), nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-13), nodeNameTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      expressionArray1[3] = (Expression) nameAttributeTest0;
      Step step4 = new Step((-13), nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, locationPath0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationUnion0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(2252, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      coreOperationLessThanOrEqual0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      int int0 = 32;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2603, (Expression[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction1 = new CoreFunction(270, (Expression[]) null);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction270()()", string0);
      
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "unknownFunction270()()");
      QName qName0 = new QName("unknownFunction270()()", "unknownFunction270()()");
      Integer integer0 = new Integer(13);
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, integer0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      Object object0 = coreFunction1.functionNamespaceURI(rootContext0);
      assertNotNull(object0);
      assertEquals(2603, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("A root element cannot be added before the DocType", "A root element cannot be added before the DocType");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-540), expressionArray0);
      coreFunction0.getFunctionName();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      extensionFunction0.args = expressionArray1;
      coreFunction0.compute((EvalContext) null);
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-540), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-540), nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-540));
      Step step2 = new Step((-540), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(19, nodeNameTest0, expressionArray1);
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("A root element cannot be added before the DocType");
      Step step4 = new Step((-681), processingInstructionTest0, extensionFunction0.args);
      stepArray0[4] = step4;
      Step step5 = new Step((-681), processingInstructionTest0, extensionFunction0.args);
      stepArray0[5] = step5;
      Step step6 = new Step((-540), processingInstructionTest0, extensionFunction0.args);
      stepArray0[6] = step6;
      Step step7 = new Step((-681), nodeTypeTest0, expressionArray0);
      stepArray0[7] = step7;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, (String) null);
      Step step8 = new Step(19, nodeNameTest1, expressionArray1);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], extensionFunction0.args, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, (-681), processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(28, (Expression[]) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction((-1368), (Expression[]) null);
      coreFunction0.computeValue(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-121), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[0] = null;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expression0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(2780, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Constant constant0 = new Constant("");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Constant constant0 = new Constant("false");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(256, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.compiler.CoreFunction");
      Step step0 = new Step(16809983, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAdd0, locationPath0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Short short0 = new Short((short) (-279));
      Constant constant0 = new Constant(short0);
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("(AhKp<_yxhu");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) constant0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) constant0;
      expressionArray1[6] = (Expression) constant0;
      Step step0 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      Step[] stepArray1 = new Step[8];
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      Step step2 = new Step(255, nodeNameTest0, expressionArray1);
      stepArray1[2] = step2;
      stepArray1[3] = step0;
      stepArray1[4] = step1;
      stepArray1[5] = step1;
      stepArray1[6] = step1;
      stepArray1[7] = step1;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray0[0], expressionArray1, stepArray1);
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[1], expressionArray1[6]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      Constant constant1 = new Constant(short0);
      expressionArray0[4] = (Expression) constant1;
      Constant constant2 = new Constant("(AhKp<_yxhu");
      expressionArray0[5] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(255, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThanOrEqual0);
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) attributeContext0;
      evalContextArray0[1] = (EvalContext) predicateContext0;
      evalContextArray0[2] = (EvalContext) predicateContext0;
      evalContextArray0[3] = (EvalContext) predicateContext0;
      evalContextArray0[4] = (EvalContext) nodeSetContext0;
      UnionContext unionContext0 = new UnionContext(nodeSetContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(descendantContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(16, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(109, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction((-449), (Expression[]) null);
      assertEquals((-449), coreFunction2.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, coreFunction0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationDivide0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = null;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      QName qName0 = new QName("p]U;MS16(>", "<=");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationDivide0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[5], variableReference0);
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      coreFunction0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling(ceiling(), -org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000001, ceiling(), ceiling(), ceiling())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      EvalContext evalContext1 = null;
      coreOperationLessThanOrEqual0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.isContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((-2106), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round('', '', '', '', '', '', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Constant constant0 = new Constant("s&8x5");
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[22];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      Expression[] expressionArray1 = new Expression[22];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      expressionArray0[3] = (Expression) constant0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2078));
      Step step0 = new Step(6, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(42, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1191), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(256, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(256, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[4] = (Expression) locationPath0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      nodeTypeTest0.toString();
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationLessThan0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-29));
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 < org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 'null', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      coreFunction0.functionBoolean((EvalContext) null);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object0);
      
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(21, expressionArray0);
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      assertEquals(21, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CoreFunction coreFunction0 = new CoreFunction(26, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(26, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(45, (Expression[]) null);
      QName qName0 = new QName("n");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "!BA,c`*-|234");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, nodeNameTest0, false);
      coreFunction0.computeValue(precedingOrFollowingContext0);
      ancestorContext0.getContextNodePointer();
      CoreFunction coreFunction1 = new CoreFunction(1361, (Expression[]) null);
      coreFunction1.functionNumber(namespaceContext0);
      CoreFunction coreFunction2 = new CoreFunction(45, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(8);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.toString();
      coreFunction0.compute(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Constant constant0 = new Constant("false");
      Expression[] expressionArray0 = new Expression[7];
      Step[] stepArray0 = new Step[11];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-221));
      Expression[] expressionArray1 = new Expression[0];
      Step step0 = new Step(1318, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) constant0;
      Step step1 = new Step((-221), nodeTypeTest0, expressionArray2);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) constant0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)21;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)22;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((byte)22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 732;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationNegate0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">t`LWv[Z");
      Step step0 = new Step((-4009), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(645, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(432, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(432, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(645, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1975), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(919, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(7, processingInstructionTest0, expressionArray0);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      locationPath0.areBasicPredicates(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(432, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(648, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1201, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1201()('', '', '', '', '', '', '')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-808), expressionArray0);
      coreFunction1.functionNot((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction1.toString();
      coreFunction1.toString();
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray2);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(4, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 10;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";");
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(648, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(1201, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray2[2] = (Expression) constant0;
      CoreFunction coreFunction2 = new CoreFunction(27, expressionArray2);
      CoreFunction coreFunction3 = new CoreFunction(455, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      coreFunction0.toString();
      coreFunction0.toString();
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertTrue(object1.equals((Object)boolean0));
      
      Object object2 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(4.0, object2);
      
      coreFunction0.toString();
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-591), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      boolean boolean0 = coreFunction0.computeContextDependent();
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[8] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.functionStringLength((EvalContext) null);
      QName qName0 = new QName("Cannot convert ", "Cannot convert ");
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, (Expression) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte)110;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)25;
      byteArray0[8] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationSubtract0, (Expression) null);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationNegate0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[3], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      QName qName0 = new QName("", "");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1039), expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-111), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionTrue(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3321);
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(2865, expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(2865, expressionArray0);
      coreFunction1.functionNumber((EvalContext) null);
      assertEquals(2865, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(true, object0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(30);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray1);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3321);
      nodeTypeTest0.toString();
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-1675), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2);
      Step step0 = new Step(30, nodeTypeTest1, expressionArray0);
      Step[] stepArray0 = new Step[4];
      stepArray0[0] = step0;
      stepArray0[1] = step0;
      stepArray0[2] = step0;
      stepArray0[3] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.toString();
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Constant constant0 = new Constant("v'_nh;iv.TcS`]!e`mc");
      Constant constant1 = new Constant("](S7P7`1mm|OA&BU}");
      constant1.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      NodeTest nodeTest0 = null;
      CoreFunction coreFunction0 = new CoreFunction(704, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(3256);
      boolean boolean0 = coreFunction0.computeContextDependent();
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertTrue(object0.equals((Object)boolean0));
      
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      coreFunction1.functionLocalName((EvalContext) null);
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2);
      boolean boolean0 = coreFunction0.computeContextDependent();
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertFalse(object0.equals((Object)boolean0));
      
      coreFunction0.functionLocalName((EvalContext) null);
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object1);
      
      coreFunction0.computeValue((EvalContext) null);
      Object object2 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("true", object2);
      assertEquals(25, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(648, expressionArray0);
      coreFunction0.functionConcat((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("n&IjN]h:~bn92aD#Z)");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(parentContext0, false, processingInstructionTest0);
      AttributeContext attributeContext0 = new AttributeContext(ancestorContext0, processingInstructionTest0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1754), expressionArray0);
      coreFunction1.compute(parentContext0);
      coreFunction1.toString();
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1754()(number(), number(), number(), number(), number())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction1, coreFunction1);
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction2.functionTrue((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionTranslate((EvalContext) null);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, false, true);
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext(childContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction0.functionNot((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray2 = new Expression[2];
      expressionArray2[0] = (Expression) coreFunction0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction1.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(string-length(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001), org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      nodeTypeTest0.toString();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest0);
      coreFunction0.toString();
      coreFunction1.functionName((EvalContext) null);
      coreFunction1.toString();
      coreFunction1.functionBoolean(attributeContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-29()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction1;
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreFunction1;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(format-number(), 1, format-number(), unknownFunction0()(), unknownFunction0()(), format-number())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-111), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction(2649, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      NodeSetContext nodeSetContext0 = new NodeSetContext(parentContext0, (NodeSet) null);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      nodeTypeTest0.toString();
      coreFunction0.compute(attributeContext0);
      coreFunction2.toString();
      coreFunction3.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction3.functionSubstring(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2649()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      int int0 = 25;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(2);
      coreFunction0.computeContextDependent();
      coreFunction0.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, expressionArray0[1]);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      coreOperationLessThanOrEqual0.compute((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object0);
      
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      coreFunction0.toString();
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.toString();
      Object object1 = coreFunction0.functionBoolean((EvalContext) null);
      assertFalse(object1.equals((Object)boolean0));
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(parentContext0, nodeTypeTest0);
      coreFunction1.compute(attributeContext0);
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      Object object0 = coreFunction0.functionSubstring(parentContext0);
      assertEquals("false", object0);
      assertEquals(30, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationOr0, expressionArray0, (Step[]) null);
      expressionArray0[2] = (Expression) expressionPath1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[2], coreOperationAnd0);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-2147483647), expressionArray0);
      expressionArray0[5] = (Expression) coreFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual2 = new CoreOperationLessThanOrEqual(expressionPath1, expressionPath0);
      expressionArray0[6] = (Expression) coreOperationLessThanOrEqual2;
      Constant constant0 = new Constant((String) null);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual2, constant0);
      expressionArray0[7] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(659, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      int int0 = 11;
      CoreFunction coreFunction0 = new CoreFunction(11, expressionArray0);
      coreFunction0.functionStringLength((EvalContext) null);
      QName qName0 = new QName("Cannot convert ", "Cannot convert ");
      coreFunction0.functionNormalizeSpace((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNotEqual0, coreOperationDivide0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[1], coreOperationNotEqual0);
      expressionArray0[4] = (Expression) coreOperationNotEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[4], coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(coreOperationNotEqual0, expressionArray0[5]);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-938));
      Step step0 = new Step(23, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-331), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-24), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step3 = new Step((-447), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(13, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual2, expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) constant0;
      expressionArray1[5] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[6] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray1);
      coreFunction0.toString();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ".!Jw9tKd]4I'L-4");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      coreFunction0.computeContextDependent();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(jXPathContextReferenceImpl0).getLocale();
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-728));
      AncestorContext ancestorContext0 = new AncestorContext(rootContext0, true, nodeTypeTest0);
      JXPathContext jXPathContext0 = ancestorContext0.getJXPathContext();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(ancestorContext0, basicNodeSet0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContext0, nodeSetContext0, (Pointer) null);
      nodeTypeTest0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      rootContext0.reset();
      CoreFunction coreFunction1 = new CoreFunction(40, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction40()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Constant constant0 = new Constant("1et:P{ly7G}");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(13, expressionArray0);
      coreFunction2.computeContextDependent();
      Expression[] expressionArray1 = new Expression[3];
      Expression expression0 = coreFunction2.getArg2();
      expressionArray1[0] = expression0;
      expressionArray1[1] = (Expression) coreFunction2;
      expressionArray1[2] = (Expression) coreFunction1;
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.toString();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(25);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreFunction coreFunction0 = new CoreFunction((-1663), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "''");
      Integer integer0 = new Integer((-4749));
      QName qName0 = new QName("''");
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, jXPathContext0, (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, integer0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionRound((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("MDWO}rD[KJ:1LNl");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext2 = new ParentContext((EvalContext) null, (NodeTest) null);
      parentContext2.setPosition(2927);
      CoreFunction coreFunction0 = new CoreFunction(114, expressionArray0);
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(114, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(101, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLast(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ParentContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      Constant constant1 = new Constant("");
      constant1.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant1, constant1);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      coreFunction1.toString();
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray1);
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object0);
      
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.toString();
      coreFunction0.functionName((EvalContext) null);
      coreFunction0.toString();
      assertEquals(15, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray2 = new Expression[6];
      expressionArray2[0] = (Expression) constant0;
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray2[2] = (Expression) constant0;
      expressionArray2[3] = (Expression) constant0;
      expressionArray2[4] = (Expression) constant0;
      expressionArray2[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray2);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray2);
      coreFunction1.toString();
      CoreFunction coreFunction2 = new CoreFunction(178, expressionArray2);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertFalse(boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction(101, expressionArray1);
      assertEquals(101, coreFunction3.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Constant constant0 = new Constant((Number) null);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction((-2999), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'null'");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, processingInstructionTest0, true);
      precedingOrFollowingContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      QName qName0 = new QName("<<unknown namespace>>");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext(rootContext0, nodeNameTest0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction2 = new CoreFunction((-914), expressionArray0);
      CoreFunction coreFunction3 = new CoreFunction((-914), expressionArray0);
      coreFunction3.functionPosition(attributeContext0);
      constant0.iterate(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-914()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("MDWO}rD[KJ:1LNl");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NodeTest nodeTest0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean('', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant(", ");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      int int0 = 30;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      coreFunction0.functionNot((EvalContext) null);
      constant0.iterate((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      coreFunction0.functionFloor((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Boolean
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("false");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-29), expressionArray0);
      coreFunction0.toString();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(3, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction((-29), (Expression[]) null);
      String string0 = coreFunction2.toString();
      assertEquals("unknownFunction-29()()", string0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      String string1 = coreFunction1.toString();
      assertEquals("count()", string1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      CoreFunction coreFunction0 = new CoreFunction((-587), expressionArray0);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-587()(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(67, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      NodeTest nodeTest0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      coreFunction0.functionNot((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      constant0.iterate((EvalContext) null);
      expressionArray1[0] = (Expression) constant0;
      coreFunction0.functionFloor((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(57, expressionArray1);
      coreFunction1.functionLocalName((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      int int0 = 498;
      CoreFunction coreFunction0 = new CoreFunction((-1341), expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(expressionArray1[0], coreOperationLessThan0);
      expressionArray1[4] = (Expression) coreOperationGreaterThan2;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreOperationNotEqual0;
      expressionArray2[1] = (Expression) coreOperationLessThan0;
      expressionArray2[2] = (Expression) coreOperationGreaterThan0;
      expressionArray2[3] = (Expression) coreOperationLessThan0;
      expressionArray2[4] = (Expression) coreOperationGreaterThan2;
      Step step2 = new Step(9, (NodeTest) null, expressionArray2);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], expressionArray2[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      coreFunction0.computeValue(attributeContext0);
      coreFunction0.functionNamespaceURI((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray1);
      coreFunction0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      Step[] stepArray0 = new Step[1];
      Step step0 = new Step(30, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-995), expressionArray0);
      coreFunction0.functionLocalName((EvalContext) null);
      Object object0 = coreFunction0.functionCount((EvalContext) null);
      assertEquals(1.0, object0);
      
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      Object object1 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals((-995), coreFunction0.getFunctionCode());
      assertEquals(0.0, object1);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      coreFunction0.functionNormalizeSpace(attributeContext0);
      coreFunction0.getFunctionName();
      Double double0 = Expression.NOT_A_NUMBER;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      Step[] stepArray0 = new Step[4];
      Step step0 = new Step(19, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction1, expressionArray0, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction2 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      NodeTest nodeTest0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) constant0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, processingInstructionTest0);
      processingInstructionTest0.toString();
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(attributeContext0, basicNodeSet0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, '', org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      String string0 = coreFunction1.toString();
      assertEquals("sum()", string0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      int int0 = 23;
      CoreFunction coreFunction0 = new CoreFunction(498, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction498()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      int int0 = 8388608;
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(498, expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction498()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      QName qName0 = new QName("Djf");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      DescendantContext descendantContext0 = new DescendantContext(precedingOrFollowingContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      String string0 = "FG~JqQ4T%O";
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-41));
      Step step0 = new Step((-41), nodeTypeTest0, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("6");
      Step step1 = new Step((-41), processingInstructionTest0, (Expression[]) null);
      step0.toString();
      Step step2 = new Step((-59), nodeTypeTest0, (Expression[]) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.functionNull((EvalContext) null);
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      String string0 = coreFunction0.getFunctionName();
      assertEquals("position", string0);
      
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("");
      coreFunction0.getArg3();
      assertEquals(2, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Step[] stepArray0 = new Step[3];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(1244, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1244, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1244, processingInstructionTest0, expressionArray0);
      processingInstructionTest0.toString();
      step0.toString();
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1244, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, false, processingInstructionTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(ancestorContext0, processingInstructionTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(precedingOrFollowingContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("round");
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationSubtract0);
      Step[] stepArray0 = new Step[8];
      QName qName0 = new QName("", "Root is ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
      Step step1 = new Step((-1649), nodeNameTest1, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1649), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = (Expression) coreOperationNegate0;
      expressionArray1[5] = (Expression) constant0;
      Step step3 = new Step(23, nodeNameTest1, expressionArray1);
      stepArray0[3] = step3;
      Expression[] expressionArray2 = new Expression[6];
      expressionArray2[0] = (Expression) coreOperationSubtract0;
      expressionArray2[1] = (Expression) constant0;
      expressionArray2[2] = (Expression) coreOperationSubtract0;
      expressionArray2[3] = (Expression) coreOperationSubtract0;
      expressionArray2[4] = (Expression) coreOperationNegate0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray2[1], expressionArray1[1]);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, expressionArray2[3]);
      expressionArray2[5] = (Expression) coreOperationMultiply0;
      Step step4 = new Step(3, nodeNameTest0, expressionArray2);
      stepArray0[4] = step4;
      Step step5 = new Step(48, nodeNameTest0, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(402, nodeNameTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(23, nodeNameTest1, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, expressionArray2[4]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationNegate0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], coreOperationGreaterThan0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1649), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Constant constant0 = new Constant("tk7%");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 6;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      QName qName0 = new QName("H;dp&E9VK7D2q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "H;dp&E9VK7D2q");
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      assertEquals(1, coreFunction0.getArgumentCount());
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      Object object0 = coreFunction0.functionNormalizeSpace(attributeContext0);
      assertEquals("true", object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("format-number", string0);
      
      Object object1 = coreFunction0.functionCount(attributeContext0);
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step((-59), nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-59), nodeTypeTest0, expressionArray0);
      Expression[] expressionArray1 = new Expression[14];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      step1.toString();
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step2 = new Step((-59), nodeTypeTest0, expressionArray1);
      coreFunction0.functionNull((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(942, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      int int0 = coreFunction0.getFunctionCode();
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 732;
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      Expression[] expressionArray1 = new Expression[8];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationNegate0;
      expressionArray1[5] = null;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(19, expressionArray1);
      coreFunction1.getFunctionName();
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-855), (Expression[]) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(12, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8388608, (Expression[]) null);
      coreFunction0.getFunctionName();
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(498, expressionArray0);
      coreFunction2.getArgumentCount();
      // Undeclared exception!
      try { 
        coreFunction2.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction498()(namespace-uri(), namespace-uri(), namespace-uri(), namespace-uri())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      int int0 = 2;
      Expression[] expressionArray0 = new Expression[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CoreFunction coreFunction0 = new CoreFunction(687, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, (Expression) null);
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(687, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(2, (NodeTest) null, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(16, (NodeTest) null, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1656, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction687()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-855), (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-92), expressionArray0);
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      coreOperationOr0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationOr0);
      CoreFunction coreFunction1 = new CoreFunction(15, coreOperationOr0.args);
      coreFunction0.toString();
      assertEquals(1, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(8, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      Integer integer0 = Integer.valueOf(8);
      Constant constant0 = new Constant(integer0);
      expressionArray0[2] = (Expression) constant0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[3] = (Expression) constant1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[3], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd1, expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMod0, coreOperationAnd0);
      expressionArray0[7] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(944, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(12, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step3 = new Step((-59), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(206, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(12, coreFunction0.getFunctionCode());
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext1 = null;
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      int int0 = 9;
      CoreFunction coreFunction1 = new CoreFunction(9, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      QName qName0 = new QName("floor", "-<P,D`[Tiy=T`)7t");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction((-247), expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("H;dp&E9VK7D2q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "H;dp&E9VK7D2q");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(attributeContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, nodeTypeTest0);
      parentContext1.setPosition(18);
      CoreFunction coreFunction0 = new CoreFunction(944, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("MDWO}rD[KJ:1LNl");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext2 = new ParentContext((EvalContext) null, (NodeTest) null);
      int int0 = 2917;
      parentContext2.setPosition(2917);
      CoreFunction coreFunction0 = new CoreFunction(21, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(12, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step3 = new Step((-59), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      EvalContext evalContext0 = null;
      coreFunction0.functionNull((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      byte byte0 = (byte) (-40);
      Byte byte1 = new Byte((byte) (-40));
      Constant constant0 = new Constant(byte1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationMultiply0);
      CoreFunction coreFunction1 = new CoreFunction((byte) (-40), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, constant0);
      int int0 = 2471;
      CoreFunction coreFunction0 = new CoreFunction(2471, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(110, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("2;dp&E9VK7D2q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "2;dp&E9VK7D2q");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, nodeTypeTest0);
      parentContext1.setPosition(18);
      CoreFunction coreFunction0 = new CoreFunction(944, expressionArray0);
      coreFunction0.functionFloor(parentContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext1, nodeTypeTest0);
      coreFunction0.functionNamespaceURI(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(parentContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction944()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      int int0 = 732;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationNegate0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationLessThanOrEqual0, (Expression) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationLessThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationNegate0);
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      QName qName0 = new QName((String) null, (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[1]);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThan0, coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      expressionArray0[5] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[6] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(162, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionSum((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      int int0 = (-591);
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("s");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-591), expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-591()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("H;dp&E9VK7D2q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "H;dp&E9VK7D2q");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(570, (Expression[]) null);
      coreFunction1.getFunctionName();
      coreFunction1.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction570()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2404, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("]");
      Step step0 = new Step(24, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(24, processingInstructionTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(24, processingInstructionTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(2404, processingInstructionTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(24, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
      assertEquals(2404, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Exception trying to create xpath ");
      Step step0 = new Step((-4756), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(684, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-4756), processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-4756), processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(1656, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      QName qName0 = new QName("}3H", "}3H");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationAnd0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference1;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[6] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(684, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      QName qName0 = new QName("H;dp&E9VK7D2q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "H;dp&E9VK7D2q");
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationAdd0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      QName qName0 = new QName("namespace::");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "namespace::");
      ParentContext parentContext0 = new ParentContext(evalContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 >= org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002, 0, org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 <= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003), null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(8388608, (Expression[]) null);
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertEquals(8388608, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationAdd0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationSubtract0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      assertNull(expression0);
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      int int0 = (-591);
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("s");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationDivide0, constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationDivide0, constant0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, (Expression) null);
      QName qName0 = new QName("s");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, constant0);
      CoreFunction coreFunction0 = new CoreFunction(71, expressionArray0);
      coreFunction0.getArg1();
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction71()('s', null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      int int0 = 2917;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2917, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("floor");
      CoreFunction coreFunction1 = new CoreFunction((-1208), (Expression[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2917()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      int int0 = 2917;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2917, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("floor");
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, expressionArray1[1]);
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2812, expressionArray1);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1244);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, nodeTypeTest0);
      parentContext1.setPosition(18);
      CoreFunction coreFunction0 = new CoreFunction(944, expressionArray0);
      coreFunction0.functionFloor(parentContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction944()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      coreFunction0.args = expressionArray0;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      boolean boolean0 = false;
      String string0 = "FG~JqQ4T%O";
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("s");
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("s");
      Step step0 = new Step((-591), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) constant0;
      Step step1 = new Step((-591), processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step((-591), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], coreOperationSubtract0);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-591), expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals((-591), coreFunction0.getFunctionCode());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "position");
      Step step0 = new Step(1, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreOperationOr0;
      expressionArray2[1] = (Expression) coreOperationOr0;
      expressionArray2[2] = (Expression) coreOperationOr0;
      expressionArray2[3] = (Expression) coreOperationOr0;
      expressionArray2[4] = (Expression) coreOperationOr0;
      Step step1 = new Step(0, nodeNameTest1, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step((-566), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(1, nodeNameTest1, expressionArray2);
      stepArray0[5] = step5;
      Step step6 = new Step(40, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, expressionArray1, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionPath0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray2[3]);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreOperationNotEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant("");
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-388), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      String string0 = ";>x~ndUeU>=8@.a2";
      QName qName0 = new QName(";>x~ndUeU>=8@.a2");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], variableReference0);
      coreOperationGreaterThanOrEqual0.args = expressionArray0;
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()($;>x~ndUeU>=8@.a2, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 >= (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003) >= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004, org.apache.commons.jxpath.ri.compiler.VariableReference@0000000002 + (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003) + org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000004)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("gQ})xbA_WZ1", "z`\"Sd:R$blz");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Step[] stepArray0 = new Step[7];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(0);
      Step step0 = new Step(12, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreFunction0;
      expressionArray1[6] = (Expression) coreFunction0;
      expressionArray1[7] = (Expression) coreFunction0;
      expressionArray1[8] = (Expression) coreFunction0;
      Step step3 = new Step((-59), nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(206, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-59), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(206, nodeTypeTest0, expressionArray1);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext evalContext0 = expressionPath0.evalSteps((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(732, expressionArray0);
      coreFunction0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction732()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getArgumentCount();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      coreFunction0.toString();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThan0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(expressionArray1[0], coreOperationLessThan0);
      expressionArray1[4] = (Expression) coreOperationGreaterThan2;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, expressionArray1);
      stepArray0[1] = step1;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreOperationNotEqual0;
      expressionArray2[1] = (Expression) coreOperationLessThan0;
      expressionArray2[2] = (Expression) coreOperationGreaterThan0;
      expressionArray2[3] = (Expression) coreOperationLessThan0;
      expressionArray2[4] = (Expression) coreOperationGreaterThan2;
      Step step2 = new Step(9, (NodeTest) null, expressionArray2);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray1, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], expressionArray2[1]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg2();
      assertEquals(0, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Long long0 = new Long(64);
      Constant constant0 = new Constant(long0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[0]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreOperationNotEqual0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Constant constant1 = new Constant(long0);
      expressionArray0[3] = (Expression) constant1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, expressionArray0[1]);
      expressionArray0[7] = (Expression) coreOperationSubtract1;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3761);
      Step step0 = new Step(64, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3761, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3761, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreOperationSubtract1;
      expressionArray1[3] = (Expression) constant0;
      Step step3 = new Step(11, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2530), nodeTypeTest0, expressionArray1);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[8] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(64, expressionArray0);
      coreFunction0.getArg3();
      assertEquals(64, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      int int0 = (-2141);
      CoreFunction coreFunction0 = new CoreFunction((-2141), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2917, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("floor");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      parentContext0.setPosition(2917);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2917()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      constant0.toString();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionRound((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("namespace-uri", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[1], coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationLessThanOrEqual0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getArg1();
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2867), (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        ancestorContext0.getNodeSet();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
