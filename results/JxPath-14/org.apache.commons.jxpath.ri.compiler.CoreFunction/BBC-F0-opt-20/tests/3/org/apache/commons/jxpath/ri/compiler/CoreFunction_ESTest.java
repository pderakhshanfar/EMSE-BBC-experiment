/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 14 05:42:01 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.RoundingMode;
import java.text.DecimalFormat;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("{##b]d3");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      boolean boolean1 = coreOperationNotEqual0.computeContextDependent();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      coreOperationNotEqual0.args = expressionArray0;
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      Double double0 = new Double(952.3105591750069);
      assertEquals(952.3105591750069, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant1 = new Constant(double0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("91750069", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(952.3105591750069, 10, 10)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)65;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte) (-48);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-13);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byteArray0[8] = (byte) (-64);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)65, (byte) (-101), (byte)41, (byte) (-48), (byte)8, (byte)13, (byte) (-13), (byte) (-64)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("[nd1");
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((byte)13, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(13, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(368, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(368, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1174, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1174, step2.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(2232, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(2232, step3.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("[nd1", qName0.toString());
      assertEquals("[nd1", qName0.getName());
      assertEquals("[nd1", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step4.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(5, stepArray0.length);
      assertEquals(7, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Step[] stepArray1 = new Step[9];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step0;
      stepArray1[1] = step4;
      stepArray1[2] = step3;
      stepArray1[3] = step2;
      stepArray1[4] = step3;
      stepArray1[5] = step1;
      stepArray1[6] = step1;
      stepArray1[7] = step0;
      stepArray1[8] = step2;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationOr0, expressionArray0, stepArray1);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, stepArray1.length);
      assertEquals(7, expressionArray0.length);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      
      expressionArray0[2] = (Expression) expressionPath1;
      Constant constant0 = new Constant("[nd1");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[3] = (Expression) constant0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], expressionArray0[2]);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], expressionArray0[3]);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      Constant constant1 = new Constant("Stl[y'");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[6] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("{##b]d3");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("{##b]d3");
      assertEquals("{##b]d3", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      assertEquals("{##b]d3", processingInstructionTest0.getTarget());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionKey(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Byte byte0 = new Byte((byte)18);
      assertEquals((byte)18, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2349, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2349, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(2349, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("18", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2349()(18, 'lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`', 'lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2350), expressionArray0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[9];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      evalContextArray0[8] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      QName qName0 = new QName("{#");
      assertEquals("{#", qName0.getName());
      assertEquals("{#", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "{#");
      assertEquals("{#", qName0.getName());
      assertEquals("{#", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{#", nodeNameTest0.toString());
      assertEquals("{#", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext(unionContext0, nodeNameTest0, true, true);
      assertEquals("{#", qName0.getName());
      assertEquals("{#", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("{#", nodeNameTest0.toString());
      assertEquals("{#", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertTrue(childContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(9, evalContextArray0.length);
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(childContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "name");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[0] = (Expression) coreOperationUnion0;
      QName qName0 = new QName("name");
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(807);
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(807, nodeTypeTest0, expressionArray0);
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(807, step0.getAxis());
      assertEquals(7, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(807, nodeTypeTest0, expressionArray0);
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(807, step1.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(62, nodeTypeTest0, expressionArray0);
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(62, step2.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(794, nodeTypeTest0, expressionArray0);
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(794, step3.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\\");
      assertEquals("\\", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step4 = new Step(25, processingInstructionTest0, expressionArray0);
      assertEquals("\\", processingInstructionTest0.getTarget());
      assertEquals(25, step4.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(4612, nodeTypeTest0, expressionArray0);
      assertEquals(4612, step5.getAxis());
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(7, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(794, processingInstructionTest0, expressionArray0);
      assertEquals("\\", processingInstructionTest0.getTarget());
      assertEquals(794, step6.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "name");
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertEquals("name", nodeNameTest0.toString());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step7 = new Step(4612, nodeNameTest0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertEquals("name", nodeNameTest0.toString());
      assertEquals("name", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(4612, step7.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step6));
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Step step8 = new Step((-1682), processingInstructionTest0, expressionArray0);
      assertEquals("\\", processingInstructionTest0.getTarget());
      assertEquals((-1682), step8.getAxis());
      assertEquals(7, expressionArray0.length);
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step3));
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray0);
      assertNull(qName0.getPrefix());
      assertEquals("name", qName0.toString());
      assertEquals("name", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(expressionPath1.equals((Object)expressionPath0));
      assertNotNull(expressionPath1);
      
      expressionArray0[3] = (Expression) expressionPath1;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[1], coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, expressionArray0[2]);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[4], coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[5] = (Expression) coreOperationLessThan0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationDivide0, expressionArray0[2]);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-846), expressionArray0);
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals((-846), coreFunction0.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationLessThan0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(7, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      SelfContext selfContext0 = new SelfContext(predicateContext0, nodeTypeTest0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(807, nodeTypeTest0.getNodeType());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(7, expressionArray0.length);
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      coreFunction0.functionRound(selfContext0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("S8/ACGhmo*PG");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      expressionArray1[1] = (Expression) coreOperationNotEqual0;
      coreOperationNotEqual0.args = expressionArray0;
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      expressionArray1[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray1);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertNull(qName0.getPrefix());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", qName0.getName());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", qName0.getName());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(1248, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(1248, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(266);
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(4039, nodeTypeTest0, expressionArray0);
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(4039, step0.getAxis());
      assertEquals(2, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeTypeTest0, expressionArray0);
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(10, step1.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(15, nodeTypeTest0, expressionArray0);
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(15, step2.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-821), nodeTypeTest0, expressionArray0);
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals((-821), step3.getAxis());
      assertEquals(2, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(10, nodeTypeTest0, expressionArray0);
      assertEquals(10, step4.getAxis());
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      assertEquals(2, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertNotNull(selfContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, coreOperationUnion0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      EvalContext evalContext0 = expressionPath0.evalSteps(predicateContext0);
      assertNotSame(predicateContext0, evalContext0);
      assertNotSame(evalContext0, predicateContext0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(evalContext0.equals((Object)predicateContext0));
      assertNotNull(evalContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(evalContext0, true, nodeTypeTest0);
      assertEquals(0, selfContext0.getPosition());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(evalContext0.isChildOrderingRequired());
      assertEquals(1, evalContext0.getDocumentOrder());
      assertEquals(0, evalContext0.getPosition());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(266, nodeTypeTest0.getNodeType());
      assertEquals(2, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertFalse(predicateContext0.equals((Object)evalContext0));
      assertFalse(evalContext0.equals((Object)predicateContext0));
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace(ancestorContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer((-24));
      assertEquals((-24), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertNotNull(coreOperationMultiply0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreOperationMultiply0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationLessThanOrEqual0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      expressionArray0[1] = (Expression) coreOperationMod0;
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-24), expressionArray0);
      assertEquals((-24), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-24), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-24()(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) mod (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000005 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("8/CUGh o*PG");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("{##b]d3");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("r:K_0{W6");
      assertEquals("r:K_0{W6", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("", object1);
      assertNotNull(object1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(2, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("format-number");
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("format-number", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      assertNull(qName0.getPrefix());
      assertEquals("format-number", qName0.getName());
      assertEquals("format-number", qName0.toString());
      assertFalse(variablePointer0.isAttribute());
      assertFalse(variablePointer0.isActual());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = null;
      try {
        jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "format-number", variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: format-number
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Constant constant0 = new Constant("Wh+%+G%(k]cC=");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("Wh+%+G%(k]cC=");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) nodeSetContext0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      DescendantContext descendantContext0 = new DescendantContext(nodeSetContext0, true, nodeTypeTest0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertNotNull(descendantContext0);
      
      ChildContext childContext0 = new ChildContext(descendantContext0, nodeTypeTest0, true, true);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      Pointer pointer0 = childContext0.getSingleNodePointer();
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertTrue(childContext0.isChildOrderingRequired());
      assertEquals(1, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNull(pointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(1, nodeSetContext0.getPosition());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("root", string0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(descendantContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-2846), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2846), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2846));
      assertEquals((-2846), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      coreOperationOr0.args = expressionArray0;
      assertEquals("or", coreOperationOr0.getSymbol());
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertEquals((-2846), nodeTypeTest0.getNodeType());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      String string0 = nodeTypeTest0.toString();
      assertEquals((-2846), nodeTypeTest0.getNodeType());
      assertEquals("UNKNOWN()", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      coreFunction0.functionFloor(childContext0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Constant constant0 = new Constant("Wh+%+G%(k]cC=");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3248), expressionArray0);
      assertEquals((-3248), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals((-3248), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("Wh+%+G%(k]cC=NaNWh+%+G%(k]cC=", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals((-3248), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("Wh+%+G%(k]cC=", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-3248), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("10", string0);
      assertNotNull(string0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      precedingOrFollowingContext0.reset();
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionContains(precedingOrFollowingContext0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(10, 10)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = constant0.toString();
      assertNotSame(constant0, constant1);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("10", string0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(string0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertNotNull(precedingOrFollowingContext0);
      
      precedingOrFollowingContext0.reset();
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionContains(precedingOrFollowingContext0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(2, expressionArray0.length);
      assertEquals(false, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with('lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`', 10)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[2] = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionConcat((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`10", object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      Object object1 = coreFunction2.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals("dhm >PG`lXe8/ACGFdhm >PG`", object1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(evalContextArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with('lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`', 10)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer((-594));
      assertEquals((-594), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("-594", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("-594", object1);
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Integer integer0 = new Integer(32);
      assertEquals(32, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationDivide0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("32", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("32", object1);
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("true", object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[3] = evalContextArray0[0];
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(7, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("10", string0);
      assertNotNull(string0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.computeValue(evalContextArray0[0]);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringAfter(evalContextArray0[6]);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertEquals("", object1);
      assertFalse(object1.equals((Object)string0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[3] = evalContextArray0[0];
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(7, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = constant0.toString();
      assertNotSame(constant0, constant1);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("10", string0);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(string0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertEquals("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`", processingInstructionTest0.getTarget());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.computeValue(evalContextArray0[0]);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstringAfter(evalContextArray0[6]);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertEquals("", object1);
      assertFalse(object1.equals((Object)string0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2350), expressionArray0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(3355, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3355, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("Exception trying to set value with xpath ");
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(rootContext1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Exception trying to set value with xpath ");
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.getNamespaceURI());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      AncestorContext ancestorContext0 = new AncestorContext(rootContext1, true, nodeNameTest0);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.getNamespaceURI());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(ancestorContext0);
      
      RootContext rootContext2 = ancestorContext0.getRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertEquals((-2350), coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("Exception trying to set value with xpath ", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("Exception trying to set value with xpath ", qName0.toString());
      assertTrue(variablePointer0.isRoot());
      assertFalse(variablePointer0.isNode());
      assertFalse(variablePointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertTrue(variablePointer0.isActual());
      assertNull(variablePointer0.getNamespaceURI());
      assertTrue(variablePointer0.isContainer());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.getNamespaceURI());
      assertEquals("Exception trying to set value with xpath ", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(rootContext2);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'Exception trying to set value with xpath '
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1024, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jXPathContextReferenceImpl0.setLocale(locale0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      
      boolean boolean0 = initialContext0.setPosition((-3062));
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3062), initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(1024, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals((-3062), initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(1.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1024()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Constant constant1 = new Constant("lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((byte)10, expressionArray0);
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(7, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'N");
      assertEquals("'N", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      String string0 = constant1.toString();
      assertNotSame(constant1, constant0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals("'lXe8/ACGFdhm >PG`lXe8/ACGFdhm >PG`'", string0);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(string0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContextArray0[1], processingInstructionTest0, false);
      assertEquals("'N", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(7, evalContextArray0.length);
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.computeValue(precedingOrFollowingContext0);
      assertEquals("'N", processingInstructionTest0.getTarget());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName((String) null, "4L(Y%3pAkDjW");
      assertEquals("4L(Y%3pAkDjW", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4L(Y%3pAkDjW", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("4L(Y%3pAkDjW", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4L(Y%3pAkDjW", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, expressionArray0[0]);
      assertEquals("4L(Y%3pAkDjW", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4L(Y%3pAkDjW", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, coreOperationMod0);
      assertEquals("4L(Y%3pAkDjW", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4L(Y%3pAkDjW", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[2] = (Expression) coreOperationDivide0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("4L(Y%3pAkDjW", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("4L(Y%3pAkDjW", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[3] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[0];
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1038);
      assertEquals(1038, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertEquals(1038, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      ParentContext parentContext0 = new ParentContext(namespaceContext0, nodeTypeTest0);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1038, nodeTypeTest0.getNodeType());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute(parentContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "substring-after");
      assertEquals("substring-after", nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-218), nodeNameTest0, expressionArray0);
      assertEquals("substring-after", nodeNameTest0.getNamespaceURI());
      assertEquals((-218), step0.getAxis());
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-218));
      assertEquals((-218), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step1 = new Step((-218), nodeTypeTest0, expressionArray0);
      assertEquals((-218), nodeTypeTest0.getNodeType());
      assertEquals((-218), step1.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(1999, (NodeTest) null, expressionArray0);
      assertEquals(1999, step2.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1734, nodeNameTest0, expressionArray0);
      assertEquals("substring-after", nodeNameTest0.getNamespaceURI());
      assertEquals(1734, step3.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction1.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertFalse(extensionFunction1.equals((Object)extensionFunction0));
      assertNotNull(extensionFunction1);
      
      expressionArray0[3] = (Expression) extensionFunction1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[3]);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[5] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("substring-after");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[6], expressionArray0[3]);
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      
      expressionArray0[7] = (Expression) coreOperationMod1;
      CoreOperationMod coreOperationMod2 = new CoreOperationMod(expressionArray0[5], expressionArray0[4]);
      assertEquals("mod", coreOperationMod2.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMod2.equals((Object)coreOperationMod1));
      assertFalse(coreOperationMod2.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod2);
      
      expressionArray0[8] = (Expression) coreOperationMod2;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-907), expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((JXPathContext) null, (Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("O[\"~>'J&UFZp7`@M", "O[\"~>'J&UFZp7`@M");
      assertEquals("O[\"~>'J&UFZp7`@M:O[\"~>'J&UFZp7`@M", qName0.toString());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getName());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertEquals("O[\"~>'J&UFZp7`@M:O[\"~>'J&UFZp7`@M", qName0.toString());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getName());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("O[\"~>'J&UFZp7`@M:O[\"~>'J&UFZp7`@M", qName0.toString());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getName());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-907), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("O[\"~>'J&UFZp7`@M:O[\"~>'J&UFZp7`@M", qName0.toString());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getName());
      assertEquals("O[\"~>'J&UFZp7`@M", qName0.getPrefix());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(beanPointer0.isContainer());
      assertTrue(beanPointer0.isNode());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertEquals(1, beanPointer0.getLength());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertTrue(beanPointer0.isRoot());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(string0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertFalse(boolean0);
      
      CoreOperationMod coreOperationMod1 = (CoreOperationMod)coreFunction0.getArg1();
      assertSame(coreOperationMod1, coreOperationMod0);
      assertEquals((-1), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationMod1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      Step[] stepArray0 = new Step[9];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(32);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1886), nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals((-1886), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1013, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(1013, step1.getAxis());
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("'r");
      assertEquals("'r", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationAnd0;
      Step step2 = new Step(409, processingInstructionTest0, expressionArray1);
      assertEquals("'r", processingInstructionTest0.getTarget());
      assertEquals(409, step2.getAxis());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-2413), processingInstructionTest0, expressionArray1);
      assertEquals((-2413), step3.getAxis());
      assertEquals("'r", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray1.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(32, nodeTypeTest0, expressionArray0);
      assertEquals(32, step4.getAxis());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(288, processingInstructionTest0, expressionArray1);
      assertEquals(288, step5.getAxis());
      assertEquals("'r", processingInstructionTest0.getTarget());
      assertEquals(1, expressionArray1.length);
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(1013, nodeTypeTest0, expressionArray0);
      assertEquals(1013, step6.getAxis());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Step step7 = new Step(1013, nodeTypeTest0, expressionArray0);
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(1013, step7.getAxis());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step1));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step3));
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      Expression[] expressionArray2 = new Expression[5];
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      
      expressionArray2[0] = (Expression) coreOperationMod0;
      Float float0 = new Float((-347.262F));
      assertEquals((-347.262F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray2, stepArray0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(9, stepArray0.length);
      assertEquals(5, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      
      expressionArray2[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray2[1], expressionArray1[0]);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(5, expressionArray2.length);
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationEqual0);
      
      expressionArray2[2] = (Expression) coreOperationEqual0;
      expressionArray2[3] = (Expression) coreOperationMod0;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      Step step8 = new Step(409, nodeTypeTest0, expressionArray2);
      assertEquals(409, step8.getAxis());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertEquals(5, expressionArray2.length);
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step7));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step3));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(9, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray2[3], expressionArray2[3]);
      assertEquals("=", coreOperationEqual1.getSymbol());
      assertEquals(5, expressionArray2.length);
      assertFalse(coreOperationEqual1.equals((Object)coreOperationEqual0));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(coreOperationEqual1);
      
      expressionArray0[2] = (Expression) coreOperationEqual1;
      QName qName0 = new QName("id", "E0o`");
      assertEquals("id:E0o`", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("E0o`", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      assertEquals("id:E0o`", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("E0o`", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, locationPath0);
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(9, stepArray0.length);
      assertEquals(5, expressionArray2.length);
      assertEquals(1, expressionArray1.length);
      assertFalse(coreOperationEqual0.equals((Object)coreOperationEqual1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray2));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(1013, expressionArray0);
      assertEquals(1013, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, false, false);
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(32, nodeTypeTest0.getNodeType());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      expressionArray0[2] = null;
      CoreFunction coreFunction0 = new CoreFunction(601, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(601, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("2L/)V,e93'");
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationEqual0, coreOperationLessThan0);
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, coreOperationEqual0);
      assertNull(qName0.getPrefix());
      assertEquals("2L/)V,e93'", qName0.getName());
      assertEquals("2L/)V,e93'", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      assertEquals(4, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer(20);
      assertEquals(20, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("0", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction((byte)10, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)10, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(10, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) byte0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      Integer integer0 = new Integer((-1372));
      assertEquals((-1372), (int)integer0);
      assertNotNull(integer0);
      
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, integer0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, integer0, beanPointer0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isCollection());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isAttribute());
      assertEquals(1, beanPointer0.getLength());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isContainer());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertTrue(beanPointer0.isRoot());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: 
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      coreOperationNotEqual0.args = expressionArray0;
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(601, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(601, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(16777216);
      assertEquals(16777216, (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, coreOperationMod0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThanOrEqual0, coreOperationDivide0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreOperationMod0.computeValue((EvalContext) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(0.0, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionTranslate((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("1677", object1);
      assertNotNull(object1);
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals(3, int0);
      
      Object object2 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("true", object2);
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionStartsWith((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertEquals(true, object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean1));
      assertFalse(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      Expression expression0 = coreFunction1.getArg2();
      assertNotSame(coreFunction1, coreFunction0);
      assertSame(expression0, constant0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(1, coreFunction1.getFunctionCode());
      assertFalse(expression0.computeContextDependent());
      assertFalse(expression0.isContextDependent());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(expression0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      assertEquals((byte)10, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant0 = new Constant(byte0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[1], expressionArray0[2]);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, (NodeTest) null);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertNotNull(attributeContext0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) attributeContext0);
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      DecimalFormat decimalFormat0 = new DecimalFormat();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertNotNull(decimalFormat0);
      
      QName qName0 = new QName("QV=i%>Ka-V3");
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, locale0);
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, decimalFormat0, nullPointer0);
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(rootContext0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, (NodeTest) null);
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(namespaceContext0);
      
      String string0 = (String)coreFunction0.functionTranslate(namespaceContext0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(nullPointer0.isAttribute());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(1, coreFunction0.getFunctionCode());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertFalse(decimalFormat0.isParseBigDecimal());
      assertTrue(decimalFormat0.isGroupingUsed());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertFalse(decimalFormat0.isParseIntegerOnly());
      assertFalse(decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("#,##0.###", decimalFormat0.toLocalizedPattern());
      assertEquals(Integer.MAX_VALUE, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals("QV=i%>Ka-V3", qName0.toString());
      assertEquals("QV=i%>Ka-V3", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(3, expressionArray0.length);
      assertEquals("", string0);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer((-360));
      assertEquals((-360), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(96, expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(96, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, coreFunction0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(96, coreFunction0.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      Double double0 = new Double(4118.0);
      assertEquals(4118.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      Constant constant0 = new Constant(double0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationGreaterThanOrEqual0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(96, coreFunction0.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(96, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(96, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(96, coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("", object0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = coreFunction0.computeValue(unionContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      assertEquals(false, object0);
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionLang(unionContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[6];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationUnion0);
      
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg1();
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationUnion1, coreOperationUnion0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion1);
      
      expressionArray1[1] = (Expression) coreOperationUnion1;
      QName qName0 = new QName("org.jdom.Document");
      assertNull(qName0.getPrefix());
      assertEquals("org.jdom.Document", qName0.toString());
      assertEquals("org.jdom.Document", qName0.getName());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertNull(qName0.getPrefix());
      assertEquals("org.jdom.Document", qName0.toString());
      assertEquals("org.jdom.Document", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, expressionArray1[0]);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationSubtract0);
      
      expressionArray1[3] = (Expression) coreOperationSubtract0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, expressionArray1[0]);
      assertNull(qName0.getPrefix());
      assertEquals("org.jdom.Document", qName0.toString());
      assertEquals("org.jdom.Document", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMultiply0);
      
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(17);
      assertEquals(17, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(17, nodeTypeTest0, expressionArray0);
      assertEquals(17, step0.getAxis());
      assertEquals(17, nodeTypeTest0.getNodeType());
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      int int0 = 217;
      Step step1 = new Step(217, nodeTypeTest0, expressionArray1);
      assertEquals(217, step1.getAxis());
      assertEquals(17, nodeTypeTest0.getNodeType());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(17, nodeTypeTest0, expressionArray1);
      assertEquals(17, step2.getAxis());
      assertEquals(17, nodeTypeTest0.getNodeType());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray1[5] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray1);
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, extensionFunction0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2262), expressionArray0);
      assertEquals((-2262), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals((-2262), coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer((-360));
      assertEquals((-360), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-360), expressionArray0);
      assertEquals((-360), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionTranslate((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertEquals("0", object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-360()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 mod org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 <= org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000002 != org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1950);
      assertEquals(1950, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      assertEquals(1950, nodeTypeTest0.getNodeType());
      assertEquals(0, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-39), nodeTypeTest0, expressionArray0);
      assertEquals(1950, nodeTypeTest0.getNodeType());
      assertEquals((-39), step1.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      Step[] stepArray1 = new Step[9];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      stepArray1[2] = step0;
      stepArray1[3] = step1;
      stepArray1[4] = step0;
      stepArray1[5] = step1;
      stepArray1[6] = step1;
      stepArray1[7] = step1;
      stepArray1[8] = step0;
      LocationPath locationPath1 = new LocationPath(false, stepArray1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(9, stepArray1.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertNotNull(locationPath1);
      
      expressionArray0[3] = (Expression) locationPath1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("local-name");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      assertNotNull(basicNodeSet0);
      
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertNotNull(nodeSetContext0);
      
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      assertEquals(1950, nodeTypeTest0.getNodeType());
      assertFalse(nodeSetContext0.isChildOrderingRequired());
      assertEquals(0, nodeSetContext0.getDocumentOrder());
      assertEquals(0, nodeSetContext0.getPosition());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Constant constant0 = new Constant("lXe8/ACGFdhm >PG`");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1026), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1026), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1026), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("lXe8/ACGFdhm >PG`", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1026), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-1026), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object2);
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1708), expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1708), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-1708), expressionArray1);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1708), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction((-1708), expressionArray1);
      assertEquals((-1708), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      boolean boolean1 = coreFunction2.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals((-1708), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(boolean1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      
      Object object0 = coreFunction2.functionConcat((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals((-1708), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object0);
      
      Object object1 = coreFunction1.functionSubstring((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1708), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = coreFunction1.functionSubstringAfter((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction2);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals((-1708), coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object2);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertTrue(object2.equals((Object)object0));
      assertNotNull(object2);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertNotNull(descendantContext0);
      
      Object object3 = coreFunction2.functionSubstringBefore(descendantContext0);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals((-1708), coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(0, descendantContext0.getPosition());
      assertTrue(descendantContext0.isChildOrderingRequired());
      assertEquals(0, descendantContext0.getDocumentOrder());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object3);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertTrue(object3.equals((Object)object0));
      assertNotNull(object3);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertNotNull(coreOperationLessThanOrEqual0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("setSimpleProperty: Invoking method ");
      assertEquals("setSimpleProperty: Invoking method ", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(2219, processingInstructionTest0, expressionArray0);
      assertEquals("setSimpleProperty: Invoking method ", processingInstructionTest0.getTarget());
      assertEquals(2219, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(115, processingInstructionTest0, expressionArray0);
      assertEquals("setSimpleProperty: Invoking method ", processingInstructionTest0.getTarget());
      assertEquals(115, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step((-830), processingInstructionTest0, expressionArray0);
      assertEquals("setSimpleProperty: Invoking method ", processingInstructionTest0.getTarget());
      assertEquals((-830), step2.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step((-830), processingInstructionTest0, expressionArray0);
      assertEquals("setSimpleProperty: Invoking method ", processingInstructionTest0.getTarget());
      assertEquals((-830), step3.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, locationPath1);
      assertFalse(locationPath1.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], locationPath0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationSubtract0);
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertNotNull(nameAttributeTest0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(nameAttributeTest0, coreOperationMod0);
      assertFalse(locationPath1.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(6, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = null;
      expressionArray1[1] = (Expression) locationPath1;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod((Expression) null, expressionArray0[4]);
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      
      expressionArray1[2] = (Expression) coreOperationMod1;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(115, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(115, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Guio*m{~W=(+qS_WWO");
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step((-645), processingInstructionTest0, expressionArray0);
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertEquals((-645), step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(1025, processingInstructionTest0, expressionArray0);
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertEquals(1025, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(2, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-265), expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-265), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = (CoreOperationLessThanOrEqual)coreFunction0.getArg2();
      assertSame(coreOperationLessThanOrEqual1, coreOperationLessThanOrEqual0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-265), coreFunction0.getFunctionCode());
      assertEquals("<=", coreOperationLessThanOrEqual1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual1);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual1;
      QName qName0 = new QName(", index=", "floor");
      assertEquals("floor", qName0.getName());
      assertEquals(", index=:floor", qName0.toString());
      assertEquals(", index=", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("floor", qName0.getName());
      assertEquals(", index=:floor", qName0.toString());
      assertEquals(", index=", qName0.getPrefix());
      assertNotNull(variableReference0);
      
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, variableReference0);
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals("floor", qName0.getName());
      assertEquals(", index=:floor", qName0.toString());
      assertEquals(", index=", qName0.getPrefix());
      assertEquals(2, stepArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(6, expressionArray0.length);
      assertEquals(2, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray0);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      expressionArray0[5] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(9, expressionArray0);
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) step0);
      assertNotSame(step0, step1);
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertEquals((-645), step0.getAxis());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, expressionArray0.length);
      assertFalse(step0.equals((Object)step1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction2, (Pointer) null);
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertEquals((-645), step0.getAxis());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, expressionArray0.length);
      assertFalse(step0.equals((Object)step1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotSame(step0, step1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals("Guio*m{~W=(+qS_WWO", processingInstructionTest0.getTarget());
      assertEquals((-645), step0.getAxis());
      assertEquals(6, coreFunction2.getArgumentCount());
      assertEquals(9, coreFunction2.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(6, expressionArray0.length);
      assertFalse(step0.equals((Object)step1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      coreFunction2.functionLast(initialContext0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(true, object0);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position('')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction1 = new CoreFunction(2588, expressionArray0);
      assertEquals(2588, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(jXPathContextReferenceImpl0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(1, evalContextArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("");
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr1.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreOperationOr1.equals((Object)coreOperationOr0));
      assertNotNull(coreOperationOr1);
      
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      NodePointer nodePointer0 = unionContext0.getCurrentNodePointer();
      assertEquals(1, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNull(nodePointer0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(1, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("xml");
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("xml", qName0.getName());
      assertEquals("xml", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-20), expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[7];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) initialContext0;
      evalContextArray0[4] = (EvalContext) initialContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-20), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(7, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Integer integer0 = new Integer((-360));
      assertEquals((-360), (int)integer0);
      assertNotNull(integer0);
      
      Constant constant0 = new Constant(integer0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction((-360), expressionArray0);
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-360), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals((-360), coreFunction0.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertNull(expression0);
      
      expressionArray0[1] = null;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Constant constant0 = new Constant("-Tv&@}.");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("'-Tv&@}.'", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[1];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(1, evalContextArray0.length);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Was expecting one of:");
      assertEquals("Was expecting one of:", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Constant constant0 = new Constant((String) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionNamespaceURI((EvalContext) null);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertNotNull(predicateContext0);
      
      Object object1 = coreFunction0.functionCount(predicateContext0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = (-3489);
      Expression[] expressionArray0 = new Expression[4];
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) variableReference0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(9, step0.getAxis());
      assertEquals(9, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(9, processingInstructionTest0, expressionArray0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(9, step1.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(13, processingInstructionTest0, expressionArray0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(13, step2.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(32, processingInstructionTest0, expressionArray0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(32, step3.getAxis());
      assertEquals(9, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray0[0]);
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationLessThanOrEqual0);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertEquals(4, stepArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[5] = (Expression) coreOperationAnd0;
      Float float0 = new Float((double) 13);
      assertEquals(13.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant0 = new Constant(float0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[6] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[4], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("*", coreOperationMultiply1.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreOperationMultiply1.equals((Object)coreOperationMultiply0));
      assertNotNull(coreOperationMultiply1);
      
      expressionArray0[7] = (Expression) coreOperationMultiply1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, constant0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[8] = (Expression) coreOperationGreaterThanOrEqual0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(32, coreFunction0.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreFunction coreFunction0 = new CoreFunction((-1239), expressionArray0);
      assertEquals((-1239), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1239()(null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("''", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)32;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)27, (byte)25, (byte)19, (byte) (-7), (byte)84, (byte)92, (byte)32}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(6, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(6, evalContextArray0.length);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("org.jdom.Comment", "org.jdom.Comment");
      assertEquals("org.jdom.Comment:org.jdom.Comment", qName0.toString());
      assertEquals("org.jdom.Comment", qName0.getPrefix());
      assertEquals("org.jdom.Comment", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("org.jdom.Comment:org.jdom.Comment", qName0.toString());
      assertEquals("org.jdom.Comment", qName0.getPrefix());
      assertEquals("org.jdom.Comment", qName0.getName());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      Constant constant0 = new Constant("org.jdom.Comment");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(107, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(107, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Constant constant0 = new Constant("5}W\u0002!Wax");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2003, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2003, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationCompare", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3171), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-3171), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, "ceiling", (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertNotNull(selfContext0);
      
      AncestorContext ancestorContext0 = new AncestorContext(selfContext0, true, processingInstructionTest0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      NodePointer nodePointer0 = ancestorContext0.getCurrentNodePointer();
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNull(nodePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, (Step[]) null);
      assertEquals(2, expressionArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionPath0, (Expression) null);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationNotEqual coreOperationNotEqual1 = (CoreOperationNotEqual)coreFunction0.getArg1();
      assertSame(coreOperationNotEqual1, coreOperationNotEqual0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationNotEqual1);
      
      CoreOperationNotEqual coreOperationNotEqual2 = new CoreOperationNotEqual(expressionPath0, coreOperationNotEqual1);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals("!=", coreOperationNotEqual1.getSymbol());
      assertEquals("!=", coreOperationNotEqual2.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual1));
      assertFalse(coreOperationNotEqual2.equals((Object)coreOperationNotEqual0));
      assertNotNull(coreOperationNotEqual2);
      
      expressionArray0[1] = (Expression) coreOperationNotEqual2;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(26, coreFunction1.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, expressionArray0[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], coreOperationEqual0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Constant constant1 = new Constant(float0);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[3] = (Expression) constant1;
      Byte byte0 = new Byte((byte)15);
      assertEquals((byte)15, (byte)byte0);
      assertNotNull(byte0);
      
      Constant constant2 = new Constant(byte0);
      assertFalse(constant2.isContextDependent());
      assertFalse(constant2.computeContextDependent());
      assertFalse(constant2.equals((Object)constant1));
      assertFalse(constant2.equals((Object)constant0));
      assertNotNull(constant2);
      
      expressionArray0[4] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      assertEquals(13, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "");
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(23, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.getName());
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(":", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(23, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(expressionPath0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, (Expression) null);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[1] = (Expression) coreOperationUnion0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[2] = (Expression) locationPath0;
      LocationPath locationPath1 = new LocationPath(false, stepArray0);
      assertFalse(locationPath1.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath1.equals((Object)locationPath0));
      assertNotNull(locationPath1);
      
      expressionArray0[3] = (Expression) locationPath1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, (Expression) null);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertFalse(locationPath0.equals((Object)locationPath1));
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-949), expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-949), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      LocationPath locationPath2 = (LocationPath)coreFunction0.getArg3();
      assertSame(locationPath2, locationPath0);
      assertNotSame(locationPath2, locationPath1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-949), coreFunction0.getFunctionCode());
      assertFalse(locationPath2.isAbsolute());
      assertEquals(6, expressionArray0.length);
      assertFalse(locationPath2.equals((Object)locationPath1));
      assertNotNull(locationPath2);
      
      expressionArray0[5] = (Expression) locationPath2;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      assertEquals(23, coreFunction1.getFunctionCode());
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-949), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(object0);
      
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Double double0 = (Double)coreFunction0.functionNumber(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(Double.NaN, (double)double0, 0.01);
      assertNotNull(double0);
      
      String string1 = (String)coreFunction0.compute(initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("root", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1542), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1542), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-1542), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("J$.,/]7t", "J$.,/]7t");
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertNotNull(qName0);
      
      NullPointer nullPointer0 = (NullPointer)NodePointer.newChildNodePointer((NodePointer) null, qName0, (Object) null);
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(nullPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, nullPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext1);
      
      RootContext rootContext2 = new RootContext(jXPathContextReferenceImpl1, nullPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext2.equals((Object)rootContext1));
      assertFalse(rootContext2.equals((Object)rootContext0));
      assertNotNull(rootContext2);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getConstantContext(rootContext2);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertSame(rootContext0, rootContext1);
      assertNotSame(rootContext0, rootContext2);
      assertNotSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertNotSame(rootContext2, rootContext1);
      assertNotSame(rootContext2, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals("J$.,/]7t:J$.,/]7t", qName0.toString());
      assertEquals("J$.,/]7t", qName0.getName());
      assertEquals("J$.,/]7t", qName0.getPrefix());
      assertFalse(nullPointer0.isActual());
      assertFalse(nullPointer0.isAttribute());
      assertFalse(nullPointer0.isContainer());
      assertTrue(nullPointer0.isLeaf());
      assertNull(nullPointer0.getNamespaceURI());
      assertFalse(nullPointer0.isCollection());
      assertTrue(nullPointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, nullPointer0.getIndex());
      assertFalse(nullPointer0.isDynamicPropertyDeclarationSupported());
      assertEquals(0, nullPointer0.getLength());
      assertTrue(nullPointer0.isNode());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(rootContext0.equals((Object)rootContext2));
      assertFalse(rootContext1.equals((Object)rootContext2));
      assertFalse(rootContext2.equals((Object)rootContext1));
      assertFalse(rootContext2.equals((Object)rootContext0));
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength(initialContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      coreOperationNotEqual0.args = expressionArray0;
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      
      CoreFunction coreFunction0 = new CoreFunction(601, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(601, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-821), expressionArray0);
      assertEquals((-821), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals((-821), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(23, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1261));
      assertEquals((-1261), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step((-1261), nodeTypeTest0, expressionArray0);
      assertEquals((-1261), nodeTypeTest0.getNodeType());
      assertEquals((-1261), step0.getAxis());
      assertEquals(5, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(3024, nodeTypeTest0, expressionArray0);
      assertEquals((-1261), nodeTypeTest0.getNodeType());
      assertEquals(3024, step1.getAxis());
      assertEquals(5, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(0, nodeTypeTest0, expressionArray0);
      assertEquals((-1261), nodeTypeTest0.getNodeType());
      assertEquals(0, step2.getAxis());
      assertEquals(5, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeTypeTest0, expressionArray0);
      assertEquals((-1261), nodeTypeTest0.getNodeType());
      assertEquals(1, step3.getAxis());
      assertEquals(5, expressionArray0.length);
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(4, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      QName qName0 = new QName("", ". It cannot be converted to ");
      assertEquals("", qName0.getPrefix());
      assertEquals(":. It cannot be converted to ", qName0.toString());
      assertEquals(". It cannot be converted to ", qName0.getName());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("", qName0.getPrefix());
      assertEquals(":. It cannot be converted to ", qName0.toString());
      assertEquals(". It cannot be converted to ", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(variableReference0, expressionArray0[2]);
      assertEquals("", qName0.getPrefix());
      assertEquals(":. It cannot be converted to ", qName0.toString());
      assertEquals(". It cannot be converted to ", qName0.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals("!=", coreOperationNotEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationNotEqual0);
      
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(192, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(192, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Constant constant0 = new Constant("floor");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray1[0] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray1[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationMod0);
      
      expressionArray1[1] = (Expression) coreOperationMod0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationUnion0);
      
      expressionArray1[2] = (Expression) coreOperationUnion0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[0], coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationEqual0);
      
      expressionArray1[3] = (Expression) coreOperationEqual0;
      Constant constant1 = new Constant((Number) null);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray1[4] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-1542), expressionArray1);
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction0);
      
      CoreOperationUnion coreOperationUnion1 = (CoreOperationUnion)coreFunction0.getArg3();
      assertNotSame(expressionArray1, expressionArray0);
      assertSame(coreOperationUnion1, coreOperationUnion0);
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationUnion1);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion1, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion1, constant0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationLessThan0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals((-1542), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("|", coreOperationUnion1.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("floor");
      assertEquals("floor", qName0.getName());
      assertEquals("floor", qName0.toString());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("floor", qName0.getName());
      assertEquals("floor", qName0.toString());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertEquals(7, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      expressionArray0[4] = (Expression) coreFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[1], constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[5] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction2 = new CoreFunction((-1542), expressionArray1);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals((-1542), coreFunction2.getFunctionCode());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      expressionArray0[6] = (Expression) coreFunction2;
      CoreFunction coreFunction3 = new CoreFunction((-1542), expressionArray0);
      assertEquals((-1542), coreFunction3.getFunctionCode());
      assertEquals(7, coreFunction3.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      coreFunction1.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationDivide0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction((-2791), expressionArray0);
      assertEquals((-2791), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationLessThan coreOperationLessThan1 = (CoreOperationLessThan)coreFunction0.getArg1();
      assertSame(coreOperationLessThan1, coreOperationLessThan0);
      assertEquals((-2791), coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan1.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThan1);
      
      expressionArray0[1] = (Expression) coreOperationLessThan1;
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd", "GsVP?\"zz9}(r [1");
      assertEquals("GsVP?\"zz9}(r [1", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd:GsVP?\"zz9}(r [1", qName0.toString());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("GsVP?\"zz9}(r [1", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd:GsVP?\"zz9}(r [1", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[1]);
      assertEquals("GsVP?\"zz9}(r [1", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd:GsVP?\"zz9}(r [1", qName0.toString());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, expressionArray0[0]);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("GsVP?\"zz9}(r [1", qName0.getName());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd", qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreOperationAdd:GsVP?\"zz9}(r [1", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[4] = (Expression) extensionFunction0;
      CoreFunction coreFunction1 = new CoreFunction((-2791), expressionArray0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals((-2791), coreFunction1.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("A Text is not allowed at the document root");
      assertNull(qName0.getPrefix());
      assertEquals("A Text is not allowed at the document root", qName0.getName());
      assertEquals("A Text is not allowed at the document root", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("A Text is not allowed at the document root", qName0.getName());
      assertEquals("A Text is not allowed at the document root", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-5359), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-5359), step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-5359), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-5359), step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(54, processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(54, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(locationPath0, locationPath0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(3, stepArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(19, expressionArray0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue(unionContext0);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      assertEquals(false, object1);
      assertFalse(object1.equals((Object)boolean0));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.computeValue((EvalContext) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(false, object2);
      assertFalse(object2.equals((Object)boolean0));
      assertNotNull(object2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("substring");
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertNotNull(qName0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, jXPathContextReferenceImpl0, locale0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertNotNull(beanPointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, beanPointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("substring", string0);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string0);
      
      String string1 = (String)coreFunction0.functionName(initialContext0);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("substring", qName0.toString());
      assertEquals("substring", qName0.getName());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(beanPointer0.isNode());
      assertFalse(beanPointer0.isContainer());
      assertNull(beanPointer0.getNamespaceURI());
      assertFalse(beanPointer0.isAttribute());
      assertTrue(beanPointer0.isRoot());
      assertEquals(1, beanPointer0.getLength());
      assertEquals(Integer.MIN_VALUE, beanPointer0.getIndex());
      assertFalse(beanPointer0.isDynamicPropertyDeclarationSupported());
      assertFalse(beanPointer0.isCollection());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("substring", string1);
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionString(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: substring
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(5, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(0, unionContext0.getPosition());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(1, unionContext0.getDocumentOrder());
      assertEquals(5, evalContextArray0.length);
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number('gh;6ikLUz2aHV', 'gh;6ikLUz2aHV', 'gh;6ikLUz2aHV', 'gh;6ikLUz2aHV', 'gh;6ikLUz2aHV')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("''", string0);
      assertNotNull(string0);
      
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName((String) null, "gh;6ikLUz2aHV");
      assertNull(qName0.getPrefix());
      assertEquals("gh;6ikLUz2aHV", qName0.getName());
      assertEquals("gh;6ikLUz2aHV", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertNull(qName0.getPrefix());
      assertEquals("gh;6ikLUz2aHV", qName0.getName());
      assertEquals("gh;6ikLUz2aHV", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(8, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-232), expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-232), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      expressionArray0[3] = (Expression) coreFunction0;
      QName qName1 = new QName("6vLBY#OuuP_Pm:Qz", "uX^@4})Tng*?2");
      assertEquals("6vLBY#OuuP_Pm:Qz", qName1.getPrefix());
      assertEquals("6vLBY#OuuP_Pm:Qz:uX^@4})Tng*?2", qName1.toString());
      assertEquals("uX^@4})Tng*?2", qName1.getName());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      VariableReference variableReference0 = new VariableReference(qName1);
      assertEquals("6vLBY#OuuP_Pm:Qz", qName1.getPrefix());
      assertEquals("6vLBY#OuuP_Pm:Qz:uX^@4})Tng*?2", qName1.toString());
      assertEquals("uX^@4})Tng*?2", qName1.getName());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(variableReference0);
      
      expressionArray0[4] = (Expression) variableReference0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) constant0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(2123, expressionArray0);
      assertEquals(2123, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(2123, coreFunction1.getFunctionCode());
      assertEquals(8, coreFunction1.getArgumentCount());
      assertEquals(8, expressionArray0.length);
      assertTrue(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(2123);
      assertEquals(2123, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(6, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals(1.0, (double)double0, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(double0);
      
      String string0 = (String)coreFunction0.functionNamespaceURI(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertEquals("", string0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      Object object0 = coreFunction0.functionName(attributeContext0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionNumber((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object1);
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.CoreFunction");
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(extensionFunction0, expressionArray0[0]);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[5];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreOperationNegate0);
      
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) extensionFunction0;
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) variableReference0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationAnd0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, coreOperationAnd0);
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(813, nodeNameTest0, expressionArray0);
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", qName0.toString());
      assertEquals("org.apache.commons.jxpath.ri.compiler.CoreFunction", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(813, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray1[4], (Expression[]) null, stepArray0);
      assertEquals(1, stepArray0.length);
      assertEquals(5, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1426), expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals((-1426), coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(19, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gh;6ikLUz2aHV");
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, false);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertNotNull(precedingOrFollowingContext0);
      
      Object object0 = coreFunction0.functionCount(precedingOrFollowingContext0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, precedingOrFollowingContext0.getDocumentOrder());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertEquals(1.0, object0);
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gh;6ikLUz2aHV");
      assertFalse(boolean0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(6, expressionArray0);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(6, coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(18, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(14, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(32, expressionArray0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(32, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(4, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction((-786), expressionArray0);
      assertEquals((-786), coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(24, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("contains");
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(extensionFunction0, extensionFunction0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(1722, nodeNameTest0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1722, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(884, nodeNameTest0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(884, step1.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(884, nodeNameTest0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(884, step2.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(1, nodeNameTest0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(1, step3.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertFalse(step3.equals((Object)step0));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(884, nodeNameTest0, expressionArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(884, step4.getAxis());
      assertEquals(6, expressionArray0.length);
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(157, nodeNameTest0, (Expression[]) null);
      assertEquals(157, step5.getAxis());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("contains", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, extensionFunction0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(extensionFunction0, coreOperationMultiply0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(nameAttributeTest1);
      
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, nameAttributeTest0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertFalse(nameAttributeTest0.equals((Object)nameAttributeTest1));
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("contains", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(1722, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(1722, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(jXPathContextReferenceImpl0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, jXPathContextReferenceImpl0, (Pointer) null);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      CoreFunction coreFunction2 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(7, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      BasicVariables basicVariables0 = new BasicVariables();
      assertNotNull(basicVariables0);
      
      QName qName0 = new QName("lG%TjwM_Z\"vsX'Q");
      assertNull(qName0.getPrefix());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.getName());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.getName());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl1, variablePointer0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.getName());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(rootContext0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertNull(qName0.getPrefix());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.getName());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("lG%TjwM_Z\"vsX'Q", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      SelfContext selfContext0 = new SelfContext(rootContext0, nodeNameTest0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.getName());
      assertEquals("lG%TjwM_Z\"vsX'Q", qName0.toString());
      assertTrue(variablePointer0.isActual());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertNull(variablePointer0.getNamespaceURI());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("lG%TjwM_Z\"vsX'Q", nodeNameTest0.toString());
      assertEquals(0, selfContext0.getDocumentOrder());
      assertFalse(selfContext0.isChildOrderingRequired());
      assertEquals(0, selfContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(selfContext0);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue(selfContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'lG%TjwM_Z\"vsX'Q'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("!nqmIZ!aJi", "!nqmIZ!aJi");
      assertEquals("!nqmIZ!aJi", qName0.getName());
      assertEquals("!nqmIZ!aJi", qName0.getPrefix());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", qName0.toString());
      assertNotNull(qName0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/OFjWOl:");
      assertFalse(boolean0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      assertEquals("!nqmIZ!aJi", qName0.getName());
      assertEquals("!nqmIZ!aJi", qName0.getPrefix());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(16000, nodeNameTest0, expressionArray0);
      assertEquals("!nqmIZ!aJi", qName0.getName());
      assertEquals("!nqmIZ!aJi", qName0.getPrefix());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(16000, step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(324, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      int int0 = 8;
      CoreFunction coreFunction1 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(8, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      assertEquals("!nqmIZ!aJi", qName0.getName());
      assertEquals("!nqmIZ!aJi", qName0.getPrefix());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", qName0.toString());
      assertEquals("", nodeNameTest0.getNamespaceURI());
      assertEquals("!nqmIZ!aJi:!nqmIZ!aJi", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(0, childContext0.getPosition());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.ChildContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      expressionArray0[1] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertNotNull(nodeNameTest0);
      
      Expression[] expressionArray1 = new Expression[0];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      Step step0 = new Step(19, nodeNameTest0, expressionArray1);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals("", nodeNameTest0.toString());
      assertEquals(19, step0.getAxis());
      assertEquals(0, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(4, expressionArray0.length);
      assertEquals(1, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      Expression[] expressionArray2 = new Expression[1];
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      
      expressionArray2[0] = (Expression) coreOperationDivide0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray2);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray2.length);
      assertFalse(expressionArray2.equals((Object)expressionArray1));
      assertFalse(expressionArray2.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      
      expressionArray0[3] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(expressionArray0.equals((Object)expressionArray2));
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("id", "dW<#*h");
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[1]);
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationOr0, variableReference0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-792), nodeNameTest0, expressionArray0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-792), step0.getAxis());
      assertEquals(8, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(10, nodeNameTest0, (Expression[]) null);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(10, step1.getAxis());
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(800, nodeNameTest0, expressionArray0);
      assertEquals(800, step2.getAxis());
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(10, nodeNameTest0, expressionArray0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals(10, step3.getAxis());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-6), nodeNameTest0, (Expression[]) null);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals((-6), step4.getAxis());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step0));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step((-2508), nodeNameTest0, expressionArray0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals((-2508), step5.getAxis());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step4));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      Step step6 = new Step(13, nodeNameTest0, expressionArray0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals(13, step6.getAxis());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(8, expressionArray0.length);
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step1));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step3));
      assertNotNull(step6);
      
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[4];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) variableReference0;
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      Step step7 = new Step(268435456, nodeNameTest0, expressionArray1);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(268435456, step7.getAxis());
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(step7.equals((Object)step2));
      assertFalse(step7.equals((Object)step5));
      assertFalse(step7.equals((Object)step0));
      assertFalse(step7.equals((Object)step6));
      assertFalse(step7.equals((Object)step3));
      assertFalse(step7.equals((Object)step4));
      assertFalse(step7.equals((Object)step1));
      assertNotNull(step7);
      
      stepArray0[7] = step7;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dW<#*h");
      assertEquals("dW<#*h", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step8 = new Step(800, processingInstructionTest0, (Expression[]) null);
      assertEquals("dW<#*h", processingInstructionTest0.getTarget());
      assertEquals(800, step8.getAxis());
      assertFalse(step8.equals((Object)step2));
      assertFalse(step8.equals((Object)step5));
      assertFalse(step8.equals((Object)step3));
      assertFalse(step8.equals((Object)step0));
      assertFalse(step8.equals((Object)step4));
      assertFalse(step8.equals((Object)step6));
      assertFalse(step8.equals((Object)step1));
      assertFalse(step8.equals((Object)step7));
      assertNotNull(step8);
      
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, (Expression[]) null, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(9, stepArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(expressionPath0);
      
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationGreaterThanOrEqual0, expressionArray1[0]);
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertEquals(4, expressionArray1.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      CoreOperationGreaterThan coreOperationGreaterThan2 = new CoreOperationGreaterThan(variableReference0, expressionArray0[3]);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan2.getSymbol());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan1));
      assertFalse(coreOperationGreaterThan2.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan2);
      
      expressionArray0[6] = (Expression) coreOperationGreaterThan2;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertNotNull(extensionFunction0);
      
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-792), expressionArray0);
      assertEquals(8, coreFunction0.getArgumentCount());
      assertEquals((-792), coreFunction0.getFunctionCode());
      assertEquals(8, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertNotNull(coreFunction0);
      
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, nodeNameTest0);
      assertEquals("dW<#*h", qName0.getName());
      assertEquals("id:dW<#*h", qName0.toString());
      assertEquals("id", qName0.getPrefix());
      assertEquals("id:dW<#*h", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), ancestorContext0.getDocumentOrder());
      assertEquals(0, ancestorContext0.getPosition());
      assertTrue(ancestorContext0.isChildOrderingRequired());
      assertNotNull(ancestorContext0);
      
      // Undeclared exception!
      coreFunction0.functionLocalName(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[10];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(10, coreFunction0.getArgumentCount());
      assertEquals(10, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext[] evalContextArray0 = new EvalContext[0];
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      Object object0 = unionContext0.getValue();
      assertEquals(0, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(0, evalContextArray0.length);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.computeValue(unionContext0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, unionContext0.getPosition());
      assertFalse(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(0, evalContextArray0.length);
      assertEquals(false, object1);
      assertTrue(object1.equals((Object)boolean0));
      assertFalse(object1.equals((Object)boolean1));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) processingInstructionTest0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      Double double0 = (Double)coreFunction0.functionStringLength(rootContext1);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertNotNull(double0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(rootContext1, processingInstructionTest0, true);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(precedingOrFollowingContext0);
      
      String string0 = (String)coreFunction0.functionString(precedingOrFollowingContext0);
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(25, coreFunction0.getFunctionCode());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(0, childContext0.getDocumentOrder());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("dI2=k*i`tzI");
      assertNull(qName0.getPrefix());
      assertEquals("dI2=k*i`tzI", qName0.getName());
      assertEquals("dI2=k*i`tzI", qName0.toString());
      assertNotNull(qName0);
      
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      assertNull(qName0.getPrefix());
      assertEquals("dI2=k*i`tzI", qName0.getName());
      assertEquals("dI2=k*i`tzI", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(variablePointer0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("dI2=k*i`tzI", qName0.getName());
      assertEquals("dI2=k*i`tzI", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("dI2=k*i`tzI", qName0.getName());
      assertEquals("dI2=k*i`tzI", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(rootContext1);
      
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertNull(qName0.getPrefix());
      assertEquals("dI2=k*i`tzI", qName0.getName());
      assertEquals("dI2=k*i`tzI", qName0.toString());
      assertNull(variablePointer0.getNamespaceURI());
      assertFalse(variablePointer0.isNode());
      assertTrue(variablePointer0.isRoot());
      assertEquals(Integer.MIN_VALUE, variablePointer0.getIndex());
      assertFalse(variablePointer0.isAttribute());
      assertTrue(variablePointer0.isContainer());
      assertTrue(variablePointer0.isActual());
      assertEquals(0, rootContext0.getPosition());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getPosition());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Integer.MIN_VALUE, NodePointer.WHOLE_COLLECTION);
      assertNotNull(initialContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = coreFunction0.computeContextDependent();
      assertEquals(22, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Step step0 = new Step(27, nodeTypeTest0, expressionArray0);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(27, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step((-1988), nodeTypeTest0, expressionArray0);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals((-1988), step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(928, nodeTypeTest0, expressionArray0);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertEquals(928, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Er{");
      assertEquals("Er{", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step3 = new Step(27, processingInstructionTest0, expressionArray0);
      assertEquals("Er{", processingInstructionTest0.getTarget());
      assertEquals(27, step3.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(27, processingInstructionTest0, expressionArray0);
      assertEquals(27, step4.getAxis());
      assertEquals("Er{", processingInstructionTest0.getTarget());
      assertEquals(3, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      assertEquals(3, expressionArray0.length);
      assertEquals(5, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[2] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName((String) null, ")nz!#cFAd/ca d");
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(6, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertNull(expression0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, extensionFunction0);
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[2] = (Expression) coreOperationNegate0;
      expressionArray0[3] = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, coreOperationMultiply0);
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[1];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")nz!#cFAd/ca d", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step(11, nodeNameTest0, expressionArray0);
      assertEquals(")nz!#cFAd/ca d", qName0.toString());
      assertEquals(")nz!#cFAd/ca d", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals(")nz!#cFAd/ca d", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(11, step0.getAxis());
      assertEquals(6, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      assertFalse(locationPath0.isAbsolute());
      assertEquals(1, stepArray0.length);
      assertNotNull(locationPath0);
      
      CoreFunction coreFunction1 = new CoreFunction((-6), expressionArray0);
      assertEquals(6, coreFunction1.getArgumentCount());
      assertEquals((-6), coreFunction1.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(29, coreFunction0.getFunctionCode());
      assertEquals(6, expressionArray0.length);
      assertTrue(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[0] = (Expression) coreOperationAdd0;
      String string0 = "t-";
      Constant constant0 = new Constant("t-");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("t-");
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(constant1);
      
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      expressionArray0[3] = (Expression) coreFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, expressionArray0[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(constant0.equals((Object)constant1));
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, constant1);
      assertFalse(constant1.computeContextDependent());
      assertFalse(constant1.isContextDependent());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(constant1.equals((Object)constant0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(27);
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertEquals(27, nodeTypeTest0.getNodeType());
      assertNotNull(namespaceContext0);
      
      // Undeclared exception!
      try { 
        coreOperationGreaterThanOrEqual0.iterate(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean1 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, attributeContext0.getPosition());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertNotNull(attributeContext0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(attributeContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg1();
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNull(expression0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(11, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(16, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      assertEquals(5, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      String string0 = coreFunction0.toString();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(9, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals("concat()", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(40, expressionArray0);
      assertEquals(40, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(17, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      assertEquals(8, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(20, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(8, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(8, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray0 = new Expression[1];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction(2612, expressionArray0);
      assertEquals(2612, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction2.functionLocalName((EvalContext) null);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(2612, coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      QName qName0 = new QName("YksfoS;@&Was");
      assertEquals("YksfoS;@&Was", qName0.toString());
      assertEquals("YksfoS;@&Was", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("YksfoS;@&Was", qName0.toString());
      assertEquals("YksfoS;@&Was", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("YksfoS;@&Was", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      assertEquals("YksfoS;@&Was", qName0.toString());
      assertEquals("YksfoS;@&Was", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("YksfoS;@&Was", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals(false, object0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction2);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(10, coreFunction2.getFunctionCode());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreOperationNegate0);
      
      expressionArray0[0] = (Expression) coreOperationNegate0;
      expressionArray0[1] = (Expression) coreFunction2;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreFunction1);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(21, coreFunction1.getFunctionCode());
      assertEquals("-", coreOperationNegate1.getSymbol());
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreOperationNegate1.equals((Object)coreOperationNegate0));
      assertNotNull(coreOperationNegate1);
      
      expressionArray0[2] = (Expression) coreOperationNegate1;
      expressionArray0[3] = (Expression) coreFunction2;
      expressionArray0[4] = (Expression) coreFunction1;
      expressionArray0[5] = (Expression) coreFunction2;
      expressionArray0[6] = (Expression) coreFunction0;
      CoreFunction coreFunction3 = new CoreFunction(10, expressionArray0);
      assertEquals(10, coreFunction3.getFunctionCode());
      assertEquals(7, coreFunction3.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      
      // Undeclared exception!
      try { 
        coreFunction3.functionFloor(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(-org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000006, starts-with(), -org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000005, starts-with(), false(), starts-with(), false())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      String string0 = constant0.toString();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("'gh;6ikLUz2aHV'", string0);
      assertNotNull(string0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-232), expressionArray0);
      assertEquals((-232), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals((-232), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-232));
      assertEquals((-232), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      Object object0 = coreFunction0.functionLocalName((EvalContext) null);
      assertEquals((-232), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 13;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(13);
      assertEquals(13, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      int int1 = 2487;
      Expression[] expressionArray0 = new Expression[5];
      VariableReference variableReference0 = new VariableReference((QName) null);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertNotNull(variableReference0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(variableReference0, variableReference0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      VariableReference variableReference1 = new VariableReference((QName) null);
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertNotNull(variableReference1);
      
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(extensionFunction0, variableReference1);
      assertTrue(extensionFunction0.computeContextDependent());
      assertFalse(variableReference1.computeContextDependent());
      assertFalse(variableReference1.isContextDependent());
      assertEquals(">", coreOperationGreaterThan1.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertFalse(variableReference1.equals((Object)variableReference0));
      assertFalse(coreOperationGreaterThan1.equals((Object)coreOperationGreaterThan0));
      assertNotNull(coreOperationGreaterThan1);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(coreOperationGreaterThan0.equals((Object)coreOperationGreaterThan1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(variableReference0, expressionArray0[2]);
      assertFalse(variableReference0.computeContextDependent());
      assertFalse(variableReference0.isContextDependent());
      assertEquals(">=", coreOperationGreaterThanOrEqual1.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertFalse(variableReference0.equals((Object)variableReference1));
      assertFalse(coreOperationGreaterThanOrEqual1.equals((Object)coreOperationGreaterThanOrEqual0));
      assertNotNull(coreOperationGreaterThanOrEqual1);
      
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(2487, expressionArray0);
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(2487, coreFunction0.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.functionFalse((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(4534, (Expression[]) null);
      assertEquals(4534, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(9, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      assertEquals(9, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(15, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3292);
      assertEquals(3292, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = "gh;6ikLUz2\\aHV";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(30, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-786), expressionArray0);
      assertEquals((-786), coreFunction1.getFunctionCode());
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(78, (Expression[]) null);
      assertEquals(78, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      InitialContext initialContext0 = null;
      try {
        initialContext0 = new InitialContext((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.InitialContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(17, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1616));
      assertEquals((-1616), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationUnion0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationUnion0, coreOperationUnion0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("contains");
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, extensionFunction0);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[3] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2772), expressionArray0);
      assertEquals((-2772), coreFunction0.getFunctionCode());
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertNotNull(namespaceContext0);
      
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      evalContextArray0[2] = (EvalContext) namespaceContext0;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      assertEquals(1, unionContext0.getDocumentOrder());
      assertTrue(unionContext0.isChildOrderingRequired());
      assertEquals(0, unionContext0.getPosition());
      assertEquals("contains", qName0.toString());
      assertEquals("contains", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals("contains", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals(0, namespaceContext0.getDocumentOrder());
      assertEquals(0, namespaceContext0.getPosition());
      assertFalse(namespaceContext0.isChildOrderingRequired());
      assertEquals(5, evalContextArray0.length);
      assertNotNull(unionContext0);
      
      // Undeclared exception!
      coreFunction0.functionNull(unionContext0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object0);
      assertNotNull(object0);
      
      Object object1 = coreFunction0.functionRound((EvalContext) null);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-786), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("Cannot create collection of typ,: ");
      assertEquals("Cannot create collection of typ,: ", qName0.toString());
      assertEquals("Cannot create collection of typ,", qName0.getPrefix());
      assertEquals(" ", qName0.getName());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2423), (Expression[]) null);
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      QName qName1 = new QName("The Content already has an existing parent \"");
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(qName1);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1);
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertEquals("The Content already has an existing parent \"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(nodeNameTest0);
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(initialContext0, nodeNameTest0, true);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertEquals("The Content already has an existing parent \"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(qName1.equals((Object)qName0));
      assertNotNull(precedingOrFollowingContext0);
      
      PredicateContext predicateContext0 = new PredicateContext(initialContext0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(predicateContext0);
      
      NodePointer nodePointer0 = predicateContext0.getCurrentNodePointer();
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(predicateContext0.isChildOrderingRequired());
      assertEquals(0, predicateContext0.getDocumentOrder());
      assertEquals(0, predicateContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(nodePointer0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, precedingOrFollowingContext0, (Pointer) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertEquals("The Content already has an existing parent \"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertNotNull(jXPathContextReferenceImpl1);
      
      InitialContext initialContext1 = (InitialContext)jXPathContextReferenceImpl1.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(initialContext0, initialContext1);
      assertNotSame(qName1, qName0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(initialContext1, initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(2, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertEquals("The Content already has an existing parent \"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext1.getPosition());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertNotNull(initialContext1);
      
      Double double0 = (Double)coreFunction1.functionStringLength(initialContext1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(initialContext0, initialContext1);
      assertNotSame(qName1, qName0);
      assertNotSame(jXPathContextReferenceImpl1, jXPathContextReferenceImpl0);
      assertNotSame(initialContext1, initialContext0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(3, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals("The Content already has an existing parent \"", qName1.getName());
      assertNull(qName1.getPrefix());
      assertEquals("The Content already has an existing parent \"", qName1.toString());
      assertEquals("The Content already has an existing parent \"", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-1), precedingOrFollowingContext0.getDocumentOrder());
      assertEquals(0, precedingOrFollowingContext0.getPosition());
      assertTrue(precedingOrFollowingContext0.isChildOrderingRequired());
      assertFalse(jXPathContextReferenceImpl1.isLenient());
      assertEquals(0, initialContext1.getPosition());
      assertEquals(0, initialContext1.getDocumentOrder());
      assertFalse(initialContext1.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(0.0, (double)double0, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(initialContext0.equals((Object)initialContext1));
      assertFalse(qName1.equals((Object)qName0));
      assertFalse(jXPathContextReferenceImpl1.equals((Object)jXPathContextReferenceImpl0));
      assertFalse(initialContext1.equals((Object)initialContext0));
      assertNotNull(double0);
      
      Double double1 = (Double)coreFunction0.functionLast(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(jXPathContextReferenceImpl0, jXPathContextReferenceImpl1);
      assertNotSame(initialContext0, initialContext1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(3, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(1.0, (double)double1, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(jXPathContextReferenceImpl0.equals((Object)jXPathContextReferenceImpl1));
      assertFalse(initialContext0.equals((Object)initialContext1));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2503), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals((-2503), coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      String string0 = "string";
      QName qName0 = new QName("string");
      assertEquals("string", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("string", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("string", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("string", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(2, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      assertEquals("string", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("string", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(28, coreFunction0.getFunctionCode());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1657), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1657), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1657), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-1657), (Expression[]) null);
      assertEquals((-1657), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-1657), coreFunction0.getFunctionCode());
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(object0);
      
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-1115), expressionArray0);
      assertEquals((-1115), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1657));
      assertEquals((-1657), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeTypeTest0);
      assertEquals((-1657), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertNotNull(attributeContext0);
      
      Object object1 = coreFunction2.functionSum(attributeContext0);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals((-1115), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals((-1657), nodeTypeTest0.getNodeType());
      assertEquals(0, attributeContext0.getPosition());
      assertFalse(attributeContext0.isChildOrderingRequired());
      assertEquals(0, attributeContext0.getDocumentOrder());
      assertEquals(1, expressionArray0.length);
      assertEquals(0.0, object1);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(object1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction1 = new CoreFunction((-71), (Expression[]) null);
      assertEquals((-71), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(12, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-483));
      assertEquals((-483), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(false, object0);
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(19, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext0);
      
      RootContext rootContext1 = rootContext0.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext1, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext1);
      
      RootContext rootContext2 = rootContext1.getRootContext();
      assertSame(rootContext0, rootContext1);
      assertSame(rootContext0, rootContext2);
      assertSame(rootContext1, rootContext2);
      assertSame(rootContext1, rootContext0);
      assertSame(rootContext2, rootContext1);
      assertSame(rootContext2, rootContext0);
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertFalse(rootContext0.isChildOrderingRequired());
      assertEquals(0, rootContext0.getPosition());
      assertEquals(0, rootContext0.getDocumentOrder());
      assertEquals(0, rootContext1.getPosition());
      assertFalse(rootContext1.isChildOrderingRequired());
      assertEquals(0, rootContext1.getDocumentOrder());
      assertEquals(0, rootContext2.getPosition());
      assertEquals(0, rootContext2.getDocumentOrder());
      assertFalse(rootContext2.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(rootContext2);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-483));
      assertEquals((-483), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      EvalContext evalContext0 = null;
      Object object0 = coreFunction0.compute((EvalContext) null);
      assertEquals(21, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(false, object0);
      assertTrue(object0.equals((Object)boolean0));
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction1, coreFunction2);
      assertEquals(1, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction3 = new CoreFunction(132, expressionArray1);
      assertEquals(1, coreFunction3.getArgumentCount());
      assertEquals(132, coreFunction3.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertNotNull(coreFunction3);
      
      boolean boolean0 = coreFunction2.computeContextDependent();
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction2, coreFunction1);
      assertNotSame(coreFunction2, coreFunction3);
      assertNotSame(coreFunction2, coreFunction0);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1, coreFunction2.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction3));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = coreFunction0.getArgumentCount();
      assertNotSame(expressionArray0, expressionArray1);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertNotSame(coreFunction0, coreFunction3);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertEquals(0, int0);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertFalse(coreFunction0.equals((Object)coreFunction3));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      int int0 = 4;
      CoreFunction coreFunction1 = new CoreFunction(4, expressionArray0);
      assertEquals(4, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationNegate0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("-", coreOperationNegate0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationAnd0);
      
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      assertEquals("and", coreOperationAnd0.getSymbol());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HS");
      assertFalse(boolean0);
      
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("HS", "HS");
      assertEquals("HS", qName0.getPrefix());
      assertEquals("HS", qName0.getName());
      assertEquals("HS:HS", qName0.toString());
      assertNotNull(qName0);
      
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("HS", qName0.getPrefix());
      assertEquals("HS", qName0.getName());
      assertEquals("HS:HS", qName0.toString());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(7, coreFunction0.getArgumentCount());
      assertEquals(7, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte) (-75);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)122;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte) (-75), (byte)122, (byte)122}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean1 = coreFunction1.isContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(18, coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean1);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(27, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 7;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(2, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction((-4191), expressionArray0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-4191), coreFunction1.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4191()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(5, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationOr0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], expressionArray0[2]);
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(5, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      Constant constant0 = new Constant("");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction1 = new CoreFunction(760, expressionArray0);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(760, coreFunction1.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      CoreFunction coreFunction2 = new CoreFunction(256, expressionArray0);
      assertEquals(5, coreFunction2.getArgumentCount());
      assertEquals(256, coreFunction2.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(20, coreFunction0.getFunctionCode());
      assertEquals(5, coreFunction0.getArgumentCount());
      assertEquals(5, expressionArray0.length);
      assertTrue(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction((-653), expressionArray0);
      assertEquals(5, coreFunction3.getArgumentCount());
      assertEquals((-653), coreFunction3.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertNotNull(coreFunction3);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction2);
      assertNotSame(coreFunction1, coreFunction0);
      assertNotSame(coreFunction1, coreFunction3);
      assertEquals(5, coreFunction1.getArgumentCount());
      assertEquals(760, coreFunction1.getFunctionCode());
      assertEquals(5, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction2));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(coreFunction1.equals((Object)coreFunction3));
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-794), expressionArray0);
      assertEquals((-794), coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)68;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte) (-76);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)68, (byte)24, (byte)114, (byte)71, (byte) (-76)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      
      CoreFunction coreFunction1 = new CoreFunction(28, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(28, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("lnrrM.B@Ujtr\"CXkjo");
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      VariableReference variableReference0 = new VariableReference(qName0);
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertNotNull(variableReference0);
      
      expressionArray0[0] = (Expression) variableReference0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg2();
      assertSame(expression0, extensionFunction0);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(expression0);
      
      expressionArray0[2] = expression0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, expressionArray0[1]);
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, coreOperationMod0);
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("-", coreOperationSubtract0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationSubtract0);
      
      expressionArray0[4] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationOr0);
      
      expressionArray0[5] = (Expression) coreOperationOr0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expression0, variableReference0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[6] = (Expression) nameAttributeTest0;
      Expression expression1 = coreFunction0.getArg3();
      assertSame(expression1, expression0);
      assertSame(expression1, extensionFunction0);
      assertTrue(expression1.computeContextDependent());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertEquals(9, expressionArray0.length);
      assertNotNull(expression1);
      
      expressionArray0[7] = expression1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[3]);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[8] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(555, expressionArray0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(555, coreFunction1.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = nameAttributeTest0.equal(coreOperationGreaterThan0, expressionArray0[7]);
      assertNotSame(coreFunction0, coreFunction1);
      assertSame(expression0, extensionFunction0);
      assertSame(expression0, expression1);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.toString());
      assertEquals("lnrrM.B@Ujtr\"CXkjo", qName0.getName());
      assertNull(qName0.getPrefix());
      assertFalse(variableReference0.isContextDependent());
      assertFalse(variableReference0.computeContextDependent());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(9, coreFunction0.getArgumentCount());
      assertTrue(expression0.computeContextDependent());
      assertEquals(9, expressionArray0.length);
      assertFalse(boolean0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      
      Object object0 = coreFunction1.computeValue((EvalContext) null);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(9, coreFunction1.getArgumentCount());
      assertEquals(555, coreFunction1.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(15, byteArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean2 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(10, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(608, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(608, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction((-879), expressionArray0);
      assertEquals((-879), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      Expression expression0 = coreFunction0.getArg3();
      assertEquals((-879), coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNull(expression0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, (Expression) null);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertNotNull(nameAttributeTest0);
      
      expressionArray0[0] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      assertEquals("", qName0.toString());
      assertNull(qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertTrue(extensionFunction0.computeContextDependent());
      assertEquals(1, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(extensionFunction0);
      
      expressionArray0[1] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray0[1], nameAttributeTest0);
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertEquals("=", nameAttributeTest1.getSymbol());
      assertTrue(nameAttributeTest1.computeContextDependent());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(nameAttributeTest1.equals((Object)nameAttributeTest0));
      assertNotNull(nameAttributeTest1);
      
      expressionArray0[2] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(3, coreFunction1.getArgumentCount());
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(3, expressionArray0.length);
      assertFalse(expressionArray0.equals((Object)expressionArray1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"-&z");
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Step step0 = new Step(2863, processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals(2863, step0.getAxis());
      assertEquals(3, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(2863, processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals(2863, step1.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      Step step2 = new Step(2863, processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals(2863, step2.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step2.equals((Object)step1));
      assertFalse(step2.equals((Object)step0));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(83, processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals(83, step3.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step((-1460), processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals((-1460), step4.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step3));
      assertFalse(step4.equals((Object)step2));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(917, processingInstructionTest0, expressionArray0);
      assertEquals("\"-&z", processingInstructionTest0.getTarget());
      assertEquals(917, step5.getAxis());
      assertEquals(3, expressionArray0.length);
      assertFalse(step5.equals((Object)step1));
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step3));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      assertNotNull(locationPath0);
      
      Step[] stepArray1 = new Step[1];
      assertFalse(stepArray1.equals((Object)stepArray0));
      
      stepArray1[0] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray1);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(1, stepArray1.length);
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(stepArray1.equals((Object)stepArray0));
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertNotNull(expressionPath0);
      
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(locationPath0, locationPath0);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(6, stepArray0.length);
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertNotNull(coreOperationGreaterThan0);
      
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(">=", coreOperationGreaterThanOrEqual0.getSymbol());
      assertTrue(locationPath0.isAbsolute());
      assertEquals(3, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(stepArray0.equals((Object)stepArray1));
      assertNotNull(coreOperationGreaterThanOrEqual0);
      
      expressionArray0[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2865, expressionArray0);
      assertEquals(2865, coreFunction0.getFunctionCode());
      assertEquals(3, coreFunction0.getArgumentCount());
      assertEquals(3, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)3;
      CoreFunction coreFunction0 = new CoreFunction((byte)3, expressionArray0);
      assertEquals(3, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationOr0, (Expression[]) null, stepArray0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals(0, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionPath0, expressionPath0);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(0, stepArray0.length);
      assertNotNull(coreOperationMod0);
      
      expressionArray0[2] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[2]);
      assertEquals("<=", coreOperationLessThanOrEqual0.getSymbol());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreOperationLessThanOrEqual0);
      
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      assertTrue(locationPath0.isAbsolute());
      assertEquals(0, stepArray0.length);
      assertNotNull(locationPath0);
      
      expressionArray0[4] = (Expression) locationPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      assertEquals("|", coreOperationUnion0.getSymbol());
      assertNotNull(coreOperationUnion0);
      
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction((-451), expressionArray0);
      assertEquals((-451), coreFunction0.getFunctionCode());
      assertEquals(6, coreFunction0.getArgumentCount());
      assertEquals(6, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("Cannot create collection of typ,: ");
      assertEquals("Cannot create collection of typ,: ", qName0.toString());
      assertEquals("Cannot create collection of typ,", qName0.getPrefix());
      assertEquals(" ", qName0.getName());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2423), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      String string0 = (String)coreFunction0.functionLocalName(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertEquals(0, initialContext0.getPosition());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      assertEquals(26, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(7, expressionArray0);
      assertEquals(7, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("Cannot create collection of typ,: ");
      assertEquals(" ", qName0.getName());
      assertEquals("Cannot create collection of typ,: ", qName0.toString());
      assertEquals("Cannot create collection of typ,", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2423), (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(18.0, (double)double0, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(double0);
      
      Double double1 = (Double)coreFunction1.functionNumber(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      String string0 = (String)coreFunction0.functionName(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals("root", string0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(29, coreFunction1.getFunctionCode());
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(1326, (Expression[]) null);
      assertEquals(1326, coreFunction2.getFunctionCode());
      assertEquals(0, coreFunction2.getArgumentCount());
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertNotNull(parentContext0);
      
      Object object0 = coreFunction0.functionString(parentContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertNull(processingInstructionTest0.getTarget());
      assertEquals(0, parentContext0.getPosition());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertEquals("", object0);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertNotNull(object0);
      
      QName qName0 = new QName("", "");
      assertEquals(":", qName0.toString());
      assertEquals("", qName0.getPrefix());
      assertEquals("", qName0.getName());
      assertNotNull(qName0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CoreFunction coreFunction3 = new CoreFunction((-6), (Expression[]) null);
      assertEquals((-6), coreFunction3.getFunctionCode());
      assertEquals(0, coreFunction3.getArgumentCount());
      assertFalse(coreFunction3.equals((Object)coreFunction1));
      assertFalse(coreFunction3.equals((Object)coreFunction2));
      assertFalse(coreFunction3.equals((Object)coreFunction0));
      assertNotNull(coreFunction3);
      
      CoreFunction coreFunction4 = new CoreFunction(11, (Expression[]) null);
      assertEquals(11, coreFunction4.getFunctionCode());
      assertEquals(0, coreFunction4.getArgumentCount());
      assertFalse(coreFunction4.equals((Object)coreFunction2));
      assertFalse(coreFunction4.equals((Object)coreFunction3));
      assertFalse(coreFunction4.equals((Object)coreFunction1));
      assertFalse(coreFunction4.equals((Object)coreFunction0));
      assertNotNull(coreFunction4);
      
      // Undeclared exception!
      try { 
        coreFunction4.computeValue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3042));
      assertEquals((-3042), nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Constant constant0 = new Constant("2cqL63[&AY`).");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      QName qName0 = new QName("2cqL63[&AY`).", "2cqL63[&AY`).");
      assertEquals("2cqL63[&AY`).:2cqL63[&AY`).", qName0.toString());
      assertEquals("2cqL63[&AY`).", qName0.getName());
      assertEquals("2cqL63[&AY`).", qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("2cqL63[&AY`).:2cqL63[&AY`).", qName0.toString());
      assertEquals("2cqL63[&AY`).", qName0.getName());
      assertEquals("2cqL63[&AY`).", qName0.getPrefix());
      assertEquals("2cqL63[&AY`).:2cqL63[&AY`).", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertNotNull(nodeNameTest0);
      
      Step step0 = new Step((-786), nodeNameTest0, expressionArray0);
      assertEquals("2cqL63[&AY`).:2cqL63[&AY`).", qName0.toString());
      assertEquals("2cqL63[&AY`).", qName0.getName());
      assertEquals("2cqL63[&AY`).", qName0.getPrefix());
      assertEquals("2cqL63[&AY`).:2cqL63[&AY`).", nodeNameTest0.toString());
      assertFalse(nodeNameTest0.isWildcard());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertEquals((-786), step0.getAxis());
      assertEquals(0, expressionArray0.length);
      assertNotNull(step0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, constant0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreFunction0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationLessThan0);
      
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationMultiply0);
      
      boolean boolean0 = coreOperationMultiply0.isContextDependent();
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertTrue(boolean0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, coreOperationLessThan0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(5, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals("<", coreOperationLessThan0.getSymbol());
      assertEquals("*", coreOperationMultiply0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      Expression[] expressionArray1 = new Expression[1];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(2208, expressionArray1);
      assertEquals(1, coreFunction1.getArgumentCount());
      assertEquals(2208, coreFunction1.getFunctionCode());
      assertEquals(1, expressionArray1.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertNotNull(coreFunction1);
      
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("Cannot create collection of typ,: ");
      assertEquals(" ", qName0.getName());
      assertEquals("Cannot create collection of typ,", qName0.getPrefix());
      assertEquals("Cannot create collection of typ,: ", qName0.toString());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction(12, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(12, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-0.fc31.x86_64/jre/lib/jxpath.properties");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      assertFalse(boolean0);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(12, coreFunction0.getFunctionCode());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getPosition());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(18.0, (double)double0, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(double0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(initialContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(324, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      CoreFunction coreFunction1 = new CoreFunction((-786), (Expression[]) null);
      assertEquals((-786), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertNotNull(childContext0);
      
      Object object0 = coreFunction0.computeValue(childContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction((-786), expressionArray0);
      assertEquals((-786), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      Object object1 = coreFunction2.functionFloor(childContext0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals((-786), coreFunction2.getFunctionCode());
      assertEquals(1, coreFunction2.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertEquals(Double.NaN, object1);
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(object1);
      
      Object object2 = coreFunction0.functionNamespaceURI(childContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction0, coreFunction2);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertFalse(childContext0.isChildOrderingRequired());
      assertEquals(0, childContext0.getDocumentOrder());
      assertEquals(0, childContext0.getPosition());
      assertEquals(1, expressionArray0.length);
      assertEquals("", object2);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction0.equals((Object)coreFunction2));
      assertNotNull(object2);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-786()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(0, coreFunction0.getFunctionCode());
      assertEquals(0, expressionArray0.length);
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[2];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Object object0 = coreFunction1.functionSubstringBefore((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(0, coreFunction1.getFunctionCode());
      assertEquals(2, coreFunction1.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(object0);
      
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      boolean boolean1 = coreFunction2.isContextDependent();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertFalse(boolean1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(boolean1 == boolean0);
      
      Object object1 = coreFunction2.functionConcat((EvalContext) null);
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertEquals("", object1);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertTrue(object1.equals((Object)object0));
      assertNotNull(object1);
      
      int int0 = coreFunction2.getFunctionCode();
      assertNotSame(expressionArray1, expressionArray0);
      assertNotSame(coreFunction2, coreFunction0);
      assertNotSame(coreFunction2, coreFunction1);
      assertEquals(0, coreFunction2.getFunctionCode());
      assertEquals(2, coreFunction2.getArgumentCount());
      assertEquals(2, expressionArray1.length);
      assertEquals(0, int0);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      assertEquals(14, coreFunction0.getFunctionCode());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(13, (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals(13, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
      
      EvalContext evalContext0 = null;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)108;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)38;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)115, (byte)0, (byte)15, (byte) (-105), (byte)108, (byte)29, (byte)38}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      CoreFunction coreFunction1 = new CoreFunction((byte)15, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(15, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      assertEquals("", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Constant constant0 = new Constant("");
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      Expression[] expressionArray0 = new Expression[4];
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[6];
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(4, expressionArray0.length);
      assertNotNull(step0);
      
      stepArray0[0] = step0;
      Step step1 = new Step(7, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(7, step1.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step1.equals((Object)step0));
      assertNotNull(step1);
      
      stepArray0[1] = step1;
      QName qName0 = new QName("");
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertNotNull(qName0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertNotNull(nodeNameTest0);
      
      Step step2 = new Step((-786), nodeNameTest0, expressionArray0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals((-786), step2.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step2.equals((Object)step0));
      assertFalse(step2.equals((Object)step1));
      assertNotNull(step2);
      
      stepArray0[2] = step2;
      Step step3 = new Step(40, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(40, step3.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step3.equals((Object)step0));
      assertFalse(step3.equals((Object)step2));
      assertFalse(step3.equals((Object)step1));
      assertNotNull(step3);
      
      stepArray0[3] = step3;
      Step step4 = new Step(40, nodeNameTest0, expressionArray0);
      assertEquals("", qName0.toString());
      assertEquals("", qName0.getName());
      assertNull(qName0.getPrefix());
      assertEquals("", nodeNameTest0.toString());
      assertNull(nodeNameTest0.getNamespaceURI());
      assertFalse(nodeNameTest0.isWildcard());
      assertEquals(40, step4.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step4.equals((Object)step2));
      assertFalse(step4.equals((Object)step1));
      assertFalse(step4.equals((Object)step0));
      assertFalse(step4.equals((Object)step3));
      assertNotNull(step4);
      
      stepArray0[4] = step4;
      Step step5 = new Step(40, processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals(40, step5.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step5.equals((Object)step4));
      assertFalse(step5.equals((Object)step0));
      assertFalse(step5.equals((Object)step3));
      assertFalse(step5.equals((Object)step2));
      assertFalse(step5.equals((Object)step1));
      assertNotNull(step5);
      
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals(4, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertNotNull(expressionPath0);
      
      expressionArray0[1] = (Expression) expressionPath0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      Step step6 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("", processingInstructionTest0.getTarget());
      assertEquals((-786), step6.getAxis());
      assertEquals(4, expressionArray0.length);
      assertFalse(step6.equals((Object)step4));
      assertFalse(step6.equals((Object)step0));
      assertFalse(step6.equals((Object)step5));
      assertFalse(step6.equals((Object)step2));
      assertFalse(step6.equals((Object)step3));
      assertFalse(step6.equals((Object)step1));
      assertNotNull(step6);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[3], expressionArray0[0]);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals(4, expressionArray0.length);
      assertNotNull(nameAttributeTest0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, expressionArray0[0]);
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      assertEquals(4, coreFunction0.getArgumentCount());
      assertEquals(7, coreFunction0.getFunctionCode());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, nameAttributeTest0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, expressionPath0);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals("mod", coreOperationMod1.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertEquals(6, stepArray0.length);
      assertFalse(coreOperationMod1.equals((Object)coreOperationMod0));
      assertNotNull(coreOperationMod1);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, expressionArray0[0]);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(4, expressionArray0.length);
      assertFalse(coreOperationMod0.equals((Object)coreOperationMod1));
      assertNotNull(coreOperationGreaterThan0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2822), expressionArray0);
      assertEquals((-2822), coreFunction1.getFunctionCode());
      assertEquals(4, coreFunction1.getArgumentCount());
      assertEquals(4, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(11, (Expression[]) null);
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(11, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(boolean0);
      
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4501);
      assertEquals(4501, nodeTypeTest0.getNodeType());
      assertNotNull(nodeTypeTest0);
      
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertNotNull(coreFunction0);
      
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertNotNull(jXPathContextReferenceImpl0);
      
      QName qName0 = new QName("Cannot create collection of typ,: ");
      assertEquals("Cannot create collection of typ,: ", qName0.toString());
      assertEquals(" ", qName0.getName());
      assertEquals("Cannot create collection of typ,", qName0.getPrefix());
      assertNotNull(qName0);
      
      CoreFunction coreFunction1 = new CoreFunction((-2423), (Expression[]) null);
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(initialContext0);
      
      Double double0 = (Double)coreFunction0.functionStringLength(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(18.0, (double)double0, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertNotNull(double0);
      
      Double double1 = (Double)coreFunction1.functionNumber(initialContext0);
      assertNotSame(coreFunction0, coreFunction1);
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(12, coreFunction0.getFunctionCode());
      assertEquals(0, coreFunction0.getArgumentCount());
      assertFalse(jXPathContextReferenceImpl0.isLenient());
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, initialContext0.getDocumentOrder());
      assertFalse(initialContext0.isChildOrderingRequired());
      assertEquals(0, initialContext0.getPosition());
      assertTrue(JXPathContextReferenceImpl.USE_SOFT_CACHE);
      assertEquals(Double.NaN, (double)double1, 0.01);
      assertFalse(coreFunction0.equals((Object)coreFunction1));
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      
      Expression[] expressionArray0 = new Expression[9];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction1;
      expressionArray0[2] = (Expression) coreFunction0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], coreFunction1);
      assertEquals((-2423), coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals("=", coreOperationEqual0.getSymbol());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreOperationEqual0);
      
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      assertEquals("or", coreOperationOr0.getSymbol());
      assertNotNull(coreOperationOr0);
      
      expressionArray0[6] = (Expression) coreOperationOr0;
      expressionArray0[7] = (Expression) coreFunction1;
      expressionArray0[8] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-2423), expressionArray0);
      assertEquals(9, coreFunction2.getArgumentCount());
      assertEquals((-2423), coreFunction2.getFunctionCode());
      assertEquals(9, expressionArray0.length);
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionNull(initialContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant((Number) null);
      assertFalse(constant0.computeContextDependent());
      assertFalse(constant0.isContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      assertEquals("+", coreOperationAdd0.getSymbol());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreOperationAdd0);
      
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      assertEquals(38, coreFunction0.getFunctionCode());
      assertEquals(2, coreFunction0.getArgumentCount());
      assertEquals(2, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      // Undeclared exception!
      coreFunction0.computeContextDependent();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      assertEquals(0, coreFunction0.getArgumentCount());
      assertEquals((-6), coreFunction0.getFunctionCode());
      assertNotNull(coreFunction0);
      
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      boolean boolean0 = coreFunction1.computeContextDependent();
      assertNotSame(coreFunction1, coreFunction0);
      assertEquals(29, coreFunction1.getFunctionCode());
      assertEquals(0, coreFunction1.getArgumentCount());
      assertFalse(boolean0);
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      
      CoreFunction coreFunction2 = new CoreFunction(1326, (Expression[]) null);
      assertEquals(0, coreFunction2.getArgumentCount());
      assertEquals(1326, coreFunction2.getFunctionCode());
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertNotNull(coreFunction2);
      
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      assertNull(processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      assertNull(processingInstructionTest0.getTarget());
      assertEquals((-1), parentContext0.getDocumentOrder());
      assertEquals(0, parentContext0.getPosition());
      assertEquals(1, parentContext0.getCurrentPosition());
      assertTrue(parentContext0.isChildOrderingRequired());
      assertNotNull(parentContext0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)42;
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)42}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertNotNull(processingInstructionTest0);
      
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertNotNull(constant0);
      
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      assertEquals("gh;6ikLUz2aHV", processingInstructionTest0.getTarget());
      assertEquals((-786), step0.getAxis());
      assertEquals(1, expressionArray0.length);
      assertNotNull(step0);
      
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("=", nameAttributeTest0.getSymbol());
      assertTrue(nameAttributeTest0.computeContextDependent());
      assertNotNull(nameAttributeTest0);
      
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals("div", coreOperationDivide0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationDivide0);
      
      CoreFunction coreFunction0 = new CoreFunction(324, expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreFunction0);
      
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, constant0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationMod0);
      
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationMod0);
      assertFalse(constant0.isContextDependent());
      assertFalse(constant0.computeContextDependent());
      assertEquals(1, coreFunction0.getArgumentCount());
      assertEquals(324, coreFunction0.getFunctionCode());
      assertEquals("mod", coreOperationMod0.getSymbol());
      assertEquals(">", coreOperationGreaterThan0.getSymbol());
      assertEquals(1, expressionArray0.length);
      assertNotNull(coreOperationGreaterThan0);
      
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      assertEquals(0, coreFunction1.getArgumentCount());
      assertEquals(0, coreFunction1.getFunctionCode());
      assertFalse(coreFunction1.equals((Object)coreFunction0));
      assertNotNull(coreFunction1);
      
      Expression[] expressionArray1 = new Expression[3];
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-421), expressionArray1);
      assertEquals(3, coreFunction2.getArgumentCount());
      assertEquals((-421), coreFunction2.getFunctionCode());
      assertEquals(3, expressionArray1.length);
      assertFalse(expressionArray1.equals((Object)expressionArray0));
      assertFalse(coreFunction2.equals((Object)coreFunction0));
      assertFalse(coreFunction2.equals((Object)coreFunction1));
      assertNotNull(coreFunction2);
      
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("Canot create collection oftyp,:");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2423));
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = (-680);
      QName qName0 = new QName((String) null, "string-length");
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2503), expressionArray0);
      coreFunction0.functionTrue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2503()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("Cannot create collection of typ,: ");
      CoreFunction coreFunction1 = new CoreFunction((-2423), (Expression[]) null);
      InitialContext initialContext0 = (InitialContext)jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionStringLength(initialContext0);
      coreFunction1.functionNumber(initialContext0);
      Double double0 = (Double)coreFunction1.functionLast(initialContext0);
      assertEquals(2, initialContext0.getPosition());
      assertEquals(1.0, (double)double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Cannot create collection of typ,: ");
      Expression[] expressionArray0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray1);
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[2]);
      QName qName0 = new QName("D5@CsxSfv");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "not");
      ChildContext childContext0 = new ChildContext(predicateContext0, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(unknownFunction0()(), unknownFunction0()(), unknownFunction0()(), unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("|");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[1], extensionFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], coreOperationNotEqual0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(165);
      Step step0 = new Step(10, nodeTypeTest0, expressionArray0);
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(38);
      Step step1 = new Step((-1337), nodeTypeTest1, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[2], coreOperationNotEqual0);
      CoreFunction coreFunction0 = new CoreFunction(165, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1924), expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.iteratePointers((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      QName qName0 = new QName("Cannot create collection of typ,: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction((byte)3, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(13, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(32, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAnd0;
      Float float0 = new Float((double) 13);
      Constant constant0 = new Constant(float0);
      expressionArray0[6] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[4], constant0);
      expressionArray0[7] = (Expression) coreOperationMultiply1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, constant0);
      expressionArray0[8] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(6267, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gh;6ikLUz2aHV");
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gh;6ikLUz2aHV");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.functionStringLength((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      namespaceContext0.getContextNodePointer();
      coreFunction0.functionBoolean((EvalContext) null);
      coreFunction0.functionNot(namespaceContext0);
      coreFunction0.getFunctionName();
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      coreFunction0.functionNormalizeSpace(attributeContext0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(attributeContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step((-1924), nodeTypeTest0, expressionArray0);
      Step step1 = new Step(58, nodeTypeTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gh;6ikLUz2aHV");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.functionStringLength((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionNot(namespaceContext0);
      assertEquals(false, object1);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("unknownFunction-786()", string0);
      
      AttributeContext attributeContext0 = new AttributeContext(selfContext0, processingInstructionTest0);
      Object object2 = coreFunction0.functionNormalizeSpace(attributeContext0);
      assertEquals("gh;6ikLUz2aHV", object2);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-3577), expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-3577), expressionArray0);
      coreFunction1.iterate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(128, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction128()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "{yphh");
      Step step0 = new Step((-1141), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath((Expression) null, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, (Expression) null);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      int int0 = 16;
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("@{)TQ2>", "@{)TQ2>");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Constant constant0 = new Constant((String) null);
      expressionArray0[2] = (Expression) constant0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction1;
      QName qName1 = new QName("@{)TQ2>");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[4] = (Expression) variableReference0;
      ExtensionFunction extensionFunction2 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[5] = (Expression) extensionFunction2;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      coreOperationAdd0.isContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2854, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(12, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      coreFunction0.functionString((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-637), expressionArray0);
      coreFunction1.functionNot((EvalContext) null);
      coreFunction1.computeValue((EvalContext) null);
      coreFunction0.functionFloor((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-637()('gh;6ikLUz2aHV')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(rootContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-2503), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, coreOperationMod0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      Step step0 = new Step(925, nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-229), nodeTypeTest0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction((-2810), expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(2854, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(6, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationAnd0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant((Number) null);
      expressionArray0[3] = (Expression) constant0;
      QName qName0 = new QName("']");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[4] = (Expression) extensionFunction0;
      Constant constant1 = new Constant("']");
      expressionArray0[5] = (Expression) constant1;
      Step[] stepArray0 = new Step[9];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, " No DOCTYPE declaration, ");
      Step step0 = new Step(20, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(26, nodeNameTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step((-1045), nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-332), nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step((-332), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1045), nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step((-332), nodeNameTest0, (Expression[]) null);
      stepArray0[6] = step6;
      Step step7 = new Step(1284, nodeNameTest0, (Expression[]) null);
      stepArray0[7] = step7;
      Step step8 = new Step((-1), nodeNameTest0, expressionArray0);
      stepArray0[8] = step8;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[6] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant1, coreOperationLessThanOrEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, expressionArray0[4]);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, (Expression) null);
      expressionArray0[8] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[0]);
      QName qName0 = new QName("8Q79", "8Q79");
      QName qName1 = new QName("16#0kxUZ", "false");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step(1016, nodeTypeTest0, expressionArray0);
      Step step1 = new Step((-882), nodeTypeTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(470, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-882), expressionArray0);
      coreFunction1.iterate((EvalContext) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, nameAttributeTest0);
      CoreFunction coreFunction2 = new CoreFunction(26, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[0] = null;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      UnionContext unionContext0 = new UnionContext(rootContext0, (EvalContext[]) null);
      coreFunction0.computeValue(rootContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 20;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(20, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreFunction0);
      // Undeclared exception!
      try { 
        predicateContext0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      CoreFunction coreFunction3 = new CoreFunction(0, expressionArray1);
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction4 = new CoreFunction((-2503), expressionArray0);
      CoreFunction coreFunction5 = new CoreFunction((-2805), expressionArray1);
      coreFunction5.functionSubstring((EvalContext) null);
      assertEquals((-2805), coreFunction5.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      Constant constant0 = new Constant("JRY}");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2646));
      Step step0 = new Step(26, nodeTypeTest0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction((-786), expressionArray0);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      
      Object object1 = coreFunction0.functionNot(namespaceContext0);
      assertEquals(false, object1);
      assertEquals((-786), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      QName qName0 = new QName("Cannot create collection of typ,: ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(25, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction1 = new CoreFunction(4, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext(rootContext0, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext evalContext0 = null;
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      coreFunction0.functionNull(selfContext0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(18);
      Step step0 = new Step(1326, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1326, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1326, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray1, stepArray0);
      expressionArray1[1] = (Expression) expressionPath0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction1 = new CoreFunction(18, expressionArray1);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionTranslate(parentContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreFunction0, coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction2 = new CoreFunction(19, expressionArray0);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      QName qName0 = new QName("),v#Og9n{\"%nY#3t*|");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      Step step0 = new Step(11, nodeNameTest0, expressionArray0);
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[2];
      Step step2 = new Step(11, nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step2;
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(2854, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction((-280), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Expression[] expressionArray1 = new Expression[8];
      Expression[] expressionArray2 = new Expression[9];
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-3386));
      Step step0 = new Step(529, nodeTypeTest0, expressionArray2);
      stepArray0[0] = step0;
      Step step1 = new Step(41, nodeTypeTest0, expressionArray2);
      stepArray0[1] = step1;
      Step step2 = new Step((-46), nodeTypeTest0, expressionArray2);
      stepArray0[2] = step2;
      Step step3 = new Step(11, nodeTypeTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2913), nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-3386), nodeTypeTest0, expressionArray1);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray2[0] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray2[0], locationPath0);
      expressionArray2[1] = (Expression) coreOperationLessThanOrEqual0;
      Integer integer0 = new Integer(1452);
      Constant constant0 = new Constant(integer0);
      expressionArray2[2] = (Expression) constant0;
      Long long0 = new Long((-3386));
      Constant constant1 = new Constant(long0);
      expressionArray2[3] = (Expression) constant1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant1, constant0);
      expressionArray2[4] = (Expression) coreOperationLessThan0;
      Double double0 = new Double(1.0);
      Constant constant2 = new Constant(double0);
      expressionArray2[5] = (Expression) constant2;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray2[3], constant1);
      expressionArray2[6] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray2[2], expressionArray2[3]);
      expressionArray2[7] = (Expression) coreOperationMultiply1;
      QName qName0 = new QName("bT!?,Fv", "bT!?,Fv");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray2[8] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(529, expressionArray2);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      coreOperationAdd0.isContextDependent();
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction2 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      int int0 = (-3386);
      CoreFunction coreFunction0 = new CoreFunction((-3386), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step((-1907), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(58, nodeTypeTest0, expressionArray0);
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(2854, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)88;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      CoreFunction coreFunction2 = new CoreFunction(16, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("contains");
      Step step0 = new Step(854, processingInstructionTest0, (Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, constant0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, nameAttributeTest0);
      CoreFunction coreFunction1 = new CoreFunction((-3695), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationSubtract0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-1922);
      int int1 = 17;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext1, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[2] = null;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreFunction coreFunction0 = new CoreFunction(127, (Expression[]) null);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      coreFunction0.computeValue(unionContext0);
      assertEquals(127, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray1[0]);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" to ");
      Step step0 = new Step(0, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step(2, processingInstructionTest0, (Expression[]) null);
      int int0 = 3670;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      CoreFunction coreFunction0 = new CoreFunction(324, expressionArray0);
      coreFunction0.functionString((EvalContext) null);
      coreFunction0.functionStringLength((EvalContext) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, processingInstructionTest0);
      Object object0 = coreFunction0.functionBoolean((EvalContext) null);
      assertEquals(true, object0);
      assertEquals(324, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Lx", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6267);
      Step step0 = new Step((-6), nodeTypeTest0, (Expression[]) null);
      step0.isContextDependent();
      stepArray0[0] = step0;
      Step step1 = new Step(6267, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Lx");
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      QName qName0 = new QName("Lx", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6267);
      Step step0 = new Step((-6), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(6267, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "?I:cTL&j&&MC~");
      Step step2 = new Step(4, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(4, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(3670, nodeTypeTest0, (Expression[]) null);
      step4.isContextDependent();
      stepArray0[4] = step4;
      NodeTypeTest nodeTypeTest1 = new NodeTypeTest(20);
      CoreFunction coreFunction0 = new CoreFunction(3670, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3670()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = 13;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("16#0kxUZ", "16#0kxUZ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], (Expression) null);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("The Content already has an existing parent \"");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, coreOperationAdd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction(5163, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "a3JsjfXFq[A^");
      SelfContext selfContext0 = new SelfContext(evalContextArray0[4], nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(evalContextArray0[5], nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(evalContextArray0[5], nodeNameTest0, true);
      coreFunction0.compute(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("contains");
      Step step0 = new Step((byte)14, processingInstructionTest0, expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd1, coreOperationAdd0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd1, nameAttributeTest0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd1, coreOperationDivide0);
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      coreFunction0.toString();
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((byte)14, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("ig", "v16F9G-<DG@");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ig");
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(nodeSetContext0, coreFunction0);
      QName qName1 = new QName("", "");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "v16F9G-<DG@");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(nodeSetContext0, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.isContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4 D!(+}>Oq<f?so");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction1 = new CoreFunction((-1716), expressionArray0);
      coreFunction1.functionNumber(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(1326, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionString(parentContext0);
      QName qName0 = new QName("");
      CoreFunction coreFunction3 = new CoreFunction(29, (Expression[]) null);
      EvalContext evalContext0 = null;
      ParentContext parentContext1 = new ParentContext((EvalContext) null, processingInstructionTest0);
      CoreFunction coreFunction4 = new CoreFunction(1326, (Expression[]) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationSubtract0);
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd1;
      expressionArray1[1] = (Expression) coreOperationAnd1;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "h`dUI+IEtd8u");
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, (NodeTest) null);
      DescendantContext descendantContext0 = new DescendantContext(parentContext0, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "contains");
      QName qName0 = new QName("contains", "floor");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointer0.namespacePointer("Cannot allocate dynamic property handler of class ");
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(1326, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionString(parentContext0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      coreFunction0.functionNull(evalContextArray0[0]);
      UnionContext unionContext1 = new UnionContext(namespaceContext0, evalContextArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(unionContext1, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction1.compute(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(20, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, (Object) null, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      RootContext rootContext1 = rootContext0.getRootContext();
      rootContext1.getRootContext();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      EvalContext evalContext0 = null;
      QName qName0 = new QName("Lx", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(6267);
      Step step0 = new Step((-6), nodeTypeTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Step step1 = new Step(6267, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "?I:cTL&j&&MC~");
      Step step2 = new Step(4, nodeNameTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step(4, nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      Step step4 = new Step(3670, nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, (Expression[]) null, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray0[3] = (Expression) extensionFunction0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[4] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: starts-with(null()/UNKNOWN::UNKNOWN()/UNKNOWN::null/ancestor::Lx:?I:cTL&j&&MC~/ancestor::UNKNOWN()/UNKNOWN::UNKNOWN(), null(), org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, null(), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000011 = org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000011)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      String string0 = "?I:cTL&j&&MC~";
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step((-1907), nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(58, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, coreOperationMod0);
      CoreFunction coreFunction0 = new CoreFunction(2854, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      int int0 = 41;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      EvalContext evalContext0 = null;
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, coreOperationAdd0);
      CoreFunction coreFunction0 = new CoreFunction((-1219), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreOperationSubtract0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction((-362), expressionArray0);
      EvalContext evalContext1 = null;
      ParentContext parentContext1 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction2 = new CoreFunction((-468), expressionArray0);
      coreFunction1.functionPosition(parentContext1);
      ChildContext childContext0 = new ChildContext((EvalContext) null, (NodeTest) null, true, true);
      CoreFunction coreFunction3 = new CoreFunction((-362), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction3.functionLang(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-362()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray1);
      coreFunction2.isContextDependent();
      coreFunction2.functionConcat((EvalContext) null);
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction2.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(unknownFunction0()(), unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationAdd0;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      expressionArray1[8] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.computeContextDependent();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd((Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("[+KrbMW>2r]yFQX2aS]");
      Step step0 = new Step(395, processingInstructionTest0, (Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreFunction0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      CoreFunction coreFunction1 = new CoreFunction(395, (Expression[]) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("[Comment: ");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, processingInstructionTest1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLocalName(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|mpd$@ex;p,hVl+");
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getRootContext();
      CoreFunction coreFunction1 = new CoreFunction(4556, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(1258, (Expression[]) null);
      assertEquals(1258, coreFunction2.getFunctionCode());
      
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationAnd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      Step[] stepArray0 = new Step[5];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(7);
      Step step0 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(7, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1748, nodeTypeTest0, (Expression[]) null);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationEqual0, expressionArray0, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationEqual1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNot((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationMod coreOperationMod0 = new CoreOperationMod((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationMod0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMod0, (Expression) null);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("16#0kxUZ", "16#0kxUZ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], (Expression) null);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[6];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "d^Kgg`#|:s0F@");
      SelfContext selfContext0 = new SelfContext(unionContext0, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(namespaceContext0, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.compute(precedingOrFollowingContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) descendantContext0;
      evalContextArray0[3] = (EvalContext) descendantContext0;
      evalContextArray0[4] = (EvalContext) descendantContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      coreFunction1.compute(descendantContext0);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction0()(unknownFunction0()(), unknownFunction0()())", string0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-6), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(29, (Expression[]) null);
      coreFunction1.computeContextDependent();
      CoreFunction coreFunction2 = new CoreFunction(1326, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionString(parentContext0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext(parentContext0, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[1];
      evalContextArray0[0] = (EvalContext) parentContext0;
      UnionContext unionContext0 = new UnionContext(descendantContext0, evalContextArray0);
      coreFunction0.functionNull(evalContextArray0[0]);
      UnionContext unionContext1 = new UnionContext(namespaceContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(unionContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) descendantContext0;
      evalContextArray0[3] = (EvalContext) descendantContext0;
      evalContextArray0[4] = (EvalContext) descendantContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      CoreFunction coreFunction2 = new CoreFunction(2425, expressionArray0);
      Object object0 = coreFunction2.functionNumber(evalContextArray0[0]);
      JXPathContext jXPathContext0 = JXPathContext.newContext(object0);
      DescendantContext descendantContext1 = new DescendantContext(evalContextArray0[4], false, nodeNameTest0);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, expressionArray1[1], (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, descendantContext1, nodePointer0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction2.functionConcat(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2425()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      coreFunction1.isContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      expressionArray0[0] = (Expression) constant0;
      Step step0 = new Step((-786), processingInstructionTest0, expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], constant0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(324, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationMod0);
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.String
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      EvalContext evalContext0 = null;
      coreFunction1.functionSubstringBefore((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      QName qName1 = new QName("", "xl&7nVXosV:07; ");
      QName qName2 = new QName("");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(unknownFunction0()(), unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      Step step0 = new Step(3, nodeNameTest0, expressionArray1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray1[0], coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(expressionArray1[1], coreOperationDivide0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction1, expressionArray1[0]);
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      DescendantContext descendantContext1 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction2.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      CoreFunction coreFunction0 = new CoreFunction(127, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(evalContextArray0[0]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction127()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-115);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-65);
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte) (-30);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(47, expressionArray0);
      EvalContext evalContext0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(ancestorContext0, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction47()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.computeContextDependent();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray1);
      coreFunction1.functionSubstringBefore((EvalContext) null);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "unknownFunction");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = (EvalContext) descendantContext0;
      evalContextArray0[3] = (EvalContext) descendantContext0;
      evalContextArray0[4] = (EvalContext) descendantContext0;
      evalContextArray0[5] = null;
      evalContextArray0[6] = (EvalContext) namespaceContext0;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionBoolean(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(unknownFunction0()(), unknownFunction0()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreOperationAdd0, coreOperationDivide0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      QName qName0 = new QName("$5'qXR.JjwVOC!b");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "$5'qXR.JjwVOC!b");
      ParentContext parentContext0 = new ParentContext((EvalContext) null, nodeNameTest0);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      ParentContext parentContext1 = new ParentContext(parentContext0, nodeNameTest0);
      CoreFunction coreFunction1 = new CoreFunction((-2341), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(parentContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      int int0 = 0;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Expression context [");
      int int0 = 13;
      Step step0 = new Step(13, processingInstructionTest0, (Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.args = null;
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreOperationOr0;
      expressionArray0[1] = (Expression) coreFunction0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAdd0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(14, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion1;
      QName qName0 = new QName("B*@bn4UWMjM8a|U`", "B*@bn4UWMjM8a|U`");
      VariableReference variableReference0 = new VariableReference(qName0);
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference2;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray1);
      expressionArray0[7] = (Expression) coreOperationUnion2;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1811), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("jxpath.debug");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "jxpath.debug");
      Step step0 = new Step(0, nodeNameTest0, (Expression[]) null);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionPath0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, coreFunction0);
      coreOperationNegate0.toString();
      CoreFunction coreFunction1 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationSubtract0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      QName qName0 = new QName("Incorrect number of arguments: ", "unknownFunction-6()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last(Incorrect number of arguments: :unknownFunction-6()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000005) > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      coreOperationNegate0.toString();
      CoreFunction coreFunction0 = new CoreFunction(2764, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[0]);
      QName qName0 = new QName("", "4Q&C-$NOZ&}++c");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-962), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction56()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationSubtract0);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      int int0 = (-1922);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd1;
      expressionArray1[1] = (Expression) coreOperationAnd1;
      expressionArray1[2] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      ParentContext parentContext1 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      int int0 = 41;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6267, (Expression[]) null);
      coreFunction0.toString();
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("unknownFunction6267()()");
      Step step0 = new Step(6267, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step(6267, processingInstructionTest0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      Step step2 = new Step(6267, processingInstructionTest0, expressionArray0);
      Step step3 = new Step(22, processingInstructionTest0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(unknownFunction6267()())
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte)13;
      byteArray1[3] = (byte)40;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction((-2558), expressionArray0);
      coreFunction0.args = expressionArray0;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      coreFunction0.isContextDependent();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(427);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.isContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6267, (Expression[]) null);
      coreFunction0.toString();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreOperationDivide0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationDivide0);
      QName qName0 = new QName("Lx", "?I:cTL&j&&MC~");
      Expression[] expressionArray0 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, (Expression[]) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, (NodeTest) null, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6267()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThanOrEqual0, coreOperationLessThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(38, expressionArray0);
      coreFunction0.toString();
      QName qName0 = new QName("Lx");
      QName qName1 = new QName("Lx", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName1, "Lx");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      UnionContext unionContext0 = new UnionContext((EvalContext) null, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction38()((org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002) * (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dP]cs |C");
      Step step0 = new Step(38, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-128), processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step(22, processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(7, processingInstructionTest0, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(13, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationAnd0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-6()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreFunction coreFunction0 = new CoreFunction(6267, expressionArray0);
      coreFunction0.getArg2();
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationUnion0, expressionArray0[1]);
      CoreFunction coreFunction1 = new CoreFunction(6267, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(-org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CoreFunction coreFunction0 = new CoreFunction((-3035), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationNegate0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationNegate0);
      Integer integer0 = new Integer(363);
      Constant constant0 = new Constant(integer0);
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(constant0, coreOperationSubtract0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationSubtract0);
      Constant constant1 = new Constant(integer0);
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(constant0, coreOperationNotEqual1);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[1] = (Expression) coreOperationSubtract1;
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      expressionArray0[4] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction((-4200), expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[0], expressionArray0[0]);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, expressionArray0[0]);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationDivide0, expressionArray0[0]);
      QName qName0 = new QName("", "4Q&C-$NOZ&}++c");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction41()(null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1950);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step[] stepArray1 = new Step[9];
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      stepArray1[2] = step0;
      stepArray1[3] = step1;
      stepArray1[4] = step0;
      stepArray1[5] = step1;
      stepArray1[6] = step1;
      stepArray1[7] = step1;
      stepArray1[8] = step0;
      LocationPath locationPath0 = new LocationPath(false, stepArray1);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("local-name");
      expressionArray0[5] = (Expression) constant0;
      locationPath0.isSimplePath();
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6267, (Expression[]) null);
      coreFunction0.toString();
      QName qName0 = new QName("Lx");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction6267()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(38, (Expression[]) null);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("dP]cs |C");
      Step step0 = new Step(38, processingInstructionTest0, (Expression[]) null);
      Step step1 = new Step((-128), processingInstructionTest0, (Expression[]) null);
      Step step2 = new Step(22, processingInstructionTest0, (Expression[]) null);
      Step step3 = new Step(7, processingInstructionTest0, (Expression[]) null);
      Step step4 = new Step(1791, processingInstructionTest0, (Expression[]) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction((-128), (Expression[]) null);
      ExpressionPath expressionPath1 = new ExpressionPath(coreFunction1, (Expression[]) null, (Step[]) null);
      expressionPath1.createContextForStep((EvalContext) null, 38, processingInstructionTest0);
      CoreFunction coreFunction2 = new CoreFunction(1791, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction2.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationAnd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, nameAttributeTest0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(nameAttributeTest0, coreOperationAnd0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationAnd0);
      QName qName0 = new QName("M5p", "[`gQ^2}dxt}S]\"t7M");
      QName qName1 = new QName("Vsb|x..atFV`c`h", "M5p");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1213, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1213()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], locationPath0);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(locationPath0, coreOperationNegate0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Integer integer0 = new Integer((-839));
      Constant constant0 = new Constant(integer0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[3], coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationNotEqual1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNotEqual0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(integer0);
      expressionArray0[6] = (Expression) constant1;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[3], coreOperationNotEqual0);
      expressionArray0[7] = (Expression) coreOperationSubtract1;
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name(-org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 - org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001, org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 != org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -839, org.apache.commons.jxpath.ri.compiler.Constant@0000000005 != org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004) div org.apache.commons.jxpath.ri.compiler.Constant@0000000005, -839, org.apache.commons.jxpath.ri.compiler.Constant@0000000005 - (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000004))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, expressionArray0[2]);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("4Q&C-$NOZ&}++c");
      Step step0 = new Step(47, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("Cannot invoke extension function ");
      Step step3 = new Step(2101, processingInstructionTest1, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(0, processingInstructionTest1, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-5656), processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(0, processingInstructionTest1, expressionArray0);
      stepArray0[7] = step7;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAdd0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      Step[] stepArray1 = new Step[5];
      stepArray1[0] = step4;
      stepArray1[1] = step2;
      stepArray1[2] = step4;
      stepArray1[3] = step5;
      stepArray1[4] = step0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionPath0, expressionArray0, stepArray1);
      expressionPath1.createContextForStep((EvalContext) null, 0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationOr0, coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(56, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, (Step[]) null);
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      expressionPath0.createContextForStep((EvalContext) null, 56, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction56()(org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001 or org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000002, (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) <= (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], coreOperationAnd1);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationSubtract0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAnd0, coreOperationSubtract0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      QName qName0 = new QName("Incorrect number of arguments: ", "unknownFunction-6()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      CoreFunction coreFunction2 = new CoreFunction((-1922), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-1922()(Incorrect number of arguments: :unknownFunction-6()(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001)(andorg.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000005) > (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, expressionArray0[0]);
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      Expression[] expressionArray1 = new Expression[9];
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationAdd0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[5] = (Expression) coreOperationAdd0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray1);
      expressionArray1[7] = (Expression) coreOperationAdd1;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreFunction coreFunction0 = new CoreFunction(872, expressionArray1);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, (NodeTest) null);
      ParentContext parentContext0 = new ParentContext(descendantContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HS");
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionPosition(parentContext0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      Expression[] expressionArray1 = new Expression[9];
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationAdd1;
      expressionArray1[1] = (Expression) coreOperationAdd0;
      expressionArray1[2] = (Expression) coreOperationAdd0;
      expressionArray1[3] = (Expression) coreOperationAdd0;
      expressionArray1[4] = (Expression) coreOperationAdd0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationAdd1, coreOperationAdd1);
      expressionArray1[5] = (Expression) coreOperationDivide0;
      expressionArray1[6] = (Expression) coreOperationAdd0;
      expressionArray1[7] = (Expression) coreOperationAdd0;
      expressionArray1[8] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Operation", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2990), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-783), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("gh;6ikLUz2aHV");
      Expression[] expressionArray0 = new Expression[1];
      Constant constant0 = new Constant("gh;6ikLUz2aHV");
      constant0.toString();
      expressionArray0[0] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1380), expressionArray0);
      assertEquals(1, coreFunction0.getArgumentCount());
      
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest0, true);
      coreFunction0.functionName(precedingOrFollowingContext0);
      assertEquals((-1380), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      EvalContext evalContext1 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("", "");
      Expression[] expressionArray1 = null;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.getArg3();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        extensionFunction0.compute((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExtensionFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationOr0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], coreOperationAnd0);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationOr0, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationOr0, expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMod1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      QName qName0 = new QName("?I:cTL&j&&MC~", "?I:cTL&j&&MC~");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      // Undeclared exception!
      coreFunction0.functionNumber(parentContext0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1950);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-39), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, coreOperationUnion0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      Step[] stepArray1 = new Step[9];
      stepArray1[0] = step0;
      stepArray1[1] = step1;
      stepArray1[2] = step0;
      stepArray1[3] = step1;
      stepArray1[4] = step0;
      stepArray1[5] = step1;
      stepArray1[6] = step1;
      stepArray1[7] = step1;
      stepArray1[8] = step0;
      LocationPath locationPath1 = new LocationPath(false, stepArray1);
      expressionArray0[3] = (Expression) locationPath1;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      Constant constant0 = new Constant("local-name");
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AttributeContext attributeContext0 = new AttributeContext(nodeSetContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(attributeContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Step step0 = new Step(0, processingInstructionTest0, expressionArray1);
      processingInstructionTest0.toString();
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray1, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray1[1], expressionArray1[3]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      processingInstructionTest0.toString();
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionID(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat((org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005)[org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005]/UNKNOWN::processing-instruction('')[org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005][org.apache.commons.jxpath.ri.compiler.ExpressionPath@0000000004 and org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005], (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001) * (org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-4000), (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-4000()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[1] = (Expression) locationPath0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(46, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      LocationPath locationPath1 = new LocationPath(true, (Step[]) null);
      expressionArray0[5] = (Expression) locationPath1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[4], locationPath0);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], locationPath1);
      expressionArray0[7] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction((-973), expressionArray0);
      assertEquals((-973), coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      Expression[] expressionArray1 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[0] = (Expression) coreOperationAdd0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationUnion1;
      QName qName0 = new QName("B*@bn4UWMjM8a|U`", "B*@bn4UWMjM8a|U`");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[5] = (Expression) variableReference1;
      VariableReference variableReference2 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference2;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray1);
      expressionArray0[7] = (Expression) coreOperationUnion2;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[8] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-1811), expressionArray0);
      coreFunction0.toString();
      assertEquals((-1811), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.getFunctionName();
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6267, (Expression[]) null);
      coreFunction0.toString();
      QName qName0 = new QName("Lx");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, true);
      UnionContext unionContext0 = new UnionContext(childContext0, (EvalContext[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.UnionContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(878, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      QName qName0 = new QName("ig", "ig");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ig");
      NamespaceContext namespaceContext0 = new NamespaceContext(nodeSetContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(namespaceContext0, coreFunction0);
      predicateContext0.nextNode();
      DescendantContext descendantContext0 = new DescendantContext(predicateContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction878()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("AGQ:(8yx#0cS.");
      Step step0 = new Step(699, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3339), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, coreOperationAdd0);
      expressionArray1[0] = (Expression) coreOperationLessThan0;
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(expressionArray1[0], expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationLessThan1;
      QName qName0 = new QName("AGQ:(8yx#0cS.");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[2] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationAnd0;
      Expression[] expressionArray2 = new Expression[5];
      expressionArray2[0] = (Expression) coreOperationAnd0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) extensionFunction0;
      expressionArray2[3] = (Expression) coreOperationLessThan1;
      expressionArray2[4] = (Expression) coreOperationAnd0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray2);
      expressionArray1[4] = (Expression) coreOperationAnd1;
      Step step2 = new Step(435, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-3339), processingInstructionTest0, expressionArray2);
      stepArray0[3] = step3;
      Expression[] expressionArray3 = new Expression[8];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray3[0] = (Expression) coreOperationOr0;
      expressionArray3[1] = (Expression) coreOperationLessThan1;
      expressionArray3[2] = (Expression) coreOperationAnd1;
      expressionArray3[3] = (Expression) coreOperationAdd0;
      expressionArray3[4] = (Expression) coreOperationAdd0;
      expressionArray3[5] = (Expression) extensionFunction0;
      expressionArray3[6] = (Expression) coreOperationLessThan1;
      expressionArray3[7] = (Expression) coreOperationLessThan1;
      Step step4 = new Step(699, processingInstructionTest0, expressionArray3);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, expressionArray1[1]);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationGreaterThanOrEqual0, coreOperationLessThan1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationMod0, expressionArray1[2]);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      Integer integer0 = new Integer(435);
      Constant constant0 = new Constant(integer0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(699, expressionArray0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(attributeContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction699()(org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000017 <= org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000008, 435)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-1210), (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.iterate((EvalContext) null);
      QName qName0 = new QName("", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(descendantContext0, nodeNameTest0, false);
      Consumer<AncestorContext> consumer0 = (Consumer<AncestorContext>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        precedingOrFollowingContext0.forEachRemaining(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationUnion0, coreOperationUnion0);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      QName qName0 = new QName("", "Cannot access property: ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Integer integer0 = new Integer(1579);
      Constant constant0 = new Constant(integer0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreFunction0, coreFunction0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationNotEqual0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(constant0, coreOperationMultiply0);
      CoreFunction coreFunction1 = new CoreFunction(0, expressionArray0);
      QName qName1 = new QName(",)t.y<)Vnu%iB5(y");
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName1, "");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest1, false);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, coreOperationAnd0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, coreOperationNegate0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(1546, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction((-6), expressionArray0);
      coreFunction0.getArgumentCount();
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = null;
      try {
        qName0 = new QName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.QName", e);
      }
  }
}
