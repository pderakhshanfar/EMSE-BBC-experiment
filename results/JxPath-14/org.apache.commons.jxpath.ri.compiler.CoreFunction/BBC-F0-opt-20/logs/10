* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 15747
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 3025336328
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 08:29:17.878 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 08:29:30.119 [logback-1] WARN  CoverageArchive - A solution with a timeout/exception result has been added to the archive. The covered goal was org.apache.commons.jxpath.ri.compiler.CoreFunction.functionNumber(Lorg/apache/commons/jxpath/ri/EvalContext;)Ljava/lang/Object;: Line 631
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
[MASTER] 08:31:08.273 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.AncestorContext due to org.evosuite.ga.ConstructionFailedException: Have no generator for class org.apache.commons.jxpath.ri.axes.AncestorContext canUseFunctionalMocks=false, canBeMocked: true
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
[MASTER] 08:33:48.430 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.axes.RootContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Max recursion depth reached
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C1*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 08:36:22.695 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.NamespaceResolver due to org.evosuite.ga.ConstructionFailedException: Have no generator for class org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext canUseFunctionalMocks=false, canBeMocked: true
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C1*
*C1*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
[MASTER] 08:38:00.409 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.apache.commons.jxpath.ri.JXPathContextReferenceImpl due to org.evosuite.ga.ConstructionFailedException: Have no generator for class org.apache.commons.jxpath.ri.axes.AncestorContext canUseFunctionalMocks=false, canBeMocked: true
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C1*
*C1*
*C1*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C1*
*C1*
*C2*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C1*
*C2*
*C1*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
*C2*
* Search finished after 602s and 1108 generations, 483988 statements, best individual has fitness: 412.0
* Minimizing test suite
[MASTER] 08:40:21.389 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 88%
* Total number of goals: 344
* Number of covered goals: 301
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 90%
* Total number of goals: 355
* Number of covered goals: 318
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 163
* Number of covered goals: 163
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 85%
* Total number of goals: 616
* Number of covered goals: 522
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 39%
* Total number of goals: 82
* Number of covered goals: 32
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 92%
* Total number of goals: 40
* Number of covered goals: 37
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 90%
* Total number of goals: 355
* Number of covered goals: 318
* Generated 328 tests with total length 6125
* Resulting test suite's coverage: 79% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 08:41:04.037 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6727833333333333% of time used, but only 121/328 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 12%
* Compiling and checking tests
[MASTER] 08:41:23.884 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 08:41:27.531 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:27.532 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-1094);
Expression[] expressionArray0 = new Expression[3];
Double double0 = Expression.NOT_A_NUMBER;
Constant constant0 = new Constant(double0);
expressionArray0[0] = (Expression) constant0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
constant0.toString();
expressionArray0[1] = (Expression) coreOperationOr0;
CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[1]);
coreOperationLessThanOrEqual0.toString();
coreOperationLessThanOrEqual0.args = expressionArray0;
expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
CoreFunction coreFunction0 = new CoreFunction((-1094), expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionConcat((EvalContext) null);

[MASTER] 08:41:28.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:28.859 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 3004;
Expression[] expressionArray0 = new Expression[2];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[0] = (Expression) coreOperationUnion0;
QName qName0 = new QName("preceding");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(3004, expressionArray0);
JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) qName0);
JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], (Pointer) null);
Locale locale0 = Locale.UK;
NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
locale0.getUnicodeLocaleAttributes();
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("w}");
nodePointer0.toString();
DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, processingInstructionTest0);
coreFunction0.functionLocalName(descendantContext0);

[MASTER] 08:41:30.705 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:30.706 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[3];
Double double0 = Expression.NOT_A_NUMBER;
Constant constant0 = new Constant(double0);
expressionArray0[0] = (Expression) constant0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
constant0.toString();
expressionArray0[1] = (Expression) coreOperationOr0;
EvalContext evalContext0 = null;
CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
coreFunction0.functionSubstring((EvalContext) null);

[MASTER] 08:41:34.929 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:34.930 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = (-1094);
Expression[] expressionArray0 = new Expression[3];
Double double0 = Expression.NOT_A_NUMBER;
Constant constant0 = new Constant(double0);
expressionArray0[0] = (Expression) constant0;
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
constant0.toString();
expressionArray0[1] = (Expression) coreOperationOr0;
CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, expressionArray0[1]);
coreOperationLessThanOrEqual0.toString();
coreOperationLessThanOrEqual0.args = expressionArray0;
expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
CoreFunction coreFunction0 = new CoreFunction((-1094), expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionConcat((EvalContext) null);

[MASTER] 08:41:42.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:42.181 [logback-1] WARN  JUnitAnalyzer - Failing test:
 int int0 = 3004;
Expression[] expressionArray0 = new Expression[2];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[0] = (Expression) coreOperationUnion0;
QName qName0 = new QName("preceding");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(3004, expressionArray0);
JXPathContext jXPathContext0 = JXPathContext.newContext((JXPathContext) null, (Object) qName0);
JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, expressionArray0[0], (Pointer) null);
Locale locale0 = Locale.UK;
NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
locale0.getUnicodeLocaleAttributes();
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("w}");
nodePointer0.toString();
DescendantContext descendantContext0 = new DescendantContext(rootContext0, true, processingInstructionTest0);
coreFunction0.functionLocalName(descendantContext0);

[MASTER] 08:41:46.751 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:41:46.752 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[0];
CoreFunction coreFunction0 = new CoreFunction(3550, expressionArray0);
QName qName0 = new QName("", "");
String string0 = null;
Expression[] expressionArray1 = new Expression[5];
expressionArray1[0] = (Expression) coreFunction0;
expressionArray1[1] = (Expression) coreFunction0;
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
expressionArray1[2] = (Expression) extensionFunction0;
expressionArray1[3] = (Expression) coreFunction0;
expressionArray1[4] = (Expression) coreFunction0;
CoreFunction coreFunction1 = new CoreFunction(26, expressionArray1);
coreFunction1.toString();

[MASTER] 08:42:03.219 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 08:42:03.225 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
assertFalse(boolean0);

Expression[] expressionArray0 = new Expression[3];
Double double0 = new Double(2998.517023);
assertEquals(2998.517023, (double)double0, 0.01);
assertNotNull(double0);

Constant constant0 = new Constant(double0);
assertNotNull(constant0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());

CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
assertNotNull(coreOperationGreaterThan0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());
assertEquals(">", coreOperationGreaterThan0.getSymbol());

CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, coreOperationGreaterThan0);
assertNotNull(coreOperationLessThan0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());
assertEquals(">", coreOperationGreaterThan0.getSymbol());
assertEquals("<", coreOperationLessThan0.getSymbol());

CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, constant0);
assertNotNull(coreOperationDivide0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());
assertEquals(">", coreOperationGreaterThan0.getSymbol());
assertEquals("<", coreOperationLessThan0.getSymbol());
assertEquals("div", coreOperationDivide0.getSymbol());

CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, coreOperationGreaterThan0);
assertNotNull(coreOperationMultiply0);
assertFalse(constant0.computeContextDependent());
assertFalse(constant0.isContextDependent());
assertEquals(">", coreOperationGreaterThan0.getSymbol());
assertEquals("<", coreOperationLessThan0.getSymbol());
assertEquals("div", coreOperationDivide0.getSymbol());
assertEquals("*", coreOperationMultiply0.getSymbol());

expressionArray0[0] = (Expression) coreOperationMultiply0;
Step[] stepArray0 = new Step[8];
QName qName0 = new QName("", "J");
assertNotNull(qName0);
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());

NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "JN^*`G^+W)IpQziS");
assertNotNull(nodeNameTest0);
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

Step step0 = new Step(13, nodeNameTest0, expressionArray0);
assertEquals(3, expressionArray0.length);
assertNotNull(step0);
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());
assertEquals(13, step0.getAxis());

stepArray0[0] = step0;
Step step1 = new Step((-237), nodeNameTest0, expressionArray0);
assertFalse(step1.equals((Object)step0));
assertEquals(3, expressionArray0.length);
assertNotNull(step1);
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());
assertEquals((-237), step1.getAxis());

stepArray0[1] = step1;
Step step2 = new Step(13, nodeNameTest0, expressionArray0);
assertFalse(step2.equals((Object)step1));
assertFalse(step2.equals((Object)step0));
assertEquals(3, expressionArray0.length);
assertNotNull(step2);
assertEquals(13, step2.getAxis());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

stepArray0[2] = step2;
Step step3 = new Step(13, nodeNameTest0, expressionArray0);
assertFalse(step3.equals((Object)step0));
assertFalse(step3.equals((Object)step2));
assertFalse(step3.equals((Object)step1));
assertEquals(3, expressionArray0.length);
assertNotNull(step3);
assertEquals(13, step3.getAxis());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

stepArray0[3] = step3;
Step step4 = new Step(13, nodeNameTest0, expressionArray0);
assertFalse(step4.equals((Object)step1));
assertFalse(step4.equals((Object)step0));
assertFalse(step4.equals((Object)step3));
assertFalse(step4.equals((Object)step2));
assertEquals(3, expressionArray0.length);
assertNotNull(step4);
assertEquals(13, step4.getAxis());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

stepArray0[4] = step4;
Step step5 = new Step(13, nodeNameTest0, expressionArray0);
assertFalse(step5.equals((Object)step4));
assertFalse(step5.equals((Object)step0));
assertFalse(step5.equals((Object)step1));
assertFalse(step5.equals((Object)step3));
assertFalse(step5.equals((Object)step2));
assertEquals(3, expressionArray0.length);
assertNotNull(step5);
assertEquals(13, step5.getAxis());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

stepArray0[5] = step5;
Step step6 = new Step(13, nodeNameTest0, expressionArray0);
assertFalse(step6.equals((Object)step3));
assertFalse(step6.equals((Object)step2));
assertFalse(step6.equals((Object)step5));
assertFalse(step6.equals((Object)step4));
assertFalse(step6.equals((Object)step1));
assertFalse(step6.equals((Object)step0));
assertEquals(3, expressionArray0.length);
assertNotNull(step6);
assertEquals(13, step6.getAxis());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertFalse(nodeNameTest0.isWildcard());
assertEquals("JN^*`G^+W)IpQziS", nodeNameTest0.getNamespaceURI());
assertEquals(":J", nodeNameTest0.toString());

stepArray0[6] = step6;
NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "J");
assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
assertNotNull(nodeNameTest1);
assertFalse(nodeNameTest1.isWildcard());
assertEquals(":J", nodeNameTest1.toString());
assertEquals("J", nodeNameTest1.getNamespaceURI());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());

Step step7 = new Step(949, nodeNameTest1, expressionArray0);
assertFalse(nodeNameTest1.equals((Object)nodeNameTest0));
assertFalse(step7.equals((Object)step2));
assertFalse(step7.equals((Object)step5));
assertFalse(step7.equals((Object)step0));
assertFalse(step7.equals((Object)step4));
assertFalse(step7.equals((Object)step1));
assertFalse(step7.equals((Object)step6));
assertFalse(step7.equals((Object)step3));
assertEquals(3, expressionArray0.length);
assertNotNull(step7);
assertFalse(nodeNameTest1.isWildcard());
assertEquals(":J", nodeNameTest1.toString());
assertEquals("J", nodeNameTest1.getNamespaceURI());
assertEquals("J", qName0.getName());
assertEquals(":J", qName0.toString());
assertEquals("", qName0.getPrefix());
assertEquals(949, step7.getAxis());

stepArray0[7] = step7;
LocationPath locationPath0 = new LocationPath(true, stepArray0);
assertEquals(8, stepArray0.length);
assertNotNull(locationPath0);
assertTrue(locationPath0.isAbsolute());

expressionArray0[1] = (Expression) locationPath0;
QName qName1 = new QName("J");
assertFalse(qName1.equals((Object)qName0));
assertNotNull(qName1);
assertEquals("J", qName1.getName());
assertNull(qName1.getPrefix());
assertEquals("J", qName1.toString());

ExtensionFunction extensionFunction0 = new ExtensionFunction(qName1, (Expression[]) null);
assertFalse(qName1.equals((Object)qName0));
assertNotNull(extensionFunction0);
assertTrue(extensionFunction0.computeContextDependent());
assertEquals("J", qName1.getName());
assertNull(qName1.getPrefix());
assertEquals("J", qName1.toString());

expressionArray0[2] = (Expression) extensionFunction0;
CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
assertEquals(3, expressionArray0.length);
assertNotNull(coreFunction0);
assertEquals(3, coreFunction0.getArgumentCount());
assertEquals(13, coreFunction0.getFunctionCode());

coreFunction0.functionID((EvalContext) null);

* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/BBC-F0-opt-20/tests/10
* Done!

* Computation finished
