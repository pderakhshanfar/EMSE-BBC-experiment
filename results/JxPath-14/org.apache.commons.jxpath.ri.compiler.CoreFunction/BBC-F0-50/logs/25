* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.apache.commons.jxpath.ri.compiler.CoreFunction
* Starting Client-0
* Connecting to master process on port 17442
* Analyzing classpath: 
  - subjects/buggy-versions/JxPath-14/target/classes
  - subjects/buggy-versions/JxPath-14/src/java
  - subjects/buggy-versions/JxPath-14/target/lib/commons-beanutils-1.7.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/commons-logging-1.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jdom-1.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/jsp-api-2.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/junit-3.8.2.jar
  - subjects/buggy-versions/JxPath-14/target/lib/mockrunner-0.4.1.jar
  - subjects/buggy-versions/JxPath-14/target/lib/servletapi-2.4.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xerces-2.4.0.jar
  - subjects/buggy-versions/JxPath-14/target/lib/xml-apis-2.0.2.jar
* Finished analyzing classpath
* Generating tests for class org.apache.commons.jxpath.ri.compiler.CoreFunction
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1832
* Using seed 615015996
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 654 / 1832
[MASTER] 04:23:28.408 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
* Search finished after 603s and 284 generations, 110550 statements, best individual has fitness: 675.0
* Minimizing test suite
[MASTER] 04:34:37.176 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 73%
* Total number of goals: 344
* Number of covered goals: 250
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 77%
* Total number of goals: 355
* Number of covered goals: 275
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 129
* Number of covered goals: 129
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 60%
* Total number of goals: 616
* Number of covered goals: 371
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 34%
* Total number of goals: 82
* Number of covered goals: 28
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 40
* Number of covered goals: 40
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 88%
* Total number of goals: 40
* Number of covered goals: 35
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 77%
* Total number of goals: 355
* Number of covered goals: 275
* Generated 288 tests with total length 5255
* Resulting test suite's coverage: 69% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 04:35:40.247 [logback-1] WARN  SimpleMutationAssertionGenerator - Reached maximum time to generate assertions, aborting assertion generation
* Resulting test suite's mutation score: 13%
* Compiling and checking tests
[MASTER] 04:35:52.311 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 04:36:09.156 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:09.157 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
Expression[] expressionArray0 = new Expression[8];
QName qName0 = new QName("");
VariableReference variableReference0 = new VariableReference(qName0);
expressionArray0[0] = (Expression) variableReference0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, variableReference0);
expressionArray0[1] = (Expression) coreOperationLessThan0;
NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], expressionArray0[1]);
expressionArray0[2] = (Expression) nameAttributeTest0;
Constant constant0 = new Constant(":18R2@B");
expressionArray0[3] = (Expression) constant0;
VariableReference variableReference1 = new VariableReference(qName0);
expressionArray0[4] = (Expression) variableReference1;
FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[5] = (Expression) extensionFunction0;
CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], constant0);
expressionArray0[6] = (Expression) coreOperationMod0;
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
expressionArray0[7] = (Expression) coreOperationAdd0;
CoreFunction coreFunction0 = new CoreFunction(2779, expressionArray0);
coreFunction0.getFunctionCode();
EvalContext evalContext0 = null;
CoreFunction coreFunction1 = new CoreFunction(13, expressionArray0);
coreFunction1.computeValue((EvalContext) null);

[MASTER] 04:36:19.630 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:19.631 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[7];
VariableReference variableReference0 = new VariableReference((QName) null);
expressionArray0[0] = (Expression) variableReference0;
Step[] stepArray0 = new Step[9];
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
Step step0 = new Step(13, processingInstructionTest0, expressionArray0);
stepArray0[6] = step0;
LocationPath locationPath0 = new LocationPath(false, stepArray0);
expressionArray0[1] = (Expression) locationPath0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
expressionArray0[2] = (Expression) coreOperationNegate0;
VariableReference variableReference1 = new VariableReference((QName) null);
expressionArray0[3] = (Expression) variableReference1;
ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
expressionArray0[4] = (Expression) extensionFunction0;
CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationAdd0);
expressionArray0[1] = (Expression) coreOperationNegate1;
CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNegate0, extensionFunction0);
expressionArray0[6] = (Expression) coreOperationGreaterThan0;
CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
coreFunction0.functionLang(ancestorContext0);

[MASTER] 04:36:20.995 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:20.996 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
Expression[] expressionArray1 = new Expression[1];
expressionArray1[0] = (Expression) coreOperationOr0;
CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray1);
expressionArray0[1] = (Expression) coreOperationOr1;
CoreFunction coreFunction0 = new CoreFunction(3380, expressionArray0);
EvalContext evalContext0 = null;
coreFunction0.functionSubstring((EvalContext) null);

[MASTER] 04:36:23.028 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:23.032 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
expressionArray0[0] = (Expression) coreOperationOr0;
CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationOr0, coreOperationOr0);
expressionArray0[1] = (Expression) coreOperationSubtract0;
Step[] stepArray0 = new Step[3];
NodeTypeTest nodeTypeTest0 = new NodeTypeTest(4);
Step step0 = new Step(4, nodeTypeTest0, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step(19, nodeTypeTest0, expressionArray0);
stepArray0[1] = step1;
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Cannot convert ");
Step step2 = new Step(4, processingInstructionTest0, expressionArray0);
stepArray0[2] = step2;
LocationPath locationPath0 = new LocationPath(false, stepArray0);
expressionArray0[2] = (Expression) locationPath0;
CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
expressionArray0[3] = (Expression) coreOperationOr1;
CoreFunction coreFunction0 = new CoreFunction((-11), expressionArray0);
JXPathContext jXPathContext0 = JXPathContext.newContext((Object) nodeTypeTest0);
QName qName0 = new QName("Cannot convert ", "L8_Q0rSt\"33\"' ");
VariablePointer variablePointer0 = new VariablePointer(qName0);
NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, variablePointer0, (Locale) null);
variablePointer0.getLocale();
JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, step1, nodePointer0);
RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
RootContext rootContext1 = rootContext0.getRootContext();
coreFunction0.functionCeiling(rootContext1);

[MASTER] 04:36:27.774 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:27.776 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[2];
QName qName0 = new QName((String) null, "id");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
Step[] stepArray0 = new Step[2];
ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
Step step0 = new Step(5, processingInstructionTest0, expressionArray0);
stepArray0[0] = step0;
Step step1 = new Step(5, processingInstructionTest0, expressionArray0);
stepArray0[1] = step1;
ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNotEqual0, expressionArray0, stepArray0);
expressionArray0[0] = (Expression) expressionPath0;
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
expressionArray0[1] = (Expression) coreOperationNegate0;
CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
coreFunction0.getFunctionCode();
NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
EvalContext evalContext0 = null;
coreFunction0.computeValue((EvalContext) null);

[MASTER] 04:36:29.321 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:29.323 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
Expression[] expressionArray0 = new Expression[5];
Byte byte0 = new Byte((byte) (-19));
Constant constant0 = new Constant(byte0);
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, constant0);
expressionArray0[0] = (Expression) coreOperationMultiply0;
Constant constant1 = new Constant("");
CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant1);
expressionArray0[1] = (Expression) coreOperationNegate0;
CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant1, coreOperationMultiply0);
expressionArray0[2] = (Expression) coreOperationEqual0;
CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[0], expressionArray0[2]);
expressionArray0[3] = (Expression) coreOperationMod0;
coreOperationEqual0.args = expressionArray0;
constant0.toString();
CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[0], constant0);
expressionArray0[4] = (Expression) coreOperationMultiply0;
CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
coreFunction0.computeContextDependent();

[MASTER] 04:36:34.623 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.StackOverflowError: null
[MASTER] 04:36:34.624 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Expression[] expressionArray0 = new Expression[4];
CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
expressionArray0[0] = (Expression) coreOperationUnion0;
QName qName0 = new QName("u%,c{]`Vo", "u%,c{]`Vo");
ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
expressionArray0[1] = (Expression) extensionFunction0;
CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationUnion0);
expressionArray0[2] = (Expression) coreOperationLessThan0;
Step[] stepArray0 = new Step[9];
NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
Step step0 = new Step((-1), nodeNameTest0, expressionArray0);
stepArray0[0] = step0;
NodeNameTest nodeNameTest1 = new NodeNameTest(qName0);
Step step1 = new Step(555, nodeNameTest1, expressionArray0);
stepArray0[1] = step1;
Step step2 = new Step((-1), nodeNameTest0, expressionArray0);
stepArray0[2] = step2;
Step step3 = new Step((-616), nodeNameTest0, expressionArray0);
stepArray0[3] = step3;
NodeNameTest nodeNameTest2 = new NodeNameTest(qName0, "M");
Step step4 = new Step((-1349), nodeNameTest2, expressionArray0);
stepArray0[4] = step4;
Step step5 = new Step(543, nodeNameTest1, expressionArray0);
stepArray0[5] = step5;
Step step6 = new Step((-2872), nodeNameTest1, expressionArray0);
stepArray0[6] = step6;
Step step7 = new Step((-1349), nodeNameTest2, expressionArray0);
stepArray0[7] = step7;
Step step8 = new Step(3280, nodeNameTest0, expressionArray0);
stepArray0[8] = step8;
ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
expressionArray0[3] = (Expression) expressionPath0;
CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
coreFunction0.functionPosition((EvalContext) null);

[MASTER] 04:36:37.687 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
* Writing tests to file
* Writing JUnit test case 'CoreFunction_ESTest' to results/JxPath-14/org.apache.commons.jxpath.ri.compiler.CoreFunction/BBC-F0-50/tests/25
* Done!

* Computation finished
