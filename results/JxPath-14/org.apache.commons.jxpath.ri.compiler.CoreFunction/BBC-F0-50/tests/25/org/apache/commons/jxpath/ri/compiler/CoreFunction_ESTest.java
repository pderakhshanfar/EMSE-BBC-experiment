/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 02:35:49 GMT 2021
 */

package org.apache.commons.jxpath.ri.compiler;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.function.Consumer;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.BasicVariables;
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.Variables;
import org.apache.commons.jxpath.ri.EvalContext;
import org.apache.commons.jxpath.ri.JXPathContextReferenceImpl;
import org.apache.commons.jxpath.ri.NamespaceResolver;
import org.apache.commons.jxpath.ri.QName;
import org.apache.commons.jxpath.ri.axes.AncestorContext;
import org.apache.commons.jxpath.ri.axes.AttributeContext;
import org.apache.commons.jxpath.ri.axes.ChildContext;
import org.apache.commons.jxpath.ri.axes.DescendantContext;
import org.apache.commons.jxpath.ri.axes.InitialContext;
import org.apache.commons.jxpath.ri.axes.NamespaceContext;
import org.apache.commons.jxpath.ri.axes.NodeSetContext;
import org.apache.commons.jxpath.ri.axes.ParentContext;
import org.apache.commons.jxpath.ri.axes.PrecedingOrFollowingContext;
import org.apache.commons.jxpath.ri.axes.PredicateContext;
import org.apache.commons.jxpath.ri.axes.RootContext;
import org.apache.commons.jxpath.ri.axes.SelfContext;
import org.apache.commons.jxpath.ri.axes.UnionContext;
import org.apache.commons.jxpath.ri.compiler.Constant;
import org.apache.commons.jxpath.ri.compiler.CoreFunction;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAdd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationAnd;
import org.apache.commons.jxpath.ri.compiler.CoreOperationDivide;
import org.apache.commons.jxpath.ri.compiler.CoreOperationEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan;
import org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMod;
import org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNegate;
import org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual;
import org.apache.commons.jxpath.ri.compiler.CoreOperationOr;
import org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract;
import org.apache.commons.jxpath.ri.compiler.CoreOperationUnion;
import org.apache.commons.jxpath.ri.compiler.Expression;
import org.apache.commons.jxpath.ri.compiler.ExpressionPath;
import org.apache.commons.jxpath.ri.compiler.ExtensionFunction;
import org.apache.commons.jxpath.ri.compiler.LocationPath;
import org.apache.commons.jxpath.ri.compiler.NameAttributeTest;
import org.apache.commons.jxpath.ri.compiler.NodeNameTest;
import org.apache.commons.jxpath.ri.compiler.NodeTest;
import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;
import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;
import org.apache.commons.jxpath.ri.compiler.Step;
import org.apache.commons.jxpath.ri.compiler.VariableReference;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.VariablePointer;
import org.apache.commons.jxpath.ri.model.VariablePointerFactory;
import org.apache.commons.jxpath.ri.model.beans.BeanPointer;
import org.apache.commons.jxpath.ri.model.beans.NullPointer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CoreFunction_ESTest extends CoreFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      Expression[] expressionArray1 = new Expression[0];
      coreOperationEqual0.args = expressionArray1;
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Long long0 = new Long(2855);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(965, expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-649), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      coreFunction1.toString();
      coreFunction1.computeContextDependent();
      coreFunction1.computeContextDependent();
      Object object0 = null;
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) null);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      QName qName0 = new QName("java.lang.Character");
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      EvalContext[] evalContextArray0 = new EvalContext[5];
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) initialContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1571, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      QName qName0 = new QName(">Dp0#\"on+J-U)F4E");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: >Dp0#\"on+J-U)F4E
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long(2);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("PsVuJ");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(2, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(7, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(85, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long(27);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-173197713), expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) null);
      QName qName0 = new QName("iR");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      NodePointer nodePointer1 = NodePointer.newNodePointer(qName0, "iR", (Locale) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, nodePointer0, nodePointer1);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(rootContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: iR
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Expression[] expressionArray1 = new Expression[0];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("1289", "key");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(35, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationNegate0, expressionArray1, stepArray0);
      expressionArray0[2] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      Constant constant0 = new Constant("{TVDh%/CG J");
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(16777216, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLang((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      int int0 = 531;
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(531, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionTranslate((EvalContext) null);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction531()(NaN, NaN, NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      QName qName0 = new QName((String) null, (String) null);
      Locale locale0 = Locale.KOREA;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, locale0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "cUu )");
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      coreFunction0.functionName(rootContext0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("221");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1501, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(3);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      Expression[] expressionArray1 = new Expression[0];
      coreOperationDivide0.args = expressionArray1;
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationDivide", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("16431643");
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[0] = (Expression) coreOperationNegate0;
      Constant constant1 = new Constant("bVj4f4u");
      expressionArray0[1] = (Expression) constant1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationAdd0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant1, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[8];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("bVj4f4u");
      Step step0 = new Step((-1056), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(644, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1056), processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(19, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(19, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("16431643");
      Step step6 = new Step((-1056), processingInstructionTest1, (Expression[]) null);
      stepArray0[6] = step6;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant1;
      Step step7 = new Step(1006, processingInstructionTest0, expressionArray1);
      stepArray0[7] = step7;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[5] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNotEqual0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationMod0;
      QName qName0 = new QName("bVj4f4u", "k=|[,bB,<");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      expressionArray0[7] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(extensionFunction0, coreOperationNotEqual0);
      expressionArray0[8] = (Expression) coreOperationMod1;
      CoreFunction coreFunction0 = new CoreFunction((-1056), expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, processingInstructionTest1, false);
      PredicateContext predicateContext0 = new PredicateContext(precedingOrFollowingContext0, expressionArray0[5]);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(predicateContext0, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, false, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionNull(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Double double0 = Expression.ONE;
      Long long0 = new Long(0L);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) nameAttributeTest0;
      expressionArray0[6] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationOr0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) constant0;
      Constant constant1 = new Constant(double0);
      expressionArray1[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(2147483645, expressionArray1);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      Step[] stepArray0 = new Step[2];
      QName qName0 = new QName("8E'8N2>-@/GWrFH9bs");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "wca)s#R[6.U\"hev");
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationUnion0;
      expressionArray1[1] = (Expression) coreOperationUnion0;
      expressionArray1[2] = (Expression) coreOperationUnion0;
      expressionArray1[3] = (Expression) coreOperationUnion0;
      expressionArray1[4] = (Expression) coreOperationUnion0;
      expressionArray1[5] = (Expression) coreOperationUnion0;
      Step step0 = new Step(1763, nodeNameTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(1030, nodeNameTest0, expressionArray1);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(1763, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(namespaceContext0, basicNodeSet0);
      ChildContext childContext0 = new ChildContext(nodeSetContext0, nodeNameTest0, false, true);
      // Undeclared exception!
      coreFunction0.functionTranslate(childContext0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(101, (Expression[]) null);
      QName qName0 = new QName(",dd69n<'@,loD|;l", ",dd69n<'@,loD|;l");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) ",dd69n<'@,loD|;l");
      CoreFunction coreFunction1 = new CoreFunction(101, (Expression[]) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      InitialContext initialContext0 = (InitialContext)rootContext0.getVariableContext(qName0);
      evalContextArray0[0] = (EvalContext) initialContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      evalContextArray0[4] = (EvalContext) rootContext0;
      evalContextArray0[5] = (EvalContext) rootContext0;
      evalContextArray0[6] = (EvalContext) rootContext0;
      evalContextArray0[7] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Long long0 = new Long((-3));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[0];
      coreOperationGreaterThan0.args = expressionArray0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      expressionArray1[1] = (Expression) coreOperationGreaterThan0;
      expressionArray1[2] = (Expression) coreOperationDivide0;
      coreOperationDivide0.computeContextDependent();
      CoreFunction coreFunction0 = new CoreFunction(1634, expressionArray1);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[4];
      Step[] stepArray0 = new Step[10];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(36);
      Step step0 = new Step(36, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(36, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(36, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-255), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(4, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step((-1946), nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(3, nodeTypeTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationAdd0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(36, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(36, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Long long0 = new Long((-3));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-3), expressionArray0);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.setPosition((-65508));
      basicNodeSet0.getNodes();
      CoreFunction coreFunction0 = new CoreFunction((-65508), (Expression[]) null);
      coreFunction0.functionLast(nodeSetContext0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Long long0 = new Long(3);
      Constant constant0 = new Constant((Number) null);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationMod0, coreOperationMod0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationMod0;
      expressionArray0[1] = (Expression) nameAttributeTest0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(21856255, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(846, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.setPosition((-65529));
      CoreFunction coreFunction0 = new CoreFunction((-65529), (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[1];
      Constant constant0 = new Constant("last");
      expressionArray1[0] = (Expression) constant0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      VariableReference variableReference0 = new VariableReference((QName) null);
      expressionArray0[1] = (Expression) variableReference0;
      QName qName0 = new QName(">fb\"L1F#:%5D\"hz", "last");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[3] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionCount((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      constant0.toString();
      CoreFunction coreFunction0 = new CoreFunction(601, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      QName qName0 = new QName("'null'", "'null'");
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationOr0, locale0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      coreFunction0.functionLang(initialContext0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(101, (Expression[]) null);
      QName qName0 = new QName("521", "521");
      Locale locale0 = Locale.FRANCE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) "521");
      coreFunction0.isContextDependent();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(1333);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeTypeTest0, false, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, false, nodeTypeTest0);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      PredicateContext predicateContext0 = new PredicateContext(rootContext1, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("n/d");
      Step step0 = new Step((-2210), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[6];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationUnion0, expressionArray1[0]);
      expressionArray1[1] = (Expression) coreOperationSubtract0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationUnion0, expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray1[3] = (Expression) coreOperationAdd0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThanOrEqual0, coreOperationSubtract0);
      expressionArray1[4] = (Expression) coreOperationEqual0;
      QName qName0 = new QName(")B+FaHT],$P)%)^R6=I");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[5] = (Expression) extensionFunction0;
      Step step1 = new Step(1125, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(1125, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Expression[] expressionArray2 = new Expression[0];
      Step step3 = new Step(1125, processingInstructionTest0, expressionArray2);
      stepArray0[3] = step3;
      Step step4 = new Step(810, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(Integer.MIN_VALUE, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[2], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationUnion1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], expressionArray1[4]);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationSubtract0, locationPath0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan1;
      Expression[] expressionArray3 = new Expression[6];
      expressionArray3[0] = (Expression) locationPath0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray1[5], expressionArray3[0]);
      expressionArray3[1] = (Expression) coreOperationNotEqual1;
      expressionArray3[2] = (Expression) coreOperationSubtract0;
      expressionArray3[3] = (Expression) locationPath0;
      expressionArray3[4] = (Expression) coreOperationAdd0;
      expressionArray3[5] = (Expression) coreOperationUnion1;
      CoreOperationUnion coreOperationUnion2 = new CoreOperationUnion(expressionArray3);
      expressionArray0[6] = (Expression) coreOperationUnion2;
      Constant constant0 = new Constant("-2-2");
      expressionArray0[7] = (Expression) constant0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[5], expressionArray1, stepArray0);
      expressionArray0[8] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction((-2210), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(3);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Expression[] expressionArray1 = new Expression[0];
      coreOperationGreaterThan0.args = expressionArray1;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationRelationalExpression", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName(" z?m/^Jm!Q^~LNq z?m/^Jm!Q^~LNq", "$T5i9e\"i*l");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction1, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAdd0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd1;
      CoreFunction coreFunction0 = new CoreFunction(102, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Double double0 = Expression.ZERO;
      Constant constant0 = new Constant(double0);
      Expression[] expressionArray0 = new Expression[5];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(constant0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationMod0;
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[4] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-1837), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant(" z?m/^Jm!Q^~LNq");
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant(" z?m/^Jm!Q^~LNq");
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("N ]@/3$T6");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "N ]@/3$T6");
      Step step0 = new Step((-837), nodeNameTest0, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreFunction0, expressionArray0[0]);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.getArgumentCount();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationDivide0;
      Step step0 = new Step((-2), (NodeTest) null, expressionArray0);
      Step step1 = new Step(1634, (NodeTest) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(1634, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[2], expressionArray0[0]);
      coreFunction0.functionSubstring((EvalContext) null);
      coreFunction0.functionTranslate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1634()(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Long long0 = new Long((-1L));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThan0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest((Expression) null, coreOperationNegate0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, constant0);
      Expression[] expressionArray0 = new Expression[7];
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationNegate0;
      expressionArray0[2] = null;
      QName qName0 = new QName("-1", "EGefPfw>C/1");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[3] = (Expression) extensionFunction0;
      expressionArray0[4] = (Expression) coreOperationDivide0;
      expressionArray0[5] = (Expression) coreOperationNegate0;
      expressionArray0[6] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstringBefore((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThan0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationLessThan0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThan0, coreOperationMultiply0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      Step step1 = new Step(5, (NodeTest) null, expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, expressionArray0[2]);
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, (Expression) null);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(nameAttributeTest0, nameAttributeTest0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, nameAttributeTest1);
      constant0.toString();
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) nameAttributeTest0;
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreOperationGreaterThan0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, constant1);
      coreFunction0.functionSubstring((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 5)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("Nh/kS~t(W", "Nh/kS~t(W");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[5];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Step step0 = new Step(2428, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2428, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1551, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest("Nh/kS~t(W");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[1], expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationNotEqual0;
      expressionArray1[3] = (Expression) extensionFunction0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) extensionFunction0;
      expressionArray1[6] = (Expression) extensionFunction0;
      expressionArray1[7] = (Expression) extensionFunction0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray1[6], expressionArray1[3]);
      expressionArray1[8] = (Expression) coreOperationDivide0;
      Step step3 = new Step((-2514), processingInstructionTest1, expressionArray1);
      stepArray0[3] = step3;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step4 = new Step(2428, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], expressionArray0[0]);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, expressionArray1[7]);
      expressionArray0[2] = (Expression) nameAttributeTest0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(locationPath0, expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMod0, expressionArray1[5]);
      expressionArray0[5] = (Expression) coreOperationEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionPath0, nameAttributeTest0);
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(coreOperationMod0, coreOperationGreaterThan0);
      expressionArray0[6] = (Expression) coreOperationMod1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[4], coreOperationMod0);
      expressionArray0[7] = (Expression) coreOperationMultiply0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[5], extensionFunction0);
      expressionArray0[8] = (Expression) coreOperationLessThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(2428, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) step4);
      Locale locale0 = Locale.CHINESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, (Object) null, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreOperationMod1, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getConstantContext(coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(evalContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Long long0 = new Long(14);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationGreaterThan0);
      constant0.toString();
      Constant constant1 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant1;
      expressionArray0[1] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[1]);
      coreFunction0.functionSubstring(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, nameAttributeTest0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, nameAttributeTest1);
      constant0.toString();
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) nameAttributeTest1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Step[] stepArray0 = new Step[3];
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest1, expressionArray0, stepArray0);
      CoreFunction coreFunction1 = new CoreFunction(5, expressionArray0);
      coreFunction1.functionTranslate((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 5, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 = org.apache.commons.jxpath.ri.compiler.Constant@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, nameAttributeTest0);
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, nameAttributeTest1);
      constant0.toString();
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) nameAttributeTest1;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step((-1701), (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3966), (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(5, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-2), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction((-2), expressionArray0);
      coreFunction2.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Step[] stepArray0 = new Step[6];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      Step step0 = new Step((-2206), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-3454), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[3];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      Step step2 = new Step((-2115), processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step((-748), processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step((-2206), processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(21, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray1[2]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      Expression[] expressionArray2 = new Expression[4];
      expressionArray2[0] = (Expression) coreOperationMultiply0;
      expressionArray2[1] = (Expression) coreOperationAnd0;
      expressionArray2[2] = (Expression) coreOperationUnion0;
      expressionArray2[3] = (Expression) coreOperationUnion0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray2);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      AncestorContext ancestorContext0 = new AncestorContext(nodeSetContext0, false, processingInstructionTest0);
      EvalContext evalContext0 = expressionPath0.evalSteps(ancestorContext0);
      SelfContext selfContext0 = new SelfContext(evalContext0, processingInstructionTest0);
      // Undeclared exception!
      coreFunction0.functionFalse(selfContext0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long(5);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, constant0);
      constant0.toString();
      Constant constant1 = new Constant((Number) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant1;
      expressionArray0[2] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3);
      Step step0 = new Step(5, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      QName qName0 = new QName("5");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "5");
      Step step4 = new Step((-1492), nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(91, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 5;
      EvalContext evalContext0 = null;
      QName qName0 = new QName(", atomic", ", atomic");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, true, true);
      childContext0.getCurrentNodePointer();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) childContext0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "[ProcessingInstruction: ");
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, ancestorContext0, (Pointer) null);
      String string0 = "{object of type ";
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      expressionArray0[1] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(extensionFunction0, constant0);
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((-410), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionPosition(precedingOrFollowingContext0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      QName qName0 = new QName("~*XRXKebmI~+0]Y9saR", "~*XRXKebmI~+0]Y9saR");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(104, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(822, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.computeContextDependent();
      coreFunction1.functionSum((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction((-316), expressionArray0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-4167), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      coreFunction0.functionID((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      int int0 = 2013265920;
      CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      coreFunction0.functionFloor((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("31", "%gV9z8X[.N,");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      Short short0 = new Short((short)18);
      Constant constant0 = new Constant(short0);
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction((-2147483647), expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, variableReference0);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, variableReference0);
      expressionArray0[4] = (Expression) coreOperationNotEqual0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[0], coreFunction0);
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("%gV9z8X[.N,");
      Step step0 = new Step(831, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1408, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[6] = (Expression) expressionPath0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction1 = new CoreFunction(831, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStringLength((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(626, expressionArray0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[4];
      QName qName0 = new QName("-4", "d)5&7V'n7q");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "-20");
      Step step0 = new Step(2613, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(626);
      Step step1 = new Step(76, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(8, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(59, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, locationPath0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("41");
      expressionArray0[0] = (Expression) constant0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[1] = (Expression) constant1;
      QName qName0 = new QName("string", "M8vv");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      Step step0 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[3] = (Expression) locationPath0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant1);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[3]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[5], expressionArray0[6]);
      expressionArray0[7] = (Expression) coreOperationNotEqual0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[3], coreOperationNegate0);
      expressionArray0[8] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(ancestorContext0, variableReference0);
      // Undeclared exception!
      coreFunction0.functionPosition(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(626, expressionArray0);
      coreFunction0.iteratePointers((EvalContext) null);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(14);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      coreOperationDivide0.args = expressionArray0;
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      nodeSetContext0.setPosition((-793));
      nodeSetContext0.nextNode();
      CoreFunction coreFunction0 = new CoreFunction(626, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-107);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte) (-121);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("0]4D1F?xbwo`.RLS]", "0]4D1F?xbwo`.RLS]");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionSubstring((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short)23);
      Constant constant0 = new Constant(short0);
      constant0.iterate((EvalContext) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[8];
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      expressionArray0[3] = (Expression) coreOperationGreaterThan0;
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      expressionArray0[6] = (Expression) coreOperationGreaterThan0;
      expressionArray0[7] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction((short)23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: number(org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 > org.apache.commons.jxpath.ri.compiler.Constant@0000000001, 23)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("l-m{-f1");
      Step step0 = new Step((-20), processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(locationPath0, expressionArray0, stepArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionPath0, locationPath0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationMod0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      ExpressionPath expressionPath1 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      expressionArray0[3] = (Expression) expressionPath1;
      QName qName0 = new QName("l-m{-f1");
      CoreFunction coreFunction0 = new CoreFunction((-1621), expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-20), expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(58, expressionArray0);
      // Undeclared exception!
      coreFunction2.functionContains((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      constant0.toString();
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(615, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      QName qName0 = new QName("NaN", "NaN");
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationOr0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, double0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeTypeTest0);
      coreFunction0.functionStringLength(namespaceContext0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      CoreFunction coreFunction1 = new CoreFunction(61, expressionArray0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(initialContext0, nodeTypeTest0, false);
      coreFunction1.functionLang(precedingOrFollowingContext0);
      // Undeclared exception!
      try { 
        coreFunction1.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      QName qName0 = new QName("number");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "number");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      EvalContext evalContext0 = rootContext0.getAbsoluteRootContext();
      coreFunction0.compute(evalContext0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant((String) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationSubtract0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      Constant constant1 = new Constant((String) null);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationSubtract0, expressionArray0[1]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNegate0;
      QName qName0 = new QName("substring-after", "jF=N[5");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, (Expression[]) null);
      expressionArray0[6] = (Expression) extensionFunction0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[5], constant1);
      Step[] stepArray0 = new Step[9];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("jF=N[5");
      Step step0 = new Step(4929, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) constant1;
      expressionArray1[1] = (Expression) coreOperationLessThan0;
      expressionArray1[2] = (Expression) nameAttributeTest0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      expressionArray1[4] = (Expression) extensionFunction0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      expressionArray1[6] = (Expression) extensionFunction0;
      expressionArray1[7] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[8] = (Expression) coreOperationLessThan0;
      Step step1 = new Step(40, processingInstructionTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(40, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(4929, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(4929, processingInstructionTest0, (Expression[]) null);
      stepArray0[4] = step4;
      Step step5 = new Step(40, processingInstructionTest0, expressionArray1);
      stepArray0[5] = step5;
      ProcessingInstructionTest processingInstructionTest1 = new ProcessingInstructionTest((String) null);
      Step step6 = new Step(40, processingInstructionTest1, expressionArray0);
      stepArray0[6] = step6;
      Step step7 = new Step(110, processingInstructionTest1, (Expression[]) null);
      stepArray0[7] = step7;
      Step step8 = new Step((-1731), processingInstructionTest1, expressionArray0);
      stepArray0[8] = step8;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThanOrEqual0, (Expression[]) null, stepArray0);
      expressionArray0[7] = (Expression) expressionPath0;
      Constant constant2 = new Constant((String) null);
      expressionArray0[8] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(110, expressionArray0);
      EvalContext evalContext0 = null;
      EvalContext[] evalContextArray0 = new EvalContext[9];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionSum(evalContextArray0[2]);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      Constant constant0 = new Constant(".s6P9bg2@))\"h#R=N_");
      expressionArray0[0] = (Expression) constant0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationGreaterThanOrEqual0;
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-1193));
      Step step0 = new Step(32, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(32, nodeTypeTest0, (Expression[]) null);
      stepArray0[1] = step1;
      Step step2 = new Step(3777, nodeTypeTest0, (Expression[]) null);
      stepArray0[2] = step2;
      Step step3 = new Step((-1193), nodeTypeTest0, (Expression[]) null);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(32, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      constant0.toString();
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(615, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      QName qName0 = new QName("NaN", "NaN");
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationOr0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, double0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      InitialContext initialContext0 = new InitialContext(rootContext0);
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext(initialContext0, true, (NodeTest) null);
      RootContext rootContext1 = ancestorContext0.getRootContext();
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext1, (NodeTest) null);
      CoreFunction coreFunction1 = new CoreFunction(40, expressionArray0);
      coreFunction1.functionStringLength(rootContext1);
      rootContext0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionLang(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      constant0.toString();
      Constant constant1 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(615, expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      Locale locale0 = jXPathContextReferenceImpl0.getLocale();
      QName qName0 = new QName("NaN", "NaN");
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreOperationOr0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, double0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      coreFunction0.functionNamespaceURI(rootContext0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(40);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, nodeTypeTest0);
      coreFunction0.functionStringLength(namespaceContext0);
      InitialContext initialContext0 = (InitialContext)rootContext0.getAbsoluteRootContext();
      coreFunction0.functionLang(initialContext0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Constant constant0 = new Constant((Number) null);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(constant0, coreOperationNegate0);
      QName qName0 = new QName("?<WH96-V8`G|");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, variableReference0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, constant0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationDivide0, coreOperationLessThan0);
      Step[] stepArray0 = new Step[4];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "?<WH96-V8`G|");
      Step step0 = new Step(626, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationNegate0;
      expressionArray1[1] = (Expression) constant0;
      expressionArray1[2] = (Expression) coreOperationNegate0;
      expressionArray1[3] = (Expression) coreOperationLessThan0;
      expressionArray1[4] = (Expression) coreOperationDivide0;
      Step step2 = new Step((-3302), nodeNameTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(1159, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      ExpressionPath expressionPath1 = new ExpressionPath(expressionArray1[3], expressionArray1, stepArray0);
      expressionArray0[1] = (Expression) expressionPath1;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationLessThan0, coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(1159, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray1[2]);
      // Undeclared exception!
      coreFunction0.functionNot(predicateContext0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 5;
      EvalContext evalContext0 = null;
      QName qName0 = new QName(", atomic", ", atomic");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      ChildContext childContext0 = new ChildContext(precedingOrFollowingContext0, nodeNameTest0, true, true);
      childContext0.getCurrentNodePointer();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) childContext0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "[ProcessingInstruction: ");
      AncestorContext ancestorContext0 = new AncestorContext(precedingOrFollowingContext0, true, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, ancestorContext0, (Pointer) null);
      String string0 = "{object of type ";
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      Constant constant0 = new Constant(Integer.MIN_VALUE);
      expressionArray0[1] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, expressionArray0[2]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(extensionFunction0, constant0);
      expressionArray0[4] = (Expression) nameAttributeTest1;
      CoreFunction coreFunction0 = new CoreFunction((-410), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionStartsWith(ancestorContext0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("M");
      CoreFunction coreFunction1 = new CoreFunction((-190787776), (Expression[]) null);
      NullPointer nullPointer0 = (NullPointer)NodePointer.newNodePointer(qName0, (Object) null, (Locale) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nullPointer0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext(rootContext0, nodeNameTest0, false, false);
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(childContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(unionContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      QName qName0 = new QName("xmlns:", "xmlns:");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      String string0 = null;
      // Undeclared exception!
      coreFunction0.compute((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      constant0.toString();
      Constant constant1 = new Constant("NaN");
      Constant constant2 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(615, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      Locale locale0 = jXPathContext0.getLocale();
      QName qName0 = new QName("NaN", "");
      Locale.getISOLanguages();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreOperationOr0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, double0, nodePointer0);
      CoreFunction coreFunction1 = new CoreFunction((-175), expressionArray0);
      coreFunction0.toString();
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      SelfContext selfContext0 = new SelfContext(evalContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionID(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by ID - no IdentityManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-2697), expressionArray0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = mock(JXPathContextReferenceImpl.class, new ViolatedAssumptionAnswer());
      doReturn((NamespaceResolver) null).when(jXPathContextReferenceImpl0).getNamespaceResolver();
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("<=", "q<");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      rootContext0.getJXPathContext();
      // Undeclared exception!
      try { 
        coreFunction0.functionString(rootContext0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '<=:q<'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("M");
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, variablePointer0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) rootContext0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("M");
      ChildContext childContext0 = new ChildContext(evalContextArray0[0], processingInstructionTest0, true, true);
      InitialContext initialContext0 = (InitialContext)rootContext0.getConstantContext(childContext0);
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) rootContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(rootContext0, evalContextArray0);
      DescendantContext descendantContext0 = new DescendantContext(unionContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(descendantContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      ChildContext childContext0 = new ChildContext(unionContext0, nodeTypeTest0, true, true);
      QName qName0 = new QName("");
      Locale locale0 = Locale.ITALIAN;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, childContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Constant constant0 = new Constant("ceiling");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply((Expression) null, coreOperationGreaterThan0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationMultiply0, (Expression) null);
      expressionArray0[3] = (Expression) coreOperationGreaterThan1;
      QName qName0 = new QName("bS+}u/*{[");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(3175, expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, (Expression) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("bS+}u/*{[");
      AttributeContext attributeContext0 = new AttributeContext(predicateContext0, processingInstructionTest0);
      DescendantContext descendantContext0 = new DescendantContext(attributeContext0, true, processingInstructionTest0);
      AncestorContext ancestorContext0 = new AncestorContext(descendantContext0, true, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(ancestorContext0, processingInstructionTest0, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionNull(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationUnion0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationUnion0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      Float float0 = new Float((float) 1961);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      Constant constant1 = new Constant("id");
      expressionArray0[2] = (Expression) constant1;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], coreOperationMod0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[3], expressionArray0[1]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      Step[] stepArray0 = new Step[3];
      QName qName0 = new QName("-180");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(1961, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(26, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[1], expressionArray0, stepArray0);
      expressionArray0[5] = (Expression) expressionPath0;
      CoreOperationMod coreOperationMod1 = new CoreOperationMod(expressionArray0[2], expressionPath0);
      expressionArray0[6] = (Expression) coreOperationMod1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(1961, expressionArray0);
      // Undeclared exception!
      coreFunction0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long(14);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThan0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      Object object0 = coreFunction0.computeValue((EvalContext) null);
      assertNotNull(object0);
      assertEquals("", object0);
      assertEquals(14, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1389), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      Integer integer0 = new Integer((-1389));
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName((String) null, "mt[");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointerFactory0.createNodePointer((NodePointer) variablePointer0, qName0, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction0.functionStartsWith(evalContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey(evalContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Short short0 = new Short((short)6);
      Constant constant0 = new Constant(short0);
      constant0.iterate((EvalContext) null);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      
      coreFunction0.getArg1();
      Object object0 = coreFunction0.functionNormalizeSpace((EvalContext) null);
      assertEquals("false", object0);
      
      String string0 = coreFunction0.getFunctionName();
      assertEquals("format-number", string0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("M");
      Locale locale0 = Locale.JAPANESE;
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, beanPointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("M");
      SelfContext selfContext0 = new SelfContext(predicateContext0, processingInstructionTest0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext(selfContext0, basicNodeSet0);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast(predicateContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      boolean boolean0 = true;
      Step[] stepArray0 = new Step[7];
      QName qName0 = new QName("\"h");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"h");
      Step step1 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(32767, processingInstructionTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(402, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(4543, nodeNameTest0, expressionArray0);
      stepArray0[6] = step6;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      Expression[] expressionArray1 = new Expression[5];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray1[0] = (Expression) coreOperationUnion0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      expressionArray1[1] = (Expression) coreOperationMod0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray1[0], coreOperationMod0);
      expressionArray1[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationUnion0, expressionArray1[0]);
      expressionArray1[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAnd0, expressionArray1[2]);
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(" ?y-rz_H2_");
      Step step0 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThanOrEqual0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionPath0, expressionArray1[2]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, coreOperationGreaterThanOrEqual0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(coreOperationEqual0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationSubtract1;
      Expression expression0 = coreFunction0.getArg3();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction((-3201), expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      // Undeclared exception!
      coreFunction1.functionLast((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(402, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      ancestorContext0.getCurrentNodePointer();
      basicNodeSet0.add((Pointer) null);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(nodeSetContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction402()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      QName qName0 = new QName("round");
      Locale locale0 = Locale.JAPANESE;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, false);
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, precedingOrFollowingContext0, locale0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, namespaceContext0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      rootContext0.getVariableContext(qName0);
      Expression[] expressionArray0 = new Expression[2];
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(Integer.MIN_VALUE, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(571, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      CoreFunction coreFunction1 = new CoreFunction(571, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Double double0 = Expression.ONE;
      Constant constant0 = new Constant(double0);
      expressionArray0[0] = (Expression) constant0;
      Step[] stepArray0 = new Step[1];
      String string0 = "V'm7?XJ~'AMpEIKf";
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("V'm7?XJ~'AMpEIKf");
      Step step0 = new Step(3490, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[0]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, coreOperationOr0);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(3490, expressionArray0);
      JXPathContext.newContext((Object) expressionArray0[4]);
      // Undeclared exception!
      coreFunction0.functionBoolean((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(11, expressionArray0);
      boolean boolean0 = coreFunction1.isContextDependent();
      assertFalse(boolean0);
      assertEquals(11, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(29, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(29, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      int int0 = 2013265920;
      CoreFunction coreFunction0 = new CoreFunction(2013265920, expressionArray0);
      boolean boolean0 = true;
      // Undeclared exception!
      coreFunction0.functionLocalName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(nameAttributeTest0, expressionArray0[0]);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThan0, nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[3] = (Expression) locationPath0;
      coreOperationSubtract0.args = expressionArray0;
      Byte byte0 = new Byte((byte)20);
      Constant constant0 = new Constant(byte0);
      expressionArray0[4] = (Expression) constant0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[4], expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      QName qName0 = new QName("namespace-uri", (String) null);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionConcat(attributeContext0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      coreFunction0.functionRound((EvalContext) null);
      coreOperationGreaterThan0.computeValue((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(3535, expressionArray0);
      coreFunction1.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      basicNodeSet0.getValues();
      coreFunction0.functionLast(nodeSetContext0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction586()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Expression[] expressionArray1 = new Expression[8];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationUnion0, coreOperationUnion0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationNotEqual0, coreOperationUnion0);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      QName qName0 = new QName("p;xi~pfKeChD", "p;xi~pfKeChD");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[1] = (Expression) extensionFunction0;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray1[2] = (Expression) extensionFunction1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationUnion0);
      expressionArray1[3] = (Expression) nameAttributeTest0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNotEqual0, extensionFunction1);
      expressionArray1[4] = (Expression) coreOperationMultiply0;
      NameAttributeTest nameAttributeTest1 = new NameAttributeTest(expressionArray1[3], (Expression) null);
      expressionArray1[5] = (Expression) nameAttributeTest1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray1[2], nameAttributeTest1);
      expressionArray1[6] = (Expression) coreOperationEqual0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray1[7] = (Expression) coreOperationMultiply1;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-1389), expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreFunction0, coreFunction0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThan0, coreFunction0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationLessThan0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(nameAttributeTest0, coreFunction0);
      expressionArray0[1] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction((-1389), expressionArray0);
      Integer integer0 = new Integer((-1389));
      VariablePointerFactory variablePointerFactory0 = new VariablePointerFactory();
      QName qName0 = new QName((String) null, "mt[");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      variablePointerFactory0.createNodePointer((NodePointer) variablePointer0, qName0, (Object) coreFunction0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      // Undeclared exception!
      try { 
        coreFunction1.functionStartsWith(evalContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant("-2");
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.computeContextDependent();
      coreFunction0.functionContains((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2()((org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), '-2')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.isContextDependent();
      assertTrue(boolean0);
      assertEquals(7, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(7, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(6, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      coreOperationGreaterThan0.computeValue((EvalContext) null);
      Double double0 = Expression.ONE;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang(nodeSetContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NodeSetContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.getFunctionName();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) "local-name");
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, (Pointer) null);
      QName qName0 = new QName("N]He45Pes%Z!j$?cA");
      VariablePointer variablePointer0 = new VariablePointer(qName0);
      NodePointer nodePointer0 = variablePointer0.getImmediateValuePointer();
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(rootContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: N]He45Pes%Z!j$?cA
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("](]9:", "](]9:");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      assertEquals(0, coreFunction0.getArgumentCount());
      
      Object object0 = coreFunction0.computeValue(evalContext0);
      assertEquals("](]9:", object0);
      assertNotNull(object0);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      coreOperationGreaterThan0.computeValue((EvalContext) null);
      coreFunction0.functionCeiling((EvalContext) null);
      coreFunction0.functionNot((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(3535, expressionArray0);
      coreFunction1.functionBoolean((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid argument type for 'sum': java.lang.Double
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction0);
      QName qName0 = new QName("](]9:", "](]9:");
      Locale locale0 = Locale.JAPANESE;
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, coreFunction0, locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      coreFunction0.functionNamespaceURI(evalContext0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      Integer integer0 = new Integer(11);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl((JXPathContext) null, integer0, (Pointer) null);
      PredicateContext predicateContext0 = new PredicateContext(rootContext0, coreFunction0);
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl1.createPathAndSetValue("-2-2", (Expression) coreFunction0, (Object) predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JXPath can only create a path if it uses exclusively the child:: and attribute:: axes and has no context-dependent predicates
         //
         verifyException("org.apache.commons.jxpath.ri.JXPathContextReferenceImpl", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(28, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(1.0, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(false, object1);
      
      coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(3535, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2052), expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreFunction coreFunction1 = new CoreFunction((-2052), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionStringLength((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object1);
      
      coreFunction0.functionLocalName((EvalContext) null);
      assertEquals(3535, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      Step[] stepArray0 = new Step[3];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      Step step0 = new Step(41, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(289, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step((-1316), nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(41, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[2] = expression0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreFunction0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, coreOperationGreaterThan0);
      Expression expression1 = coreFunction0.getArg2();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, expression1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      Constant constant0 = new Constant((Number) null);
      constant0.toString();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-972), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionCeiling((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      coreFunction0.computeContextDependent();
      boolean boolean0 = coreFunction0.isContextDependent();
      assertEquals(8, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w6ma`'aVkh");
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(3535, expressionArray0);
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction0.functionNot((EvalContext) null);
      assertEquals(true, object1);
      
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(3535, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(22, (Expression[]) null);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      coreFunction0.functionNull((EvalContext) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreOperationAnd0;
      expressionArray1[1] = (Expression) coreOperationAnd0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationAnd0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationAnd0;
      expressionArray1[6] = (Expression) coreOperationAnd0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray1);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
      assertEquals(5, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("name", "name");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      coreFunction0.getArg3();
      expressionArray0[1] = null;
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction1;
      Constant constant0 = new Constant("name");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction((-2), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      EvalContext evalContext0 = null;
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationEqual0);
      constant0.toString();
      constant0.toString();
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      coreFunction0.functionStartsWith((EvalContext) null);
      coreFunction0.functionSubstringBefore((EvalContext) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after(-2, -2)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      Object object0 = coreFunction0.functionSubstring((EvalContext) null);
      assertEquals((-2), coreFunction0.getFunctionCode());
      assertEquals("0", object0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Integer integer0 = new Integer(16);
      Expression[] expressionArray0 = new Expression[3];
      QName qName0 = new QName("-390");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[2] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction0 = new CoreFunction(2411, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer(30);
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd((Expression[]) null);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationAnd0, coreOperationAnd0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(nameAttributeTest0, coreOperationAnd0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction(27, (Expression[]) null);
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
      assertEquals(27, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan((Expression) null, (Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, coreOperationGreaterThan0);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationLessThanOrEqual0, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction((-4010), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Expression[] expressionArray0 = null;
      EvalContext evalContext0 = null;
      int int0 = (-3186);
      CoreFunction coreFunction0 = new CoreFunction(12, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-before()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvalContext evalContext0 = null;
      EvalContext evalContext1 = null;
      Expression[] expressionArray0 = new Expression[6];
      VariableReference variableReference0 = new VariableReference((QName) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(variableReference0, variableReference0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationLessThanOrEqual0, variableReference0);
      Step[] stepArray0 = new Step[3];
      Step step0 = new Step(24, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(23, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(27, (NodeTest) null, expressionArray0);
      stepArray0[2] = step2;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreFunction coreFunction0 = new CoreFunction(27, expressionArray0);
      coreFunction0.getArg3();
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual((Expression) null, coreOperationLessThanOrEqual0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual((Expression) null, expressionArray0[0]);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationEqual0, coreOperationEqual1);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant0 = new Constant("The comment \"");
      expressionArray0[3] = (Expression) constant0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationEqual1, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      coreOperationUnion0.args = expressionArray0;
      expressionArray0[5] = (Expression) coreOperationUnion0;
      CoreFunction coreFunction1 = new CoreFunction(24, expressionArray0);
      // Undeclared exception!
      coreFunction0.computeValue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("0", object0);
      
      Object object1 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals((-2), coreFunction0.getFunctionCode());
      assertEquals(true, object1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("Incorrect number of arguments: ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[0], coreOperationOr0);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(extensionFunction0, coreOperationOr0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      expressionArray0[5] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(4690, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Integer integer0 = new Integer(30);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "v{OS(");
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.isContextDependent();
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(parentContext0, coreFunction0);
      NamespaceContext namespaceContext0 = new NamespaceContext(predicateContext0, (NodeTest) null);
      namespaceContext0.getCurrentNodePointer();
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(rootContext0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.RootContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer((-707));
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("ttw.{Z24+YQ}`|E+rU", (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMod0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(extensionFunction0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], expressionArray0[0]);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[1], coreOperationLessThan0);
      expressionArray0[3] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationSubtract0, coreOperationSubtract0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[1]);
      extensionFunction0.isContextDependent();
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction((-707), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(20, expressionArray0);
      coreFunction0.isContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      QName qName0 = new QName("0", "R=S\"'!qiN.M%!x&,u");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[1] = (Expression) extensionFunction0;
      Step[] stepArray0 = new Step[5];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "0");
      Step step0 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(268435456, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(30, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Expression[] expressionArray1 = new Expression[4];
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      Step step4 = new Step(268435456, nodeNameTest0, expressionArray1);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[2] = (Expression) locationPath0;
      Constant constant0 = new Constant("0");
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[1], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionName((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("-390", "/processing-instruction('");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(variableReference0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationMod0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationMod0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], coreOperationMod0);
      expressionArray0[2] = (Expression) coreOperationSubtract0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      Step[] stepArray0 = new Step[6];
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step((-2038), nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(81, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(81, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(81, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(105, nodeNameTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationSubtract0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[2], coreOperationMultiply0);
      expressionArray0[5] = (Expression) coreOperationSubtract1;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[3], coreOperationMod0);
      expressionArray0[6] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionKey(selfContext0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Integer integer0 = new Integer(16);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(29, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction((-1), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7");
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("VxL^ hb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(198, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[1], expressionArray0[1]);
      expressionArray0[3] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction((-1369), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-4287), expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertTrue(boolean0);
      
      coreFunction0.toString();
      Object object0 = coreFunction0.functionCeiling((EvalContext) null);
      assertEquals(0.0, object0);
      
      Object object1 = coreFunction0.functionCount((EvalContext) null);
      assertEquals((-4287), coreFunction0.getFunctionCode());
      assertEquals(1.0, object1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      Step[] stepArray0 = new Step[1];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(11);
      Step step0 = new Step(62, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(locationPath0, locationPath0);
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationLessThanOrEqual0, constant0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationDivide0, constant0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNotEqual0;
      Constant constant1 = new Constant(double0);
      expressionArray0[3] = (Expression) constant1;
      Constant constant2 = new Constant("tlu->l@j&/ffqp");
      expressionArray0[4] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[5] = expression0;
      CoreFunction coreFunction1 = new CoreFunction(14, expressionArray0);
      Integer integer0 = new Integer((-2147483647));
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring((org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) div org.apache.commons.jxpath.ri.compiler.Constant@0000000005, org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006 * org.apache.commons.jxpath.ri.compiler.Constant@0000000005, org.apache.commons.jxpath.ri.compiler.Constant@0000000005 != org.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000006, NaN, 'tlu->l@j&/ffqp', (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) div org.apache.commons.jxpath.ri.compiler.Constant@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Constant constant0 = new Constant("starts-with");
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(constant0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(constant0, expressionPath0);
      expressionArray0[1] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(50, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.ExpressionPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2()((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("0-2", object0);
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object1);
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object2);
      
      coreFunction0.functionSubstringBefore((EvalContext) null);
      assertEquals((-2), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.axes.PredicateContext");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAnd0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationAnd coreOperationAnd1 = new CoreOperationAnd(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationAnd1;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationNegate0);
      expressionArray0[4] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(23, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(26, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: ceiling()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(3, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2()((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), -2)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(18, expressionArray0);
      coreFunction0.computeContextDependent();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer(3);
      Integer integer1 = new Integer((-521));
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationUnion0, coreOperationUnion0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction0 = new CoreFunction(111, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      Integer integer0 = new Integer((-2616));
      EvalContext evalContext0 = null;
      int int0 = 40;
      Expression[] expressionArray1 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction(89, expressionArray1);
      coreFunction0.getArg3();
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, coreFunction0);
      expressionArray1[0] = (Expression) coreOperationGreaterThanOrEqual0;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, (Expression) null);
      expressionArray1[1] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray1[0], expressionArray1[1]);
      expressionArray1[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray1[3] = (Expression) coreOperationUnion0;
      CoreOperationUnion coreOperationUnion1 = new CoreOperationUnion(expressionArray1);
      expressionArray1[4] = (Expression) coreOperationUnion1;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(4, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(8, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(constant0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant((Number) null);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction(8, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-2");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      coreFunction0.functionConcat((EvalContext) null);
      coreFunction0.functionSubstringAfter((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string((org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000003) div (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000002), 'null')
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      Integer integer0 = new Integer(2876);
      CoreFunction coreFunction1 = new CoreFunction(1333, expressionArray0);
      coreFunction1.computeValue((EvalContext) null);
      Integer integer1 = new Integer(914);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      namespaceContext0.getCurrentNodePointer();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl((JXPathContext) null, integer1, (Pointer) null);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      coreFunction1.functionLocalName(evalContext0);
      assertEquals(1333, coreFunction1.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Integer integer0 = new Integer(1);
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(28);
      Step step0 = new Step(0, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(116, nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(locationPath0, locationPath0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("s&7xo\"@B");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationSubtract coreOperationSubtract1 = new CoreOperationSubtract(expressionArray0[0], expressionPath0);
      expressionArray0[2] = (Expression) coreOperationSubtract1;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[3] = (Expression) variableReference0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionPath0, extensionFunction0);
      expressionArray0[4] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreFunction coreFunction0 = new CoreFunction(116, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction((-3072), expressionArray0);
      // Undeclared exception!
      coreFunction1.functionTrue((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      Integer integer0 = new Integer(21);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      String string0 = coreFunction0.toString();
      assertEquals("substring-before()", string0);
      
      boolean boolean0 = coreFunction0.isContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      BasicNodeSet basicNodeSet0 = new BasicNodeSet();
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, basicNodeSet0);
      coreFunction0.functionLast(nodeSetContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(nodeSetContext0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("[");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(extensionFunction0, extensionFunction0);
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(16384, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(36, (NodeTest) null, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationLessThan0, expressionArray0, stepArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionPath0, coreOperationLessThan0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      Integer integer0 = new Integer(16);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-649), (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(23, (Expression[]) null);
      coreFunction1.computeContextDependent();
      coreFunction1.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(18, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(11, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(3205, expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMultiply0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate0, coreOperationMultiply0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMod0, coreOperationMod0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationMod0);
      expressionArray0[1] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction1 = new CoreFunction(1610612736, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreOperationMod", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      Integer integer0 = new Integer(15);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      assertEquals(2, coreFunction0.getArgumentCount());
      
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      Object object0 = coreFunction0.functionConcat((EvalContext) null);
      assertEquals("0-2", object0);
      
      Object object1 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals("", object1);
      assertEquals((-2), coreFunction0.getFunctionCode());
      
      Object object2 = coreFunction0.functionStartsWith((EvalContext) null);
      assertEquals(false, object2);
      assertEquals((-2), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[12];
      EvalContext evalContext0 = null;
      int int0 = 4;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      String string0 = ")";
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      int int0 = 3;
      Integer integer0 = new Integer(107);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      String string0 = coreFunction0.getFunctionName();
      assertEquals("starts-with", string0);
      
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(14, (Expression[]) null);
      coreFunction2.computeContextDependent();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, constant0);
      Expression[] expressionArray0 = new Expression[1];
      expressionArray0[0] = (Expression) constant0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationGreaterThan0, coreOperationOr0);
      constant0.toString();
      Constant constant1 = new Constant(double0);
      Constant constant2 = new Constant(double0);
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      coreFunction0.iterate((EvalContext) null);
      coreFunction0.toString();
      coreFunction0.functionCeiling((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction586()(NaN)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[8];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number(null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Xo(1,s8!_");
      CoreFunction coreFunction0 = new CoreFunction(207, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(23, (Expression[]) null);
      QName qName0 = new QName("G8%F", "oXr(%O0p|rk[<& j1-,");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "last");
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeNameTest0, true);
      coreFunction0.computeValue(precedingOrFollowingContext0);
      CoreFunction coreFunction1 = new CoreFunction((-1205), (Expression[]) null);
      coreFunction0.functionString(precedingOrFollowingContext0);
      CoreFunction coreFunction2 = new CoreFunction(1, (Expression[]) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      QName qName0 = new QName("VxL^ hb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-3794), expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreFunction0, coreFunction0);
      expressionArray0[0] = (Expression) coreOperationGreaterThan0;
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], extensionFunction0);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      Step step0 = new Step((-3794), nodeNameTest0, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(extensionFunction0, expressionArray1, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      ExtensionFunction extensionFunction1 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationEqual0, extensionFunction1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray1[1], coreOperationLessThanOrEqual0);
      CoreFunction coreFunction1 = new CoreFunction(2451, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNumber((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction2451()(org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003 > org.apache.commons.jxpath.ri.compiler.CoreFunction@0000000003, (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000004) * org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000005)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(77, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(2, (Expression[]) null);
      coreFunction2.computeContextDependent();
      coreFunction0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreFunction1);
      VariablePointer variablePointer0 = new VariablePointer((QName) null);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, variablePointer0, variablePointer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Undefined variable: null
         //
         verifyException("org.apache.commons.jxpath.ri.model.VariablePointer", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7");
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("VxL^ hb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(198, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-1369), expressionArray0);
      // Undeclared exception!
      coreFunction0.functionRound((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      coreFunction0.computeContextDependent();
      Constant constant0 = new Constant("'");
      CoreFunction coreFunction1 = new CoreFunction(11, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: contains()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion((Expression[]) null);
      expressionArray0[3] = (Expression) coreOperationUnion0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, expressionArray0[3]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationSubtract0, coreOperationNotEqual0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreOperationNotEqual coreOperationNotEqual1 = new CoreOperationNotEqual(expressionArray0[2], coreOperationUnion0);
      expressionArray0[5] = (Expression) coreOperationNotEqual1;
      Byte byte0 = new Byte((byte)3);
      Constant constant0 = new Constant(byte0);
      expressionArray0[6] = (Expression) constant0;
      QName qName0 = new QName("substring");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[7] = (Expression) variableReference0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[8] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(24, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-935), (Expression[]) null);
      coreFunction0.getFunctionName();
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      coreFunction1.functionFalse((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-935), expressionArray1);
      coreFunction2.functionCount((EvalContext) null);
      coreFunction2.functionBoolean((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction((-935), (Expression[]) null);
      CoreFunction coreFunction4 = new CoreFunction((-935), expressionArray0);
      coreFunction4.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.functionCount((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 18;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(18, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getArgumentCount();
      Step[] stepArray0 = new Step[7];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("6");
      Step step0 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      Step step2 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[3] = step3;
      Step step4 = new Step(0, processingInstructionTest0, expressionArray1);
      stepArray0[4] = step4;
      Step step5 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[5] = step5;
      Step step6 = new Step(0, processingInstructionTest0, expressionArray0);
      stepArray0[6] = step6;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      expressionPath0.evalSteps(unionContext0);
      AttributeContext attributeContext0 = new AttributeContext((EvalContext) null, processingInstructionTest0);
      coreFunction0.functionTrue(attributeContext0);
      assertEquals(0, coreFunction0.getFunctionCode());
      
      coreFunction0.getArgumentCount();
      Object object0 = coreFunction0.functionLast(attributeContext0);
      assertEquals(1, attributeContext0.getPosition());
      assertEquals(0.0, object0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreFunction0, coreFunction0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      CoreFunction coreFunction1 = new CoreFunction(5, (Expression[]) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      coreFunction1.functionNumber(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(10, (Expression[]) null);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction2 = new CoreFunction(16, (Expression[]) null);
      QName qName0 = new QName("starts-with", "");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "B73i\">vYC'v&6[");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, false);
      AttributeContext attributeContext0 = new AttributeContext(childContext0, nodeNameTest0);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(attributeContext0, nodeNameTest0, true);
      // Undeclared exception!
      try { 
        coreFunction2.compute(precedingOrFollowingContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.iterate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction(621, expressionArray1);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray1);
      QName qName0 = new QName("@-1ZN]dJXNCr;", "@-1ZN]dJXNCr;");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[12];
      EvalContext evalContext0 = null;
      int int0 = 4;
      CoreFunction coreFunction0 = new CoreFunction(4, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: id(null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[12];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray1);
      coreFunction1.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(25, coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Expression[] expressionArray0 = new Expression[3];
      Step[] stepArray0 = new Step[5];
      QName qName0 = new QName("");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "ancestor::");
      Step step0 = new Step(1264, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(1264, nodeNameTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(1264, nodeNameTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(1264, nodeNameTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1264, nodeNameTest0, expressionArray0);
      stepArray0[4] = step4;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(locationPath0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      QName qName1 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName1);
      expressionArray0[2] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(2288, expressionArray0);
      EvalContext[] evalContextArray0 = new EvalContext[8];
      evalContextArray0[0] = null;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      evalContextArray0[3] = null;
      evalContextArray0[4] = null;
      evalContextArray0[5] = null;
      evalContextArray0[6] = null;
      evalContextArray0[7] = null;
      UnionContext unionContext0 = new UnionContext((EvalContext) null, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(unionContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[6];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[6];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(3007);
      Step step0 = new Step(30, nodeTypeTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step((-1911), nodeTypeTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(9, nodeTypeTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step((-1911), nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      Step step4 = new Step(1752, nodeTypeTest0, expressionArray0);
      stepArray0[4] = step4;
      Step step5 = new Step(3123, nodeTypeTest0, expressionArray0);
      stepArray0[5] = step5;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationAnd0, expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[1], expressionPath0);
      expressionArray0[3] = (Expression) coreOperationSubtract0;
      CoreFunction coreFunction0 = new CoreFunction(4644, expressionArray0);
      Expression expression0 = coreFunction0.getArg2();
      expressionArray0[4] = expression0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationGreaterThan0, expressionArray0[0]);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      // Undeclared exception!
      coreFunction1.functionString((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[8];
      QName qName0 = new QName("uL*69FViR !pZ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      Expression[] expressionArray1 = new Expression[0];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationNotEqual0, extensionFunction0);
      expressionArray0[2] = (Expression) coreOperationGreaterThan0;
      Byte byte0 = new Byte((byte) (-1));
      Constant constant0 = new Constant(byte0);
      expressionArray0[3] = (Expression) constant0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[2], expressionArray0[4]);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], expressionArray0[0]);
      expressionArray0[6] = (Expression) coreOperationDivide0;
      Step[] stepArray0 = new Step[1];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("uL*69FViR !pZ");
      Step step0 = new Step(893, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      LocationPath locationPath0 = new LocationPath(true, stepArray0);
      expressionArray0[7] = (Expression) locationPath0;
      CoreFunction coreFunction0 = new CoreFunction(500, expressionArray0);
      Step[] stepArray1 = new Step[9];
      stepArray1[0] = step0;
      stepArray1[1] = step0;
      stepArray1[2] = step0;
      stepArray1[3] = step0;
      stepArray1[4] = step0;
      stepArray1[5] = step0;
      stepArray1[6] = step0;
      stepArray1[7] = step0;
      stepArray1[8] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan1, expressionArray0, stepArray1);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, processingInstructionTest0, true, true);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext(childContext0, processingInstructionTest0, true);
      EvalContext evalContext0 = expressionPath0.evalSteps(precedingOrFollowingContext0);
      // Undeclared exception!
      coreFunction0.functionNamespaceURI(evalContext0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(5, (Expression[]) null);
      coreFunction0.computeContextDependent();
      coreFunction0.toString();
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      EvalContext evalContext0 = null;
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, (NodeTest) null);
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, coreOperationAdd0);
      expressionArray0[0] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-553), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTrue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-553()(org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002 >= org.apache.commons.jxpath.ri.compiler.CoreOperationAdd@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("~ =v\"CrZ");
      ChildContext childContext0 = new ChildContext((EvalContext) null, processingInstructionTest0, false, false);
      processingInstructionTest0.toString();
      CoreFunction coreFunction1 = new CoreFunction(27, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: round()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      CoreFunction coreFunction1 = new CoreFunction(17, (Expression[]) null);
      coreFunction1.computeContextDependent();
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest((String) null);
      // Undeclared exception!
      try { 
        coreFunction1.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: translate()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      int int0 = new Integer(15);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: string-length(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 9;
      int int1 = 9;
      int int2 = 15;
      Expression[] expressionArray0 = new Expression[3];
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAdd0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationAdd0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationAdd0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationGreaterThan1;
      CoreFunction coreFunction0 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 9;
      EvalContext evalContext0 = null;
      Expression expression0 = null;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("VxL^ hb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(198, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionPath0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(198, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionSubstringAfter(selfContext0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-931), (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      coreFunction1.functionFalse((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction((-931), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      coreFunction0.computeContextDependent();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(">j- ;)y/0j?%ZmlVkn0");
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) null);
      BasicVariables basicVariables0 = new BasicVariables();
      QName qName0 = new QName("format-number");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: 'format-number'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction((-2), expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(20, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: true(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 13;
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[3];
      QName qName0 = new QName("c$>v@8]I~cbMB+`2h;");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(extensionFunction0, coreOperationUnion0);
      expressionArray1[0] = (Expression) coreOperationNotEqual0;
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray1);
      expressionArray1[2] = (Expression) coreOperationAdd0;
      CoreFunction coreFunction0 = new CoreFunction(3061, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "P7");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      Step[] stepArray0 = new Step[1];
      QName qName0 = new QName("VxL^ hb");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      Step step0 = new Step(198, nodeNameTest0, expressionArray0);
      stepArray0[0] = step0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray0, stepArray0);
      expressionArray0[1] = (Expression) expressionPath0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, coreOperationAnd0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], expressionArray0[2]);
      expressionArray0[3] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, expressionPath0);
      expressionArray0[4] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(198, expressionArray0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      coreFunction0.functionNumber(selfContext0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.getFunctionName();
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, coreFunction0);
      Constant constant0 = new Constant("not");
      constant0.toString();
      Double double0 = new Double(2225.92583400658);
      Constant constant1 = new Constant(double0);
      Constant constant2 = new Constant(double0);
      CoreFunction coreFunction1 = new CoreFunction(3096, (Expression[]) null);
      QName qName0 = new QName("");
      Locale.getISOLanguages();
      CoreFunction coreFunction2 = new CoreFunction(3096, (Expression[]) null);
      CoreFunction coreFunction3 = new CoreFunction(30, (Expression[]) null);
      coreFunction3.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "number");
      coreFunction0.computeContextDependent();
      // Undeclared exception!
      try { 
        coreFunction1.getArg2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      CoreFunction coreFunction0 = new CoreFunction((-935), (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      coreFunction1.functionFalse((EvalContext) null);
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) coreFunction0;
      CoreFunction coreFunction2 = new CoreFunction((-935), expressionArray1);
      coreFunction2.functionBoolean((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(40, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 28;
      CoreFunction coreFunction0 = new CoreFunction(28, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(61, (Expression[]) null);
      coreFunction2.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(16000, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.compute((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLocalName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("7Nh$pxw|]?8_8-|");
      ChildContext childContext0 = new ChildContext(namespaceContext0, processingInstructionTest0, false, false);
      coreFunction0.functionString(childContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(childContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      QName qName0 = new QName("K^B5Nfg", "org.apache.commons.jxpath.ri.compiler.CoreOperation");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      namespaceContext0.getContextNodePointer();
      int int0 = 4562;
      Expression[] expressionArray1 = new Expression[8];
      Constant constant0 = new Constant("K^B5Nfg");
      expressionArray1[0] = (Expression) constant0;
      expressionArray1[1] = (Expression) coreFunction0;
      expressionArray1[2] = (Expression) coreFunction0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray1[4], constant0);
      expressionArray1[5] = (Expression) coreOperationNotEqual0;
      expressionArray1[6] = (Expression) coreFunction0;
      // Undeclared exception!
      try { 
        coreOperationNotEqual0.iterate((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreOperationDivide0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("CuC[YtU9=3;", "CuC[YtU9=3;");
      CoreFunction coreFunction1 = new CoreFunction(16, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength(childContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(15, (Expression[]) null);
      coreFunction0.getFunctionName();
      EvalContext evalContext0 = null;
      NodeSetContext nodeSetContext0 = new NodeSetContext((EvalContext) null, (NodeSet) null);
      boolean boolean0 = true;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(15);
      // Undeclared exception!
      try { 
        nodeSetContext0.hasNext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.NodeSetContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction((-2147483647), (Expression[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("No read method", "No read method");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNumber(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.SelfContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 21;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreFunction0);
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(10, (Expression[]) null);
      coreFunction1.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction(6, (Expression[]) null);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction3.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: namespace-uri()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(19, (Expression[]) null);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(30, (Expression[]) null);
      CoreFunction coreFunction2 = new CoreFunction(61, (Expression[]) null);
      coreFunction2.getFunctionCode();
      CoreFunction coreFunction3 = new CoreFunction(16000, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: not()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationDivide0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(23, expressionArray0);
      CoreFunction coreFunction2 = new CoreFunction(0, expressionArray0);
      coreFunction2.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction3 = new CoreFunction((-64), expressionArray0);
      coreFunction2.computeValue((EvalContext) null);
      CoreFunction coreFunction4 = new CoreFunction((-64), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction4.functionBoolean((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Constant constant0 = new Constant((String) null);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, constant0);
      Expression[] expressionArray0 = new Expression[6];
      QName qName0 = new QName("Tt");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      expressionArray0[0] = (Expression) extensionFunction0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[1] = (Expression) constant0;
      expressionArray0[4] = (Expression) coreOperationMultiply0;
      expressionArray0[5] = (Expression) constant0;
      CoreFunction coreFunction0 = new CoreFunction(4494, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreFunction0, expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction((-743), expressionArray0);
      QName qName1 = new QName("Tt");
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Expression[] expressionArray1 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(3, expressionArray0);
      coreFunction0.getArg1();
      expressionArray1[4] = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(3, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: count(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "number");
      Expression[] expressionArray0 = new Expression[5];
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(2136, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(2136, (NodeTest) null, expressionArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      stepArray0[1] = step1;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      expressionArray0[0] = (Expression) locationPath0;
      Constant constant0 = new Constant("By\"");
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(locationPath0, constant0);
      expressionArray0[1] = (Expression) nameAttributeTest0;
      QName qName0 = new QName("number");
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) constant0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray1);
      expressionArray0[3] = (Expression) coreOperationAnd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray1);
      expressionArray0[4] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(2136, expressionArray0);
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      ParentContext parentContext0 = new ParentContext((EvalContext) null, (NodeTest) null);
      coreFunction0.computeValue(parentContext0);
      expressionPath0.createContextForStep(parentContext0, 2136, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      coreFunction0.computeValue(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(12, expressionArray0);
      Expression[] expressionArray1 = new Expression[7];
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreFunction0, coreFunction1);
      expressionArray1[0] = (Expression) nameAttributeTest0;
      expressionArray1[1] = null;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreOperationLessThan0;
      expressionArray1[6] = (Expression) coreFunction1;
      CoreFunction coreFunction2 = new CoreFunction(22, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction2.functionTranslate((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      CoreFunction coreFunction1 = new CoreFunction(9, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(32, (Expression[]) null);
      coreFunction2.functionNull((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(2791, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction2.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(2174, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray1 = new Expression[1];
      Constant constant2 = new Constant(long0);
      expressionArray1[0] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      jXPathContext0.getLocale();
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      coreFunction0.functionName(evalContext0);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, (NodeTest) null);
      Object object0 = coreFunction0.functionNormalizeSpace(namespaceContext0);
      assertEquals((-2), coreFunction0.getFunctionCode());
      assertEquals("-2", object0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray1 = new Expression[1];
      Constant constant2 = new Constant(long0);
      expressionArray1[0] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      Locale locale0 = jXPathContext0.getLocale();
      QName qName0 = new QName("");
      Locale.getISOLanguages();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      CoreFunction coreFunction1 = new CoreFunction(Integer.MIN_VALUE, expressionArray1);
      String string0 = coreFunction1.toString();
      assertEquals("unknownFunction-2147483648()(-2)", string0);
      
      int int0 = coreFunction0.getFunctionCode();
      assertEquals((-2), int0);
      
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      EvalContext evalContext0 = jXPathContextReferenceImpl0.getAbsoluteRootContext();
      Object object0 = coreFunction0.functionFloor(evalContext0);
      assertEquals((-2.0), object0);
      
      coreFunction0.functionNamespaceURI(evalContext0);
      assertEquals((-2), coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      namespaceContext0.reset();
      namespaceContext0.getContextNodePointer();
      coreFunction0.functionStringLength(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("Yd-#.:w%.IJEVj9!JU");
      CoreFunction coreFunction0 = new CoreFunction((-736), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      int int0 = 10;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(41);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.compute(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      EvalContext evalContext0 = null;
      int int0 = 7;
      Expression[] expressionArray1 = null;
      CoreFunction coreFunction0 = new CoreFunction(7, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: name()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.functionFalse((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, expressionArray0[0]);
      CoreFunction coreFunction0 = new CoreFunction(13, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring-after((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      String string0 = "W+UTC@9.yW=HkmT";
      QName qName0 = new QName("W+UTC@9.yW=HkmT");
      CoreOperationOr coreOperationOr0 = new CoreOperationOr((Expression[]) null);
      EvalContext evalContext0 = null;
      Expression[] expressionArray1 = new Expression[7];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionLang((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Expression[] expressionArray1 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction((-3744), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-3744()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      EvalContext evalContext0 = null;
      Expression[] expressionArray0 = new Expression[9];
      QName qName0 = new QName("");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[0] = (Expression) variableReference0;
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(expressionArray0[0], expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationSubtract0;
      Expression[] expressionArray1 = new Expression[1];
      expressionArray1[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-2003), expressionArray1);
      Expression expression0 = coreFunction0.getArg1();
      expressionArray0[2] = expression0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expression0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationMod0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      Constant constant0 = new Constant("E#y#9");
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide((Expression) null, constant0);
      expressionArray0[5] = (Expression) coreOperationDivide0;
      Expression expression1 = coreFunction0.getArg1();
      expressionArray0[6] = expression1;
      Float float0 = new Float((-94.57362F));
      Constant constant1 = new Constant(float0);
      expressionArray0[7] = (Expression) constant1;
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(expressionArray0[0], coreOperationDivide0);
      expressionArray0[8] = (Expression) nameAttributeTest0;
      CoreFunction coreFunction1 = new CoreFunction(243, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.VariableReference", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionStringLength((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction243()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      int int0 = (-2345);
      Expression[] expressionArray1 = new Expression[6];
      QName qName0 = new QName("", (String) null);
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      expressionArray1[0] = (Expression) extensionFunction0;
      expressionArray1[1] = (Expression) coreOperationGreaterThanOrEqual0;
      expressionArray1[2] = null;
      expressionArray1[3] = null;
      expressionArray1[4] = (Expression) coreOperationGreaterThanOrEqual0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      expressionArray1[5] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2345), expressionArray1);
      CoreFunction coreFunction1 = new CoreFunction((-2345), expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(1693, expressionArray0);
      coreFunction2.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationOr0, coreOperationOr0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      Expression[] expressionArray1 = new Expression[5];
      expressionArray1[0] = (Expression) coreOperationMod0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(2174, expressionArray0);
      coreFunction0.getArg1();
      expressionArray1[4] = null;
      CoreFunction coreFunction1 = new CoreFunction(3, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(2174, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(12, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(15, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("Yd-#.:w%.IJEVj9!JU");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-736), expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("=:jG4@cH@mV>>hT(.C");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-736()(null, $Yd-#.:w%.IJEVj9!JU)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Expression[] expressionArray0 = new Expression[1];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(coreOperationAnd0, coreOperationAnd0);
      expressionArray0[0] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction((-2258), expressionArray0);
      coreFunction0.getFunctionName();
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-2258));
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeTypeTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(descendantContext0, nodeTypeTest0);
      ChildContext childContext0 = new ChildContext(namespaceContext0, nodeTypeTest0, false, false);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(childContext0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      int int0 = 528;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction0 = new CoreFunction(1646, expressionArray0);
      Expression expression0 = coreFunction0.getArg3();
      coreFunction0.getArg1();
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = expression0;
      expressionArray1[1] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction1 = new CoreFunction(29, expressionArray1);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("\"$\"");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, processingInstructionTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, expression0);
      AncestorContext ancestorContext0 = new AncestorContext(predicateContext0, true, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionName(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: key(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Expression[] expressionArray0 = null;
      int int0 = 21;
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.computeValue((EvalContext) null);
      CoreFunction coreFunction3 = new CoreFunction(21, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction3.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: false()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate((Expression) null);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, (Expression) null);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate((Expression) null);
      QName qName0 = new QName("unknownFunction", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray0 = new Expression[3];
      expressionArray0[0] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(25, expressionArray0);
      coreFunction0.getArg2();
      expressionArray0[1] = null;
      expressionArray0[2] = (Expression) coreOperationNegate1;
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "");
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest1);
      SelfContext selfContext1 = new SelfContext(selfContext0, nodeNameTest1);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext1, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(selfContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionFalse((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction243()(null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      coreOperationGreaterThan0.args = expressionArray0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThan0);
      CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(243, expressionArray0);
      coreFunction0.computeValue((EvalContext) null);
      int int0 = 20;
      CoreFunction coreFunction2 = new CoreFunction(20, coreOperationGreaterThan0.args);
      // Undeclared exception!
      try { 
        coreFunction2.functionSubstring((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreOperationDivide0.computeContextDependent();
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = (JXPathContextReferenceImpl)JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl1 = new JXPathContextReferenceImpl(jXPathContextReferenceImpl0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("CuC[YtU9=3;", "CuC[YtU9=3;");
      VariableReference variableReference0 = new VariableReference(qName0);
      locationPath0.computeContextDependent();
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      coreFunction1.toString();
      coreFunction1.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      VariablePointer variablePointer0 = new VariablePointer((Variables) null, qName0);
      BeanPointer beanPointer0 = (BeanPointer)NodePointer.newChildNodePointer(variablePointer0, qName0, expressionArray0[0]);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, beanPointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      InitialContext initialContext0 = (InitialContext)rootContext1.getAbsoluteRootContext();
      EvalContext[] evalContextArray0 = new EvalContext[4];
      evalContextArray0[0] = (EvalContext) rootContext0;
      evalContextArray0[1] = (EvalContext) initialContext0;
      evalContextArray0[2] = (EvalContext) initialContext0;
      evalContextArray0[3] = (EvalContext) rootContext0;
      UnionContext unionContext0 = new UnionContext(initialContext0, evalContextArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNot(unionContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Float float0 = new Float((double) 5);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], constant0);
      constant0.toString();
      Constant constant1 = new Constant(float0);
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      Step[] stepArray0 = new Step[4];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("5");
      Step step0 = new Step(5, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      int int0 = (-225);
      Step step1 = new Step((-225), processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      Step step2 = new Step(7, processingInstructionTest0, expressionArray0);
      stepArray0[2] = step2;
      Step step3 = new Step(7, processingInstructionTest0, expressionArray0);
      stepArray0[3] = step3;
      ExpressionPath expressionPath0 = new ExpressionPath(nameAttributeTest0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName(")f-EV-2{Ok)", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Step[] stepArray0 = new Step[2];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest(")f-EV-2{Ok)");
      Step step0 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(10, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      expressionArray0[0] = (Expression) expressionPath0;
      Constant constant0 = new Constant(")f-EV-2{Ok)");
      expressionArray0[1] = (Expression) constant0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionPath0, expressionPath0);
      expressionArray0[2] = (Expression) coreOperationDivide0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], constant0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationNegate0;
      ExpressionPath expressionPath1 = new ExpressionPath(coreOperationNegate0, expressionArray0, stepArray0);
      expressionArray0[4] = (Expression) expressionPath1;
      ExpressionPath expressionPath2 = new ExpressionPath(expressionArray0[2], expressionArray0, stepArray0);
      CoreOperationEqual coreOperationEqual1 = new CoreOperationEqual(expressionArray0[1], expressionPath2);
      expressionArray0[5] = (Expression) coreOperationEqual1;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[2], expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-2603), expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 1489;
      // Undeclared exception!
      try { 
        coreFunction0.functionNull((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction-2603()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      Expression[] expressionArray1 = new Expression[1];
      Constant constant2 = new Constant(long0);
      expressionArray1[0] = (Expression) constant2;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray1);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationGreaterThan0);
      jXPathContext0.getLocale();
      QName qName0 = new QName("");
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale.getISOLanguages();
      NodePointer nodePointer0 = NodePointer.newNodePointer(qName0, "", locale0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, (Object) null, nodePointer0);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, nodePointer0);
      RootContext rootContext1 = rootContext0.getRootContext();
      EvalContext evalContext0 = rootContext1.getVariableContext(qName0);
      coreFunction0.functionName(evalContext0);
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals((-2), coreFunction0.getFunctionCode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[6];
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(extensionFunction0, extensionFunction0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMod0, coreOperationMod0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      Float float0 = new Float((double) 5);
      Constant constant0 = new Constant(float0);
      expressionArray0[1] = (Expression) constant0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(expressionArray0[0], constant0);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationUnion0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[2], expressionArray0[2]);
      expressionArray0[5] = (Expression) coreOperationGreaterThan0;
      CoreFunction coreFunction0 = new CoreFunction(5, expressionArray0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      PrecedingOrFollowingContext precedingOrFollowingContext0 = new PrecedingOrFollowingContext((EvalContext) null, nodeTypeTest0, true);
      NamespaceContext namespaceContext0 = new NamespaceContext(precedingOrFollowingContext0, nodeTypeTest0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("F8YuT0");
      DescendantContext descendantContext0 = new DescendantContext(namespaceContext0, true, processingInstructionTest0);
      ParentContext parentContext0 = new ParentContext(descendantContext0, nodeTypeTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains(parentContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: local-name(org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003 = org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000003, 5, org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004 = org.apache.commons.jxpath.ri.compiler.Constant@0000000005, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004) < (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000004) | org.apache.commons.jxpath.ri.compiler.Constant@0000000005 | (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006) | (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThan@0000000007) | org.apache.commons.jxpath.ri.compiler.CoreOperationUnion@0000000008 | (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000009), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006) > (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000006))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      coreFunction0.getFunctionCode();
      QName qName0 = new QName("T+z");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(9);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeTypeTest0);
      NodeNameTest nodeNameTest1 = new NodeNameTest(qName0, "org.apache.commons.jxpath.ri.model.beans.BeanPointerFactory");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest1);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: concat()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      LocationPath locationPath0 = new LocationPath(false, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArg3();
      CoreOperationDivide coreOperationDivide1 = new CoreOperationDivide(coreFunction0, (Expression) null);
      // Undeclared exception!
      try { 
        coreOperationDivide1.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(30, expressionArray0);
      coreFunction0.getFunctionName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CoreFunction coreFunction1 = new CoreFunction(30, expressionArray0);
      coreFunction1.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction2 = new CoreFunction(586, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      Expression[] expressionArray1 = new Expression[9];
      expressionArray1[0] = (Expression) coreOperationOr0;
      expressionArray1[1] = (Expression) coreOperationOr0;
      expressionArray1[2] = (Expression) coreOperationOr0;
      expressionArray1[3] = (Expression) coreOperationOr0;
      expressionArray1[4] = (Expression) coreOperationOr0;
      expressionArray1[5] = (Expression) coreOperationOr0;
      expressionArray1[6] = (Expression) coreOperationOr0;
      expressionArray1[7] = (Expression) coreOperationOr0;
      expressionArray1[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-3744), expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(586, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionString((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, coreOperationMultiply0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionTranslate(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction528()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(21, (Expression[]) null);
      coreFunction0.computeContextDependent();
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("?m");
      assertEquals("?m", processingInstructionTest0.getTarget());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Long long0 = new Long(1);
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(constant0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationEqual0);
      constant0.toString();
      constant0.toString();
      Byte byte0 = new Byte((byte)42);
      Constant constant1 = new Constant(byte0);
      Expression[] expressionArray0 = new Expression[9];
      CoreFunction coreFunction0 = new CoreFunction((-1), expressionArray0);
      coreFunction0.getArg1();
      expressionArray0[0] = null;
      expressionArray0[1] = (Expression) coreOperationEqual0;
      expressionArray0[2] = (Expression) constant0;
      expressionArray0[3] = (Expression) constant1;
      expressionArray0[4] = (Expression) constant0;
      expressionArray0[5] = (Expression) constant0;
      expressionArray0[6] = (Expression) coreOperationEqual0;
      expressionArray0[7] = (Expression) coreOperationGreaterThan0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[8] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(26, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[4], expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      expressionPath0.createContextForStep((EvalContext) null, (-3679), (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      int int0 = 10;
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(10, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreFunction0, coreOperationOr0);
      QName qName0 = new QName("Class ", "Class ");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationOr0, extensionFunction0);
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("Class ");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "Class ");
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, false, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionNamespaceURI(ancestorContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionStartsWith((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction586()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      EvalContext evalContext0 = null;
      String string0 = "";
      // Undeclared exception!
      try { 
        coreFunction0.functionNamespaceURI((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      QName qName0 = new QName("org.apache.commons.jxpath.ri.compiler.ExtensionFunction");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(9, expressionArray0);
      coreFunction0.computeContextDependent();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationDivide0, coreFunction0);
      Expression[] expressionArray1 = new Expression[2];
      expressionArray1[0] = (Expression) extensionFunction0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray1[1] = (Expression) coreOperationAnd0;
      ExpressionPath expressionPath0 = new ExpressionPath(expressionArray0[0], expressionArray1, (Step[]) null);
      expressionPath0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 div org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002)[org.apache.commons.jxpath.ri.compiler.ExtensionFunction(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 div org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002)][andorg.apache.commons.jxpath.ri.compiler.CoreOperationDivide@0000000003]");
      coreFunction0.getArg1();
      boolean boolean0 = coreFunction0.computeContextDependent();
      assertEquals(9, coreFunction0.getFunctionCode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      EvalContext evalContext0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, processingInstructionTest0);
      AncestorContext ancestorContext1 = new AncestorContext(ancestorContext0, true, processingInstructionTest0);
      ancestorContext0.toString();
      CoreFunction coreFunction0 = new CoreFunction(14, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: substring()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1239, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionString((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction1239()(null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLang((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      Long long0 = new Long((-2));
      Constant constant0 = new Constant(long0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(constant0, constant0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationGreaterThan0, coreOperationGreaterThan0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationGreaterThan0);
      constant0.toString();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      Constant constant1 = new Constant(long0);
      expressionArray0[1] = (Expression) constant1;
      CoreFunction coreFunction0 = new CoreFunction((-2), expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationGreaterThan0, expressionArray0, stepArray0);
      expressionPath0.createContextForStep((EvalContext) null, 2676, (NodeTest) null);
      Object object0 = coreFunction0.functionSubstringAfter((EvalContext) null);
      assertEquals((-2), coreFunction0.getFunctionCode());
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionKey((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(9, (Expression[]) null);
      coreFunction0.computeContextDependent();
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreFunction0, coreFunction0);
      ExpressionPath expressionPath0 = new ExpressionPath(coreOperationMod0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("2W2bT==");
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction((-996), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.LocationPath", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreOperationDivide0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("CuC[YtU9=3;", "CuC[YtU9=3;");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.getFunctionCode();
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(16, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      namespaceContext0.reset();
      namespaceContext0.getContextNodePointer();
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext((Object) unionContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      namespaceContext0.reset();
      EvalContext[] evalContextArray0 = new EvalContext[3];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext.newContext((Object) unionContext0);
      Integer integer0 = new Integer(24);
      CoreFunction coreFunction0 = new CoreFunction(561, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringAfter(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction561()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, coreOperationMultiply0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)29;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte) (-96);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      CoreOperationLessThan coreOperationLessThan2 = new CoreOperationLessThan((Expression) null, coreOperationGreaterThanOrEqual0);
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionNormalizeSpace((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(564, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.getArg2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(939, expressionArray0);
      EvalContext evalContext0 = null;
      int int0 = 19;
      // Undeclared exception!
      try { 
        coreFunction0.functionBoolean((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction939()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3975, (Expression[]) null);
      EvalContext evalContext0 = null;
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "dY,Bab=v=&Zna");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction((-618), expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionLast(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.AncestorContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionFloor((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction0()(), null, $F, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3975, (Expression[]) null);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("nrVs");
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(3975, processingInstructionTest0, (Expression[]) null);
      stepArray0[0] = step0;
      Expression[] expressionArray0 = new Expression[2];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      Step step1 = new Step(3975, processingInstructionTest0, expressionArray0);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, stepArray0);
      EvalContext evalContext1 = expressionPath0.evalSteps((EvalContext) null);
      coreFunction0.functionPosition(evalContext1);
      // Undeclared exception!
      try { 
        coreFunction0.functionName(evalContext1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.axes.PredicateContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      Expression[] expressionArray2 = new Expression[3];
      expressionArray2[0] = (Expression) coreOperationOr0;
      expressionArray2[1] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreOperationOr0;
      CoreFunction coreFunction1 = new CoreFunction(2142, expressionArray2);
      coreFunction1.computeValue((EvalContext) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-3679), expressionArray0);
      EvalContext evalContext0 = null;
      coreFunction0.compute((EvalContext) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "z{S>AP@VUy~~1k_%T");
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(5);
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeTypeTest0, true, true);
      Consumer<NodeSetContext> consumer0 = (Consumer<NodeSetContext>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        childContext0.forEachRemaining(consumer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(1, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("po/]Bk0^T)mZKjAA`&");
      AncestorContext ancestorContext1 = new AncestorContext(namespaceContext0, false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      int int0 = 528;
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      Byte byte0 = new Byte((byte) (-110));
      Constant constant0 = new Constant(byte0);
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], constant0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], coreOperationNegate0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationAnd0, coreOperationGreaterThan0);
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual1 = new CoreOperationLessThanOrEqual(coreOperationGreaterThan0, coreOperationNegate0);
      coreOperationLessThanOrEqual1.toString();
      Expression[] expressionArray1 = new Expression[1];
      CoreFunction coreFunction0 = new CoreFunction((-2442), expressionArray1);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual((Expression) null, expressionArray0[0]);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(nameAttributeTest0);
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      Constant constant0 = new Constant("concat");
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, coreOperationLessThanOrEqual0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationNegate0, (Expression) null);
      CoreFunction coreFunction0 = new CoreFunction(2, expressionArray0);
      QName qName0 = new QName("{>/&?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "{>/&?");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, coreOperationUnion0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(selfContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction0.computeValue((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(coreOperationMultiply0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      ExtensionFunction extensionFunction0 = new ExtensionFunction((QName) null, expressionArray0);
      expressionArray0[2] = (Expression) extensionFunction0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[2], coreOperationGreaterThan0);
      expressionArray0[3] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(406, expressionArray0);
      // Undeclared exception!
      coreFunction0.functionNormalizeSpace((EvalContext) null);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(586, expressionArray0);
      EvalContext evalContext0 = null;
      boolean boolean0 = true;
      QName qName0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionName((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(528, expressionArray0);
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null, "oDJ6<A!?;2+w");
      ChildContext childContext0 = new ChildContext((EvalContext) null, nodeNameTest0, true, true);
      AncestorContext ancestorContext0 = new AncestorContext(childContext0, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains(ancestorContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[0] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[3]);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(expressionArray0[2], coreOperationMultiply0);
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray0);
      EvalContext evalContext0 = null;
      QName qName0 = new QName("{>/&?");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext((EvalContext) null, expressionArray0[2]);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction528()(org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), null, -(org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003), null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "floor");
      CoreFunction coreFunction0 = new CoreFunction(2021, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreFunction coreFunction0 = new CoreFunction((-3679), expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      EvalContext evalContext0 = null;
      coreFunction0.computeContextDependent();
      NodeTest nodeTest0 = null;
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      Step[] stepArray0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      EvalContext[] evalContextArray0 = new EvalContext[3];
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      evalContextArray0[0] = (EvalContext) unionContext0;
      // Undeclared exception!
      try { 
        coreFunction0.iteratePointers(unionContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: boolean()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[15];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction0 = new CoreFunction(10, expressionArray0);
      coreFunction0.toString();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(2, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: position(null, null, null, null, null, null, null, null, null, null, null, null, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      coreOperationDivide0.computeContextDependent();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      QName qName0 = new QName("CuC[YtU9=3;", "CuC[YtU9=3;");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreFunction coreFunction1 = new CoreFunction(28, expressionArray0);
      coreFunction1.getFunctionName();
      coreFunction1.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionSubstring(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction28()(org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001 div org.apache.commons.jxpath.ri.compiler.LocationPath@0000000001)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(3975, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("nrVs");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionFloor(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction3975()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(30, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("nrVs");
      AncestorContext ancestorContext1 = new AncestorContext(evalContextArray0[1], false, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: format-number()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1841), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "waoo_-)X?iKU");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      Short short0 = new Short((short)28);
      Constant constant0 = new Constant(short0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant(short0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate1, coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(17, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      RootContext rootContext0 = new RootContext((JXPathContextReferenceImpl) null, (NodePointer) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(rootContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(18, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, (NodeTest) null);
      Step[] stepArray0 = null;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      EvalContext[] evalContextArray0 = new EvalContext[3];
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      evalContextArray0[0] = (EvalContext) unionContext0;
      evalContextArray0[1] = null;
      evalContextArray0[2] = null;
      UnionContext unionContext1 = new UnionContext(ancestorContext0, evalContextArray0);
      NamespaceContext namespaceContext1 = new NamespaceContext(evalContextArray0[2], (NodeTest) null);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) namespaceContext1);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      Integer integer0 = new Integer(13);
      DescendantContext descendantContext0 = new DescendantContext(evalContextArray0[1], false, (NodeTest) null);
      // Undeclared exception!
      try { 
        jXPathContext0.getNodeSetByKey("boolean()", descendantContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[2] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      CoreFunction coreFunction1 = new CoreFunction(25, expressionArray0);
      EvalContext evalContext0 = null;
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction1.functionPosition((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: floor(unknownFunction0()(), null, $F, null, null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(locationPath0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationNegate0, locationPath0);
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: normalize-space(null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreFunction0;
      expressionArray1[1] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[2] = (Expression) variableReference0;
      expressionArray1[3] = (Expression) coreFunction0;
      expressionArray1[4] = (Expression) coreFunction0;
      int int0 = 0;
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "waoo_-)X?iKU");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      Short short0 = new Short((short)28);
      Constant constant0 = new Constant(short0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(variableReference0, nameAttributeTest0);
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(coreOperationSubtract0, coreOperationMultiply0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(constant0, coreOperationMultiply1);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(variableReference0, coreOperationDivide0);
      Byte byte0 = new Byte((byte) (-3));
      Constant constant1 = new Constant(byte0);
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationMultiply0, coreOperationLessThan0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(constant0);
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(coreOperationMultiply1);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationMultiply1, coreOperationLessThan0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationDivide0, constant1);
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.toString();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, ", path does not match a changeable location");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationUnion0, coreOperationUnion0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationMod0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationNegate0, coreOperationGreaterThanOrEqual0);
      CoreOperationLessThan coreOperationLessThan1 = new CoreOperationLessThan(coreOperationNegate0, coreOperationMultiply0);
      int int0 = 22;
      CoreFunction coreFunction0 = new CoreFunction(22, expressionArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction1 = new CoreFunction(22, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: lang(null, null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      Expression[] expressionArray1 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray1);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      CoreFunction coreFunction1 = new CoreFunction(1, expressionArray1);
      // Undeclared exception!
      try { 
        coreFunction1.functionContains((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: last()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      int int0 = 243;
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      coreOperationGreaterThan0.args = expressionArray0;
      expressionArray0[4] = (Expression) coreOperationGreaterThan0;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThan0);
      coreOperationLessThanOrEqual0.toString();
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[4];
      Expression[] expressionArray1 = new Expression[2];
      Step[] stepArray0 = new Step[4];
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest(14);
      Step step0 = new Step(14, nodeTypeTest0, expressionArray1);
      stepArray0[0] = step0;
      Step step1 = new Step(810, nodeTypeTest0, expressionArray1);
      stepArray0[1] = step1;
      Step step2 = new Step(810, nodeTypeTest0, expressionArray1);
      stepArray0[2] = step2;
      Step step3 = new Step(2810, nodeTypeTest0, expressionArray0);
      stepArray0[3] = step3;
      LocationPath locationPath0 = new LocationPath(false, stepArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(locationPath0, locationPath0);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(coreOperationEqual0, coreOperationEqual0);
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationLessThan0);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationNegate0, coreOperationEqual0);
      expressionArray1[0] = (Expression) coreOperationSubtract0;
      QName qName0 = new QName("(vM");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray1[1] = (Expression) variableReference0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray1);
      expressionArray0[0] = (Expression) coreOperationUnion0;
      LocationPath locationPath1 = new LocationPath(true, stepArray0);
      expressionArray0[1] = (Expression) locationPath1;
      Constant constant0 = new Constant(" into a collection of size ");
      expressionArray0[2] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(coreOperationUnion0, locationPath1);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      CoreFunction coreFunction0 = new CoreFunction(810, expressionArray0);
      coreFunction0.getArg2();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) coreOperationSubtract0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeTypeTest0);
      AttributeContext attributeContext0 = new AttributeContext(namespaceContext0, nodeTypeTest0);
      BasicVariables basicVariables0 = new BasicVariables();
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, attributeContext0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: '(vM'
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, (Expression[]) null, (Step[]) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      EvalContext[] evalContextArray0 = new EvalContext[2];
      evalContextArray0[0] = (EvalContext) namespaceContext0;
      evalContextArray0[1] = (EvalContext) namespaceContext0;
      UnionContext unionContext0 = new UnionContext(namespaceContext0, evalContextArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) unionContext0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, evalContextArray0[0], (Pointer) null);
      Integer integer0 = new Integer(24);
      // Undeclared exception!
      try { 
        jXPathContextReferenceImpl0.getNodeSetByKey("sum()", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot find an element by key - no KeyManager has been specified
         //
         verifyException("org.apache.commons.jxpath.JXPathContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      Double double0 = Expression.NOT_A_NUMBER;
      Constant constant0 = new Constant(double0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(expressionArray0[0], expressionArray0[0]);
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], expressionArray0[0]);
      CoreFunction coreFunction1 = new CoreFunction(10, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction1.functionLast((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float(1056.31F);
      QName qName0 = new QName("__Qw>$pslTKYD+:P83n");
      VariableReference variableReference0 = new VariableReference(qName0);
      int int0 = 0;
      NodeTest nodeTest0 = null;
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      Step step1 = new Step(0, (NodeTest) null, expressionArray0);
      Step[] stepArray0 = new Step[0];
      ExpressionPath expressionPath0 = new ExpressionPath(variableReference0, expressionArray0, stepArray0);
      EvalContext evalContext0 = null;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.computeContextDependent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, false, (NodeTest) null);
      PredicateContext predicateContext0 = new PredicateContext(descendantContext0, expressionArray0[4]);
      NamespaceContext namespaceContext1 = new NamespaceContext(predicateContext0, (NodeTest) null);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      int int0 = 0;
      EvalContext evalContext0 = null;
      NodeTypeTest nodeTypeTest0 = new NodeTypeTest((-729));
      boolean boolean0 = false;
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan((Expression) null, (Expression) null);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      QName qName0 = new QName("Yd-#.:w%.IJEVj9!JU");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction((-729), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction((-1283), expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest((QName) null);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      Expression[] expressionArray1 = new Expression[6];
      expressionArray1[0] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[1] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[2] = (Expression) coreOperationAnd0;
      expressionArray1[3] = (Expression) coreOperationLessThanOrEqual0;
      expressionArray1[4] = (Expression) coreOperationAnd0;
      expressionArray1[5] = (Expression) coreOperationNegate0;
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray1);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      AncestorContext ancestorContext0 = new AncestorContext(namespaceContext0, false, nodeNameTest0);
      NamespaceContext namespaceContext1 = new NamespaceContext(ancestorContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition((EvalContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[9];
      Constant constant0 = new Constant("1?NxvCc7(h3S1e6|");
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(constant0, constant0);
      expressionArray0[0] = (Expression) coreOperationLessThan0;
      CoreOperationUnion coreOperationUnion0 = new CoreOperationUnion(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationUnion0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationNegate0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationLessThan0, expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[4] = (Expression) coreOperationAnd0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual1 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[5] = (Expression) coreOperationGreaterThanOrEqual1;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[6] = (Expression) coreOperationAdd0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[7] = (Expression) coreOperationOr0;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationUnion0, coreOperationNegate0);
      expressionArray0[8] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(1, expressionArray0);
      QName qName0 = new QName("format-number");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, "format-number");
      DescendantContext descendantContext0 = new DescendantContext((EvalContext) null, true, nodeNameTest0);
      SelfContext selfContext0 = new SelfContext(descendantContext0, nodeNameTest0);
      PredicateContext predicateContext0 = new PredicateContext(selfContext0, expressionArray0[5]);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstringBefore(predicateContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[0];
      CoreFunction coreFunction0 = new CoreFunction((-1798), expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Expression[] expressionArray0 = null;
      CoreFunction coreFunction0 = new CoreFunction((-1), (Expression[]) null);
      coreFunction0.getFunctionCode();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[2];
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual((Expression) null, (Expression) null);
      CoreOperationSubtract coreOperationSubtract0 = new CoreOperationSubtract(coreOperationGreaterThanOrEqual0, coreOperationGreaterThanOrEqual0);
      expressionArray0[0] = (Expression) coreOperationSubtract0;
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationOr0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("");
      NamespaceContext namespaceContext0 = new NamespaceContext((EvalContext) null, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionPosition(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()((org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000001) - (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationSubtract@0000000002 or org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000003)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("", "waoo_-)X?iKU");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(variableReference0, variableReference0);
      Short short0 = new Short((short)28);
      Constant constant0 = new Constant(short0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationMultiply0, constant0);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(nameAttributeTest0, variableReference0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[0], constant0);
      expressionArray0[1] = (Expression) coreOperationLessThan0;
      Constant constant1 = new Constant(short0);
      expressionArray0[2] = (Expression) constant1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], (Expression) null);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(coreOperationGreaterThanOrEqual0);
      expressionArray0[4] = (Expression) coreOperationNegate0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(constant0);
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(coreOperationNegate1, coreOperationLessThan0);
      expressionArray0[5] = (Expression) coreOperationMod0;
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(coreOperationMultiply0, coreOperationGreaterThanOrEqual0);
      expressionArray0[6] = (Expression) coreOperationEqual0;
      CoreFunction coreFunction0 = new CoreFunction(4575, expressionArray0);
      // Undeclared exception!
      try { 
        coreFunction0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[5];
      CoreOperationAnd coreOperationAnd0 = new CoreOperationAnd(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationAnd0;
      CoreOperationNegate coreOperationNegate0 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationNegate0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationNegate0, expressionArray0[1]);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationNegate coreOperationNegate1 = new CoreOperationNegate(expressionArray0[0]);
      expressionArray0[3] = (Expression) coreOperationNegate1;
      QName qName0 = new QName("", "");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[4] = (Expression) variableReference0;
      CoreFunction coreFunction0 = new CoreFunction(528, expressionArray0);
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0);
      SelfContext selfContext0 = new SelfContext((EvalContext) null, nodeNameTest0);
      NamespaceContext namespaceContext0 = new NamespaceContext(selfContext0, nodeNameTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSubstring(namespaceContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction528()(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 and org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000003 and org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000004 and org.apache.commons.jxpath.ri.compiler.VariableReference@0000000006, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002 <= org.apache.commons.jxpath.ri.compiler.CoreOperationNegate@0000000002, -(org.apache.commons.jxpath.ri.compiler.CoreOperationAnd@0000000001), $:)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      Expression[] expressionArray0 = new Expression[6];
      expressionArray0[0] = (Expression) coreFunction0;
      expressionArray0[1] = (Expression) coreFunction0;
      QName qName0 = new QName("F");
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[2] = (Expression) variableReference0;
      expressionArray0[3] = (Expression) coreFunction0;
      expressionArray0[4] = (Expression) coreFunction0;
      expressionArray0[5] = (Expression) coreFunction0;
      Step[] stepArray0 = new Step[2];
      Step step0 = new Step(0, (NodeTest) null, expressionArray0);
      stepArray0[0] = step0;
      Step step1 = new Step(0, (NodeTest) null, (Expression[]) null);
      stepArray0[1] = step1;
      ExpressionPath expressionPath0 = new ExpressionPath(coreFunction0, expressionArray0, stepArray0);
      coreFunction0.computeContextDependent();
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, (NodeTest) null);
      NamespaceContext namespaceContext0 = new NamespaceContext(ancestorContext0, (NodeTest) null);
      expressionPath0.toString();
      namespaceContext0.reset();
      expressionPath0.evalSteps(namespaceContext0);
      // Undeclared exception!
      try { 
        coreFunction0.functionSum((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2, (Expression[]) null);
      // Undeclared exception!
      try { 
        coreFunction0.getArg3();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[3];
      Float float0 = new Float(1056.31F);
      Constant constant0 = new Constant(float0);
      expressionArray0[0] = (Expression) constant0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(constant0, expressionArray0[0]);
      expressionArray0[1] = (Expression) coreOperationMultiply0;
      CoreOperationLessThan coreOperationLessThan0 = new CoreOperationLessThan(expressionArray0[1], coreOperationMultiply0);
      expressionArray0[2] = (Expression) coreOperationLessThan0;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionLast((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(1056.31005859375, org.apache.commons.jxpath.ri.compiler.Constant@0000000001 * org.apache.commons.jxpath.ri.compiler.Constant@0000000001, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002 < org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000002)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[1];
      LocationPath locationPath0 = new LocationPath(true, (Step[]) null);
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(locationPath0, locationPath0);
      expressionArray0[0] = (Expression) coreOperationDivide0;
      CoreFunction coreFunction0 = new CoreFunction(16, expressionArray0);
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) expressionArray0[0]);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext0, coreFunction0, (Pointer) null);
      RootContext rootContext0 = new RootContext(jXPathContextReferenceImpl0, (NodePointer) null);
      QName qName0 = new QName("HAfnK+`!_", "\"p");
      EvalContext evalContext0 = rootContext0.getVariableContext(qName0);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("HAfnK+`!_");
      SelfContext selfContext0 = new SelfContext(evalContext0, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCeiling(selfContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(2082, (Expression[]) null);
      coreFunction0.getArgumentCount();
      coreFunction0.getFunctionName();
      coreFunction0.getFunctionCode();
      // Undeclared exception!
      try { 
        coreFunction0.getArg1();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(24, (Expression[]) null);
      ProcessingInstructionTest processingInstructionTest0 = new ProcessingInstructionTest("nrVs");
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, false, processingInstructionTest0);
      // Undeclared exception!
      try { 
        coreFunction0.functionCount(ancestorContext0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: sum()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      NameAttributeTest nameAttributeTest0 = new NameAttributeTest(coreOperationOr0, coreOperationOr0);
      expressionArray0[0] = (Expression) nameAttributeTest0;
      CoreOperationGreaterThan coreOperationGreaterThan0 = new CoreOperationGreaterThan(expressionArray0[0], coreOperationOr0);
      expressionArray0[1] = (Expression) coreOperationGreaterThan0;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(expressionArray0[0], nameAttributeTest0);
      expressionArray0[2] = (Expression) coreOperationLessThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(nameAttributeTest0, nameAttributeTest0);
      expressionArray0[3] = (Expression) coreOperationMultiply0;
      coreOperationGreaterThan0.args = expressionArray0;
      CoreOperationGreaterThan coreOperationGreaterThan1 = new CoreOperationGreaterThan(coreOperationOr0, coreOperationGreaterThan0);
      expressionArray0[4] = (Expression) coreOperationGreaterThan1;
      CoreOperationNotEqual coreOperationNotEqual0 = new CoreOperationNotEqual(expressionArray0[2], coreOperationGreaterThan0);
      coreOperationLessThanOrEqual0.toString();
      expressionArray0[5] = (Expression) coreOperationNotEqual0;
      CoreOperationMod coreOperationMod0 = new CoreOperationMod(expressionArray0[3], nameAttributeTest0);
      expressionArray0[6] = (Expression) coreOperationMod0;
      CoreFunction coreFunction0 = new CoreFunction(243, expressionArray0);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionRound((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction243()((org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) = (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003) > (org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004) > org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000006) > (org.apache.commons.jxpath.ri.compiler.CoreOperationNotEqual@0000000007) > org.apache.commons.jxpath.ri.compiler.CoreOperationMod@0000000008, (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) <= (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002) * (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002), (org.apache.commons.jxpath.ri.compiler.CoreOperationOr@0000000001) > (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationLessThanOrEqual@0000000004 != org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThan@0000000003, org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 mod (org.apache.commons.jxpath.ri.compiler.NameAttributeTest@0000000002))
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      int int0 = 0;
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionConcat((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()()
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      QName qName0 = new QName("namespace-uri", "string");
      ExtensionFunction extensionFunction0 = new ExtensionFunction(qName0, expressionArray0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(extensionFunction0, extensionFunction0);
      expressionArray0[0] = (Expression) coreOperationEqual0;
      coreOperationEqual0.isContextDependent();
      VariableReference variableReference0 = new VariableReference(qName0);
      expressionArray0[1] = (Expression) variableReference0;
      CoreOperationMultiply coreOperationMultiply0 = new CoreOperationMultiply(extensionFunction0, coreOperationEqual0);
      expressionArray0[2] = (Expression) coreOperationMultiply0;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(expressionArray0[0], coreOperationEqual0);
      expressionArray0[3] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreOperationMultiply coreOperationMultiply1 = new CoreOperationMultiply(expressionArray0[2], expressionArray0[3]);
      expressionArray0[4] = (Expression) coreOperationMultiply1;
      CoreOperationLessThanOrEqual coreOperationLessThanOrEqual0 = new CoreOperationLessThanOrEqual(coreOperationGreaterThanOrEqual0, coreOperationMultiply1);
      expressionArray0[5] = (Expression) coreOperationLessThanOrEqual0;
      VariableReference variableReference1 = new VariableReference(qName0);
      expressionArray0[6] = (Expression) variableReference1;
      CoreFunction coreFunction0 = new CoreFunction(0, expressionArray0);
      coreFunction0.getFunctionCode();
      EvalContext evalContext0 = null;
      // Undeclared exception!
      try { 
        coreFunction0.functionID((EvalContext) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Incorrect number of arguments: unknownFunction0()(org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 = org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002, $namespace-uri:string, org.apache.commons.jxpath.ri.compiler.ExtensionFunction@0000000002 * (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003), (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003) >= (org.apache.commons.jxpath.ri.compiler.CoreOperationEqual@0000000003), org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000005 * (org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006), org.apache.commons.jxpath.ri.compiler.CoreOperationGreaterThanOrEqual@0000000006 <= org.apache.commons.jxpath.ri.compiler.CoreOperationMultiply@0000000007, $namespace-uri:string)
         //
         verifyException("org.apache.commons.jxpath.ri.compiler.CoreFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      int int0 = (-1988);
      CoreFunction coreFunction0 = new CoreFunction((-1988), (Expression[]) null);
      coreFunction0.toString();
      JXPathContext jXPathContext0 = JXPathContext.newContext((Object) "unknownFunction-1988()()");
      JXPathContext jXPathContext1 = JXPathContext.newContext(jXPathContext0, (Object) coreFunction0);
      BasicVariables basicVariables0 = new BasicVariables();
      String string0 = "";
      QName qName0 = new QName("");
      VariablePointer variablePointer0 = new VariablePointer(basicVariables0, qName0);
      JXPathContextReferenceImpl jXPathContextReferenceImpl0 = null;
      try {
        jXPathContextReferenceImpl0 = new JXPathContextReferenceImpl(jXPathContext1, jXPathContext0, variablePointer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No such variable: ''
         //
         verifyException("org.apache.commons.jxpath.BasicVariables", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Expression[] expressionArray0 = new Expression[7];
      CoreOperationOr coreOperationOr0 = new CoreOperationOr(expressionArray0);
      expressionArray0[0] = (Expression) coreOperationOr0;
      CoreOperationAdd coreOperationAdd0 = new CoreOperationAdd(expressionArray0);
      expressionArray0[1] = (Expression) coreOperationAdd0;
      QName qName0 = new QName("last", "/m");
      VariableReference variableReference0 = new VariableReference(qName0);
      CoreOperationEqual coreOperationEqual0 = new CoreOperationEqual(variableReference0, expressionArray0[0]);
      expressionArray0[2] = (Expression) coreOperationEqual0;
      CoreOperationOr coreOperationOr1 = new CoreOperationOr(expressionArray0);
      expressionArray0[3] = (Expression) coreOperationOr1;
      CoreOperationDivide coreOperationDivide0 = new CoreOperationDivide(coreOperationEqual0, coreOperationAdd0);
      expressionArray0[4] = (Expression) coreOperationDivide0;
      CoreOperationAdd coreOperationAdd1 = new CoreOperationAdd(expressionArray0);
      expressionArray0[5] = (Expression) coreOperationAdd1;
      CoreOperationGreaterThanOrEqual coreOperationGreaterThanOrEqual0 = new CoreOperationGreaterThanOrEqual(coreOperationAdd0, expressionArray0[2]);
      expressionArray0[6] = (Expression) coreOperationGreaterThanOrEqual0;
      CoreFunction coreFunction0 = new CoreFunction(838, expressionArray0);
      int int0 = coreFunction0.getArgumentCount();
      assertEquals(7, int0);
      assertEquals(838, coreFunction0.getFunctionCode());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      CoreFunction coreFunction0 = new CoreFunction(0, (Expression[]) null);
      QName qName0 = new QName("ceiling");
      NodeNameTest nodeNameTest0 = new NodeNameTest(qName0, (String) null);
      AncestorContext ancestorContext0 = new AncestorContext((EvalContext) null, true, nodeNameTest0);
      // Undeclared exception!
      try { 
        ancestorContext0.getRootContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.jxpath.ri.EvalContext", e);
      }
  }
}
