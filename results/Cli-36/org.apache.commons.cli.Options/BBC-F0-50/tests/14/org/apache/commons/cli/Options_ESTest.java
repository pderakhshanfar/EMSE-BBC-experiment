/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:40:20 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.List;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Options_ESTest extends Options_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, false, (String) null);
      options0.addOption(option0);
      List<Option> list0 = options0.helpOptions();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      optionGroup0.setRequired(true);
      Option option0 = new Option("l4", true, "l4");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options0.getOptionGroup(option0);
      assertNotNull(optionGroup2);
      assertFalse(option0.isRequired());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      OptionGroup optionGroup2 = options0.getOptionGroup(option0);
      assertFalse(option0.isRequired());
      assertNotNull(optionGroup2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "");
      Option option0 = options1.getOption("");
      option0.setRequired(true);
      Option option1 = options0.getOption("");
      assertEquals((-1), option1.getArgs());
      assertFalse(option1.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#E;Ks^eM6*3o9");
      option0.setValueSeparator('g');
      Options options1 = options0.addOption(option0);
      Option option1 = options1.getOption("#E;Ks^eM6*3o9");
      assertSame(option1, option0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#E;Ks^eM6*3o9");
      options0.addOption(option0);
      option0.setOptionalArg(true);
      Option option1 = options0.getOption("#E;Ks^eM6*3o9");
      assertFalse(option1.hasArgName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      options0.addOption(option0);
      option0.setArgName("\"");
      Option option1 = options0.getOption("");
      assertNull(option1.getLongOpt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, "org.pahe.como3.2l0pion");
      option0.setArgs(0);
      option0.setLongOpt("org.pahe.como3.2l0pion");
      options0.addOption(option0);
      Option option1 = options0.getOption("org.pahe.como3.2l0pion");
      assertFalse(option1.hasArg());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      options0.addOption(option0);
      option0.setArgs(2694);
      Option option1 = options0.getOption("");
      assertFalse(option1.hasOptionalArg());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.getOptionGroup((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("u", "0NhMhY%i1~", true, "0NhMhY%i1~");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      // Undeclared exception!
      try { 
        options0.getMatchingOptions((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOptionGroup((OptionGroup) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption((Option) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.Options", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("scQzLy%0~.[4I%I260i", false, " ]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'scQzLy%0~.[4I%I260i' contains an illegal character : '%'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("bx<KhAsO", "bx<KhAsO", false, "]<o<$W[VcIMf~;Ge2-l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option 'bx<KhAsO' contains an illegal character : '<'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Options options0 = new Options();
      // Undeclared exception!
      try { 
        options0.addOption("42ZWP\"|qdpz8", "~dh:*%!+nb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The option '42ZWP\"|qdpz8' contains an illegal character : '\"'
         //
         verifyException("org.apache.commons.cli.OptionValidator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, (String) null, false, (String) null);
      assertSame(options0, options1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option((String) null, true, (String) null);
      options0.addOption(option0);
      boolean boolean0 = options0.hasShortOption((String) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasShortOption("#_;Ks^@M6n3o9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#_;Ks^@M6n3o9");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = options1.hasLongOption("#_;Ks^@M6n3o9");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasLongOption("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "dd`IX$-B+>`*?.#>M", true, "NO_ARGS_ALLOWED");
      options0.addOption(option0);
      boolean boolean0 = options0.hasOption("dd`IX$-B+>`*?.#>M");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "dd`IX$-B+>`*?.#>M", true, "NO_ARGS_ALLOWED");
      Options options1 = options0.addOption(option0);
      boolean boolean0 = options1.hasOption("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      boolean boolean0 = options0.hasOption("[ Options: [ short ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#_;Ks^@M6n3o9");
      Options options1 = options0.addOption(option0);
      List<String> list0 = options1.getMatchingOptions("");
      assertTrue(list0.contains("#_;Ks^@M6n3o9"));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#_;Ks^@M6n3o9");
      Options options1 = options0.addOption(option0);
      List<String> list0 = options1.getMatchingOptions("\"");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = options0.getOption("\"");
      assertNull(option0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "");
      Option option0 = options1.getOption("");
      assertNotNull(option0);
      
      option0.setRequired(true);
      options1.addOption(option0);
      options0.addOption(option0);
      assertEquals((-1), option0.getArgs());
      assertFalse(option0.hasLongOpt());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "og.apache.commons_cli.AlreadySelectedException");
      option0.setLongOpt("#_;Ks^@M6n3o9");
      Options options1 = options0.addOption(option0);
      List<String> list0 = options1.getMatchingOptions("#_;Ks^@M6n3o9");
      assertTrue(list0.contains("#_;Ks^@M6n3o9"));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Collection<OptionGroup> collection0 = options0.getOptionGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "dd`IX$-B+>`*?.#>M", true, "NO_ARGS_ALLOWED");
      OptionGroup optionGroup0 = options0.getOptionGroup(option0);
      assertNull(optionGroup0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      String string0 = options0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      List list0 = options0.getRequiredOptions();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      Collection<Option> collection0 = options0.getOptions();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", false, "#_;Ks^@M6n3o9");
      assertSame(options0, options1);
  }
}
