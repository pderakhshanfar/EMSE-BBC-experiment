/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 08 15:41:37 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReaderBasedJsonParser_ESTest extends ReaderBasedJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("0");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextLength();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("eK$:`");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(116, "eK$:`");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.JsonStreamContext");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-239), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleApos();
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      SerializedString serializedString1 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(117);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      charsToNameCanonicalizer1.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 48, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 2, false);
      StringReader stringReader1 = new StringReader("2.2250738585072012e-308");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 51, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getValueAsBoolean();
      readerBasedJsonParser1.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      stringReader0.read(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('V' (code 86)) in numeric value: Decimal point not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(119);
      charsToNameCanonicalizer1.makeChild(1);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(33);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "%|4BA", true);
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      charArray0[2] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-564), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 1078, 119, true);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer0.release();
      StringReader stringReader0 = new StringReader("2250738585072012e-308");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(119);
      charsToNameCanonicalizer2.makeChild(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 119, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 125, 45, true);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextTextValue();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(117);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      charsToNameCanonicalizer1.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 48, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 2, false);
      charsToNameCanonicalizer0.makeChild(117);
      StringReader stringReader1 = new StringReader("2.2250738585072012e-308");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 51, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser1.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(117);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer2.makeChild(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      charArray0[2] = 'L';
      charArray0[3] = 'L';
      charArray0[4] = 'P';
      charArray0[5] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer3, charArray0, 1, 0, true);
      StringReader stringReader1 = new StringReader("2.2250738585072012e-308");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.getValueAsBoolean();
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(">kz@A~-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      stringReader0.close();
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[4] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1656, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 127, true);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      String string0 = "\"@1ev \\";
      StringReader stringReader0 = new StringReader("\"@1ev ");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      stringReader0.close();
      try { 
        readerBasedJsonParser0.getTextOffset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader(" / 0x");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 544, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      stringReader0.markSupported();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("8eO0.Wy1bTR-TP[A");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 847, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(" / 0x");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charsToNameCanonicalizer0.findSymbol(charArray0, 110, (-802), 110);
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      charArray0[8] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-95), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1884, true);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(1405);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      String string0 = "\"Ofi_SyHmR[_*xA+T";
      StringReader stringReader0 = new StringReader("70SBV");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(623);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('S' (code 83)): Expected space separating root-level values
         //  at [Source: java.lang.Integer@0000000018; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(">kz@A~-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      stringReader0.close();
      charArray0[1] = '%';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1656, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 127, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("8eO0.Wy1bTR-TP[A");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, (-2902), false);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: -2898]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      charArray0[7] = '0';
      charArray0[8] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-95), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1884, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_UNQUOTED_FIELD_NAMES;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      readerBasedJsonParser0._parseNegNumber();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting comma to separate ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", false);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[12];
      charArray0[0] = '5';
      charArray0[1] = 'E';
      charArray0[9] = 'k';
      charArray0[4] = '5';
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 67, false);
      charsToNameCanonicalizer0.release();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: java.lang.String@0000000020; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      charsToNameCanonicalizer0.makeChild(346);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1525);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler1, integer0, true);
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 192, (-2333), false);
      StringReader stringReader1 = new StringReader("2.2250738585072012e-308");
      readerBasedJsonParser0.getValueAsBoolean();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 117, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("5[)y ");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, 2190, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2190, 33, true);
      try { 
        readerBasedJsonParser1.getNextChar("fO/tifO");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(com.fasterxml.jackson.core.type.TypeReference.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[1] = '.';
      charArray0[2] = '9';
      charArray0[3] = 'v';
      charArray0[4] = '+';
      charArray0[5] = 'G';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3226), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      readerBasedJsonParser0.readValueAs((TypeReference<?>) null);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader1 = new StringReader("sWx");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-1876), stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._handleOddValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[3] = '$';
      charArray0[4] = '$';
      stringReader0.read(charArray0);
      char[] charArray1 = new char[1];
      charArray1[0] = '$';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray1, 1313, 0, false);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('V' (code 86)) in numeric value: Decimal point not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}[Wi");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      SerializedString serializedString0 = new SerializedString("}[Wi");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 46, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleOddName(256);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      StringReader stringReader1 = new StringReader("dcO^D;-i");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3775, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1702));
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 3, 8, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-114);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._readBinary((Base64Variant) null, bufferedOutputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("o1e{'\"");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3050, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(118, "0la]yh%@LRQ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('{' (code 123)): was expecting a colon to separate field name and value
         //  at [Source: java.lang.Object@0000000023; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("8_QgJ9BgS$mWHdh'!");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[13];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[3] = ':';
      charArray0[4] = ':';
      charArray0[5] = ':';
      charArray0[6] = ':';
      boolean boolean1 = true;
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._releaseBuffers();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 95, (-1), false);
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = '^';
      charArray0[2] = 'i';
      charArray0[3] = '9';
      charArray0[4] = 'q';
      charArray0[5] = '\'';
      charArray0[6] = 'p';
      charArray0[7] = 't';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1540), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 45, 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextLongValue((-1164L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2662), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("ALLOW_YAML_COMMENTS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '\u0012';
      charArray0[3] = '\u0012';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, true);
      stringReader0.close();
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0._handleOddValue(3490);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      stringReader0.mark(3);
      StringReader stringReader1 = new StringReader("4");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader("4");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 84, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextLongValue(785L);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[2] = 'a';
      charArray0[3] = '$';
      charArray0[4] = '$';
      charArray0[5] = '$';
      stringReader0.read(charArray0);
      charsToNameCanonicalizer0.findSymbol(charArray0, 2, (-758), (-341));
      boolean boolean0 = false;
      int int0 = (-1305);
      int int1 = 1336;
      int int2 = (-1);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 820, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 16, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('V' (code 86)) in numeric value: Decimal point not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: 20]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip((-1630L));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 92, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(584, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): was expecting a colon to separate field name and value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'A';
      charArray0[2] = '3';
      charArray0[3] = '0';
      charArray0[4] = 'I';
      charArray0[5] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 47, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('I' (code 73)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1e&v");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextLongValue(1);
      try { 
        readerBasedJsonParser0.getText();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("UTCgmLIM}`B2yo");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-47), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      charArray0[1] = '(';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 2292, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 33, 108, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleOddValue(108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(1186);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("02D@P8HCOX2");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2616), stringReader0, objectCodec0, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('D' (code 68)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "{# V9;891.PymD7";
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("08b,TM9-V-bzdp\"/=");
      StringReader stringReader3 = new StringReader("Fq=;");
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      StringReader stringReader4 = new StringReader("08b,TM9-V-bzdp\"/=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-539));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1813), stringReader4, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('b' (code 98)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000029; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("u($.8Q*GQ]>{V");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(69);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      StringReader stringReader0 = new StringReader("u($.8Q*GQ]>{V");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(108);
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 836, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "A", true);
      String string0 = "ALLOW_YAML_COMMENTS";
      StringReader stringReader0 = new StringReader("ALLOW_YAML_COMMENTS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(125);
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '(';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '\u0012';
      charArray0[5] = '(';
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charsToNameCanonicalizer1.release();
      charArray0[7] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 33, true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 18)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000032; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0.getValueAsDouble();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000033; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("2=8C/:7");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 103, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 48, 0, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1040), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getTextOffset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000034; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 92, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0.getTextOffset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000035; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("7-,,8|_$lS,;xF");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 91, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, (-2118), 1, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddValue(1388);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      StringReader stringReader1 = new StringReader(" \"(B7^Fj|Tz_v{");
      StringReader stringReader2 = new StringReader(" \"(B7^Fj|Tz_v{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-4037));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getTextCharacters();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000036; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'F';
      charArray0[1] = '3';
      charArray0[2] = '?';
      charArray0[3] = 'U';
      charArray0[4] = '1';
      charArray0[5] = 'l';
      charArray0[6] = '>';
      charArray0[7] = 'z';
      charsToNameCanonicalizer1.findSymbol(charArray0, 2, 1, 0);
      charsToNameCanonicalizer1.release();
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray1 = new char[9];
      charArray1[0] = '0';
      charArray1[1] = '0';
      charArray1[2] = '0';
      charArray1[3] = '0';
      charArray1[4] = '0';
      charArray1[5] = '0';
      charArray1[6] = '0';
      charArray1[7] = '0';
      charArray1[8] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 115, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray1, 2, 101, false);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringReader0.mark(3);
      char[] charArray0 = new char[3];
      charArray0[0] = '\u0014';
      charArray0[1] = 'g';
      charArray0[2] = '\u0014';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 45, true);
      SerializedString serializedString0 = new SerializedString("");
      SerializedString serializedString1 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 20)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000038; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("tr^^ue");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-243));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'tr': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleApos();
      readerBasedJsonParser0.nextLongValue(2);
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: 163]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "('true', 'false' or 'null')", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("('true', 'false' or 'null')");
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = '`';
      charArray0[2] = ' ';
      charArray0[3] = 'l';
      charArray0[4] = '}';
      charArray0[5] = 'u';
      charArray0[6] = '5';
      charArray0[7] = 'B';
      charArray0[8] = '[';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1019, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextTextValue();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000041; line: 1, column: 70]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getValueAsString("\"@1ev ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000042; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 398, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getValueAsString("l/Z*h0,");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000043; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"=k^~0Y_eeKr}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'I';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000044; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      iOContext0.allocReadIOBuffer(3);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getTextLength();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000045; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-534), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getTextLength();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000046; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("fLW Q3-0");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'fLW': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000047; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2525, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(33);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)123;
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000048; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("-INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader0 = new StringReader("2.2250738585072012e-308");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Q';
      charArray0[1] = 'Q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 262144, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextLongValue((-1462L));
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextIntValue(43);
      try { 
        readerBasedJsonParser0.getValueAsString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000049; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      String string0 = "\"Ofi_SyHmR[_*xA+T";
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsLong(3213L);
      readerBasedJsonParser0.nextIntValue(3);
      try { 
        readerBasedJsonParser0.getValueAsString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("M.nM:\"#p{K=m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 54, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2390, 0, false);
      readerBasedJsonParser0._skipString();
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000051; line: 1, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      stringReader0.mark(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[3];
      charArray0[0] = '\f';
      charArray0[1] = 'i';
      charArray0[2] = '\f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 123, false);
      readerBasedJsonParser0._skipCR();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-601), stringReader0, objectCodec0, charsToNameCanonicalizer2);
      readerBasedJsonParser1.nextFieldName();
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 12)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000052; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("}");
      StringReader stringReader1 = new StringReader("/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 489, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._decodeEscaped();
      readerBasedJsonParser0.getValueAsString();
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringReader stringReader0 = new StringReader("@]=Z,/n'jFwYL");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 57343, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleApos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$>Nxww9tHK'i=T82");
      StringReader stringReader0 = new StringReader("+Infinity");
      StringReader stringReader1 = new StringReader("1Pi3HTM;[pS");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "+Infinity", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding1);
      iOContext0.allocConcatBuffer();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext5 = iOContext3.withEncoding(jsonEncoding2);
      iOContext5.withEncoding(jsonEncoding1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext4, 0, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('P' (code 80)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000053; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("|!-|uC<%/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1c");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('c' (code 99)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000054; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[2] = '~';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[3] = 's';
      charArray0[4] = 'L';
      iOContext0.constructTextBuffer();
      charArray0[5] = 'r';
      charArray0[6] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1267, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1395, 1395, true);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextCharacters();
      readerBasedJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(54);
      char[] charArray0 = new char[5];
      charArray0[1] = '*';
      charArray0[2] = 'W';
      charArray0[3] = '}';
      charArray0[4] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2558, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 49, 2, true);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1e&v");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 49, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("fx*:9_R~w&|_]:");
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[7];
      charArray0[0] = '>';
      charArray0[1] = '\\';
      charArray0[2] = 'z';
      charArray0[3] = '[';
      charArray0[4] = ']';
      charArray0[5] = 'J';
      charArray0[6] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-139), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 13, 2, true);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000055; line: 1, column: 24]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.markSupported();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '\u0087';
      charArray0[1] = '\u0087';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 3, true);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 135)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000056; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(5);
      StringReader stringReader0 = new StringReader("n|_>n*A");
      stringReader0.markSupported();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("null");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000057; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(") out of range of int (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = 'I';
      charArray0[2] = '|';
      charArray0[3] = 'I';
      charArray0[4] = '|';
      charArray0[5] = 'I';
      charArray0[6] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 32, true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('|' (code 124)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Internal error: TypeReference constructed without actual type information");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader1 = new StringReader("Internal error: TypeReference constructed without actual type information");
      char[] charArray0 = new char[4];
      charArray0[0] = 'w';
      charArray0[2] = 'E';
      charArray0[3] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      readerBasedJsonParser0.getTextLength();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)123;
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)123;
      byteArray1[3] = (byte)123;
      byteArray1[4] = (byte)123;
      byteArray1[5] = (byte)123;
      byteArray1[6] = (byte)123;
      byteArray1[7] = (byte)123;
      byteArray1[8] = (byte)123;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)123;
      byteArray0[7] = (byte)123;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(" -- suspect a DoS attack based on hash collisions");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 54, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      char[] charArray0 = iOContext0.allocConcatBuffer();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 203, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 54, (-478), true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[6];
      charArray1[1] = '6';
      readerBasedJsonParser0.getTextLength();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-INF");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(367);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-20), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      stringReader0.markSupported();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("txtIz");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'txtIz': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000058; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("[]s^{ZgC.n{I++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("[]s^{ZgC.n{I++n");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      StringReader stringReader2 = new StringReader("+INF");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: java.io.StringReader@0000000059; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("i_f27~N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader1 = new StringReader("+INF");
      char[] charArray0 = new char[3];
      charArray0[0] = '@';
      charArray0[1] = '\u0092';
      charArray0[2] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000060; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1876, 33, false);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000061; line: 1, column: 42]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2587), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextIntValue(54);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000062; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.constructTextBuffer();
      StringReader stringReader1 = new StringReader("{# V9;891.PymD7");
      StringReader stringReader2 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(298);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charsToNameCanonicalizer1.release();
      charArray0[0] = '\\';
      charArray0[1] = '-';
      charArray0[2] = '#';
      charArray0[3] = 'D';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 73, stringReader2, objectCodec0, charsToNameCanonicalizer1, charArray0, 102, 33, true);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('V' (code 86)): was expecting a colon to separate field name and value
         //  at [Source: java.lang.Object@0000000063; line: 1, column: 38]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      char[] charArray0 = new char[4];
      charArray0[0] = 'd';
      charArray0[1] = '`';
      charArray0[2] = 'D';
      charArray0[3] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 55, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000064; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4000, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.nextLongValue(2147483647L);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000065; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-INF");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1377, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      stringReader0.reset();
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "bCy%fHOZCw1X9o29>");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 68, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for OBJECT (from [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 1])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000066; line: 1, column: 46]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(1876);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000067; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("true");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000068; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "MCj>$:y1{", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting double-quote to start field name");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '@';
      charArray0[2] = 'K';
      charArray0[3] = 'z';
      charArray0[4] = 'S';
      charArray0[5] = '_';
      charArray0[6] = 'f';
      charArray0[7] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      SerializedString serializedString0 = new SerializedString("MCj>$:y1{");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000069; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.makeChild(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("K{H\":c7nm =3x3E3^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 56, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 1, 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(4324, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("i_f27~N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      int int0 = 184;
      stringReader0.close();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 184, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(45, "i_f27~N");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 's';
      charArray0[2] = '~';
      charArray0[3] = '~';
      charArray0[4] = 'L';
      iOContext0.constructTextBuffer();
      charArray0[5] = 'r';
      charArray0[6] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1267, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1395, 1395, true);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      StringReader stringReader1 = new StringReader(" \"p(B7^F|Tz_v{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader1.read();
      charsToNameCanonicalizer0.makeChild((-4037));
      IOContext iOContext0 = new IOContext(bufferRecycler0, " \"p(B7^F|Tz_v{", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.makeChild(114);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.getTextCharacters();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000070; line: 1, column: 27]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1266), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000071; line: 1, column: 39]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("'null', 'true', 'false' or NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = ']';
      charArray0[2] = 'U';
      charArray0[3] = 'H';
      charArray0[4] = 'o';
      charArray0[5] = '^';
      charArray0[6] = '[';
      charArray0[7] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 125, 0, true);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._tokenIncomplete = true;
      readerBasedJsonParser0._handleApos();
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000072; line: 1, column: 125]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 0, false);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      StringReader stringReader0 = new StringReader("k.lGNr a Ab");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.constructTextBuffer();
      StringReader stringReader1 = new StringReader("7,2{6Zi6sHiycrd");
      StringReader stringReader2 = new StringReader("k.lGNr a Ab");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 77, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("7,2{6Zi6sHiycrd");
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(128, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): was expecting a colon to separate field name and value
         //  at [Source: java.lang.String@0000000073; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("{jIFc0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding2);
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 31, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in FIELD_NAME
         //  at [Source: java.io.StringReader@0000000074; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.nextFieldName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '=';
      charArray0[2] = '{';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2677, (Reader) null, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 33, false);
      readerBasedJsonParser1.nextIntValue(1);
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      char[] charArray0 = new char[5];
      charArray0[0] = '=';
      charArray0[1] = 'P';
      charArray0[2] = 'c';
      charArray0[3] = '@';
      charArray0[4] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      readerBasedJsonParser0._parseAposName();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1665, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000075; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader1 = new StringReader("+Infinity");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      char[] charArray0 = new char[1];
      charArray0[0] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, 3, true);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000076; line: 2, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0._handleOddValue(43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('H' (code 72)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000077; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      stringReader0.mark(2);
      readerBasedJsonParser0.getValueAsString("H5>[,nItoR^n3![");
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(1724, "H5>[,nItoR^n3![");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): was expecting a colon to separate field name and value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000078; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0._handleOddName(120);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString("");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      StringReader stringReader1 = new StringReader(".Au]Vm)`.f");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "+Infinity", false);
      StringReader stringReader2 = new StringReader("+Infinity");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2047, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = '\f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1570), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("+Infinity");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000079; line: 1, column: 28]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(69);
      charsToNameCanonicalizer1.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 125, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextLength();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      readerBasedJsonParser0.nextLongValue(0);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '5';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 57, 1, false);
      StringWriter stringWriter0 = new StringWriter(52);
      readerBasedJsonParser1.releaseBuffered((Writer) stringWriter0);
      try { 
        readerBasedJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2216));
      charsToNameCanonicalizer1.makeChild(1908);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(1124);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("02D@P8HCOX2");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000080; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      StringReader stringReader0 = new StringReader("06rln@u#r8");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000081; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("null");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("null");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("c8z@OEYYA");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-619));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3656, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("c8z@OEYYA");
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(64, "c8z@OEYYA");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in FIELD_NAME
         //  at [Source: java.lang.String@0000000082; line: 1, column: 28]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      String string0 = " starting at ";
      StringReader stringReader0 = new StringReader(" starting at ");
      charsToNameCanonicalizer0.makeChild(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-102), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 69, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("XqRB{FYa\"n<j");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getText();
      readerBasedJsonParser0._finishString();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.Object@0000000083; line: 2, column: 25]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[4] = '!';
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 3, 1, true);
      readerBasedJsonParser0.getCurrentLocation();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, false);
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000084; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "NaN", true);
      StringReader stringReader1 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextIntValue(0);
      try { 
        readerBasedJsonParser0._matchToken("com.fasterxml.jackson.core.io.IOContext", 33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com.fasterxml.jackson.core.io.IOC': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000085; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-5638));
      StringReader stringReader1 = new StringReader("r-q^");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._decodeEscaped();
      char[] charArray0 = new char[4];
      charArray0[0] = '\r';
      charArray0[1] = '\r';
      charArray0[2] = '\r';
      charArray0[3] = '\r';
      // Undeclared exception!
      try { 
        charsToNameCanonicalizer1.findSymbol(charArray0, 33, 2, 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[9];
      charArray0[0] = '4';
      charArray0[1] = '5';
      charArray0[2] = 'E';
      charArray0[3] = '4';
      charArray0[4] = '`';
      charArray0[5] = '5';
      charArray0[6] = 'B';
      charArray0[7] = 'w';
      charArray0[8] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 73, 1109, true);
      readerBasedJsonParser0.getTextLength();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)123;
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, bufferedOutputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("' (for ");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = '+';
      charArray0[2] = '5';
      charArray0[3] = '$';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 658, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 44, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("t");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = '8';
      charArray0[2] = '\\';
      charArray0[3] = 'U';
      charArray0[4] = ',';
      charArray0[5] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-5632), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 16, (-5632), true);
      readerBasedJsonParser0.getValueAsString("D]");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000086; line: 1, column: -5628]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(" -- suspect a DoS attack based on hash collisions");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 92, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      char[] charArray0 = bufferRecycler0.allocCharBuffer(0, 92);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 777, (-478), false);
      StringReader stringReader2 = new StringReader("");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('-' (code 45)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000087; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.constructTextBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1325), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      stringReader0.close();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '6';
      charArray0[2] = '5';
      stringReader0.markSupported();
      charArray0[3] = ';';
      charArray0[4] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 48, false);
      try { 
        readerBasedJsonParser1.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000088; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "5B", false);
      StringReader stringReader1 = new StringReader("5B");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(1274);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('B' (code 66)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000089; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      iOContext0.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("\"@1ev ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1967), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      Integer integer0 = new Integer(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, integer0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.releaseBuffered((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 180, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("]#", "]#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      StringReader stringReader0 = new StringReader("Zj?z-*mG&");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = '~';
      charArray0[2] = 'n';
      charArray0[3] = '%';
      charArray0[4] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2008, false);
      readerBasedJsonParser1.getValueAsString("VzS8<G~,0~");
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(34, "ASC[J>^F");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000090; line: 2, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'c';
      charArray0[2] = ':';
      charArray0[3] = '_';
      charArray0[4] = 'D';
      charArray0[5] = '~';
      charArray0[6] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 255, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 33, false);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader1 = new StringReader("false");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(34, "BIG_INTEGER");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-323), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      char[] charArray0 = new char[3];
      charArray0[2] = '\u0000';
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.nextLongValue((-2147483648L));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextLongValue(2);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.readBinaryValue((OutputStream) byteArrayOutputStream0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character '_' (code 0x5f) in base64 content
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("UTF-8");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("UTF-8");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0);
      BufferedOutputStream bufferedOutputStream1 = new BufferedOutputStream(bufferedOutputStream0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)91;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, (OutputStream) null, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = "|!-|uC<%/";
      StringReader stringReader0 = new StringReader("|!-|uC<%/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      charArray0[3] = '.';
      charArray0[4] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 91, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 33, (-1217), true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(byteArrayOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)16;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, bufferedOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), 8, true);
      readerBasedJsonParser0.getCurrentLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l8P\"@");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-3655));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = '!';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 1, true);
      readerBasedJsonParser0.getValueAsString();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._finishString();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000091; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      charsToNameCanonicalizer1.makeChild(119);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 500, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000092; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 200, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      charArray0[4] = 'v';
      charArray0[5] = 'I';
      charArray0[6] = 'Y';
      charArray0[7] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 53, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 1, false);
      readerBasedJsonParser0.getValueAsString("2=8C/:7");
      readerBasedJsonParser0.getCurrentToken();
      readerBasedJsonParser0.loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000093; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-2926);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("3?{&");
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-2926), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString("<L??");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(4);
      char[] charArray0 = new char[8];
      charArray0[0] = '!';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '!';
      charArray0[5] = '!';
      charArray0[6] = '\"';
      charArray0[7] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, (-2233), false);
      readerBasedJsonParser0.getValueAsString();
      readerBasedJsonParser0._parseNegNumber();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 73, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2233), 3896, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2233
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1884);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("/BJ`o4L?WLLk");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000094; line: 2, column: 25]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("1nFET9");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '?';
      charArray0[2] = 'f';
      charArray0[3] = 'j';
      charArray0[4] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3180), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 9, 1, false);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 6, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('n' (code 110)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("1W>");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('W' (code 87)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000095; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      StringReader stringReader1 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1863, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("D");
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("true");
      StringReader stringReader2 = new StringReader("true");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 9, 0, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._closeInput();
      try { 
        readerBasedJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      StringReader stringReader0 = new StringReader("8wV;KD|tp#uYyBy6z+");
      charsToNameCanonicalizer0.makeChild((-1817));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("R{:)!riS@cd!");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000096; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      String string0 = "0(rln@'r8";
      StringReader stringReader1 = new StringReader("0(rln@'r8");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec1, charsToNameCanonicalizer1, charArray0, 33, 1, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000097; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer1.makeChild(1186);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("cdNE");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[0] = '0';
      charArray0[2] = '0';
      charArray0[5] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 33, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000098; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1125);
      StringReader stringReader0 = new StringReader("}Wd)kbC=_0, G");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2957), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1156, (-1478), false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -1478
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.makeChild(1092);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      charsToNameCanonicalizer2.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      StringReader stringReader0 = new StringReader("/");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3458, stringReader0, objectCodec0, charsToNameCanonicalizer3);
      readerBasedJsonParser0.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a comment
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000099; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(" -- suspect a DoS attack based on hash collisions");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 54, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextCharacters();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 203, stringReader1, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 777, (-478), true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "aqs dLbuj[:n(rNF", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-1215));
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, (-3627), stringReader1, objectCodec2, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser2.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('-' (code 45)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000100; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "i\"nv");
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-INF");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1657, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      stringReader0.reset();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000101; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-4726));
      char[] charArray0 = new char[16];
      charArray0[0] = '3';
      StringReader stringReader1 = new StringReader("/");
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 54, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 73, 6, true);
      SerializedString serializedString0 = new SerializedString("/");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000102; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("}");
      StringReader stringReader1 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: java.lang.Integer@0000000012; line: 1, column: 0])
         //  at [Source: java.lang.Integer@0000000103; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = 'I';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 73, false);
      readerBasedJsonParser0.getValueAsString();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('I' (code 73)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000104; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      StringReader stringReader0 = new StringReader("8wV;KD|tp#QuYyBy6z+");
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000105; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3430), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'n';
      charArray0[1] = '<';
      charArray0[2] = 'H';
      charArray0[3] = 'v';
      charArray0[4] = ' ';
      charArray0[5] = 'a';
      charArray0[6] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 126, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      try { 
        readerBasedJsonParser1.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("JN{Q");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'J' (code 74)
         //  at [Source: java.lang.Object@0000000106; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'H' (code 72)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000107; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-3289));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild((-2200));
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild((-361));
      charsToNameCanonicalizer3.release();
      charsToNameCanonicalizer1.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\"");
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._parseName();
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '|';
      charArray0[6] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 73, false);
      readerBasedJsonParser0.getValueAsString();
      readerBasedJsonParser0._parseName();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000108; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ng3dI]?#lO");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("ng3dI]?#lO");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "ng3dI]?#lO", true);
      char[] charArray0 = iOContext1.allocConcatBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 1091, 46, true);
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ng3dI': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000109; line: 1, column: 52]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("npame");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'npame': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000110; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader1 = new StringReader("rza!yNT9^v");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = '8';
      charArray0[2] = '\\';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2886), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 976, (-1151), false);
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000111; line: 1, column: -1149]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-4726));
      char[] charArray0 = new char[9];
      charArray0[0] = '3';
      charArray0[1] = '7';
      charArray0[2] = 'A';
      charArray0[3] = 'J';
      charArray0[4] = 'k';
      charArray0[5] = 'F';
      charArray0[6] = '7';
      charArray0[7] = '7';
      charArray0[8] = '_';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 3, (-519), true);
      try { 
        readerBasedJsonParser0.nextIntValue((-4726));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000112; line: 1, column: -517]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-341));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 86, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 86, 117, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      StringReader stringReader0 = new StringReader("thk<)Q");
      StringReader stringReader1 = new StringReader("thk<)Q");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'thk': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000113; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      StringReader stringReader0 = new StringReader("thk<)Q");
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = '_';
      charArray0[2] = 'F';
      charArray0[3] = 'J';
      charArray0[4] = 'F';
      charArray0[5] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2048, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      try { 
        readerBasedJsonParser0.nextIntValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'thk': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000114; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(52);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, (-2146), 37, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("fx*:9_R~w&|_]:");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'fx': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000115; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '*';
      charArray0[2] = '*';
      charArray0[3] = '\"';
      charArray0[4] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2022, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, 2022, false);
      readerBasedJsonParser0._finishString();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = 'I';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '|';
      charArray0[6] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 73, false);
      readerBasedJsonParser0.getValueAsString();
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._finishString();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("Decimal point not followed by a digit");
      char[] charArray0 = new char[4];
      charArray0[0] = 'q';
      charArray0[1] = 'r';
      charArray0[2] = 'q';
      charArray0[3] = 'r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-911), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1074), 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1074
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(0);
      charsToNameCanonicalizer0.makeChild((-2682));
      StringReader stringReader0 = new StringReader("0e]}");
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-770), stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 2328, 976, false);
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000116; line: 1, column: 980]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext2.setEncoding(jsonEncoding0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      char[] charArray0 = iOContext2.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("6");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 117, (-715), false);
      readerBasedJsonParser0.nextValue();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Ib\"3%guHrq#{S83");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 7, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 53, 1, false);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec2, charsToNameCanonicalizer1, charArray0, 2, 32, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000117; line: 1, column: 33]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">i_SyHmRE_*xA+T");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("&!c(~M'=IM?7J28WFw");
      char[] charArray0 = new char[1];
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "&!c(~M'=IM?7J28WFw", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]Mq4+2-yfZ:/doF*,");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      StringReader stringReader0 = new StringReader("8wV;KD|tp#uYyBy6z+");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1817));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 77, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1156, 2, false);
      StringReader stringReader1 = new StringReader("8wV;KD|tp#uYyBy6z+");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser1.getValueAsBoolean();
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000118; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-444));
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2127), stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 388, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000119; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 737, 0, true);
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0._skipString();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000120; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("\"/7&`PX_<Kz_u@0e~");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = '%';
      charArray0[2] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000121; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("8eO0.Wy1bTR-TP[A");
      char[] charArray0 = new char[1];
      charArray0[0] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 1, true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000122; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild((-2682));
      StringReader stringReader0 = new StringReader("0e]}");
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer2, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 73, stringReader0, objectCodec0, charsToNameCanonicalizer3, charArray0, 33, (-152), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000123; line: 1, column: -148]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(55296);
      StringReader stringReader0 = new StringReader("0e]}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1817), stringReader0, objectCodec0, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000124; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.close();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 91, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      charsToNameCanonicalizer2.release();
      StringReader stringReader1 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1930, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 2, 1, false);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextTextValue();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000125; line: 1, column: 31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.makeChild(1092);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      charsToNameCanonicalizer2.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer3.makeChild(117);
      StringReader stringReader0 = new StringReader("Infinity");
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '7';
      charArray0[2] = '2';
      charArray0[3] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1153), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 3839, (-2027), false);
      readerBasedJsonParser0.nextLongValue(2386L);
      readerBasedJsonParser0.nextFieldName((SerializableString) null);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      charsToNameCanonicalizer1.makeChild(2203);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("&Xw2CdA-fR@Zocl");
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._tokenIncomplete = true;
      readerBasedJsonParser0.getValueAsString("H5>[,nItoR^,n3w[");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000126; line: 2, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      StringReader stringReader1 = new StringReader(" \"p(B7^F|Tz_v{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader(" \"p(B7^F|Tz_v{");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000127; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3052);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("bN_2cm7KI3E@ev[1=e");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'N_2cm7KI3E': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000128; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("name");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("name");
      stringReader0.skip(1);
      StringReader stringReader2 = new StringReader("name");
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[2] = 'u';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader2, objectCodec0, charsToNameCanonicalizer0, charArray0, 6048, 0, false);
      readerBasedJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-31));
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("null");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0._decodeEscaped();
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0.nextIntValue(2000);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ull': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000129; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '^';
      charArray0[2] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-2131), true);
      readerBasedJsonParser1._skipCR();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", false);
      iOContext0.allocReadIOBuffer(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("8eY0.Wy1bTR-TP[Ai");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3188, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("nI']0)@");
      try { 
        readerBasedJsonParser0._parsePosNumber(3298);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('Y' (code 89)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: java.lang.String@0000000130; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2494, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1230, 123, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextLongValue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[8];
      charArray0[2] = '\u0087';
      charArray0[7] = 's';
      charArray0[4] = 's';
      charArray0[5] = '\u0087';
      charArray0[6] = '\u0087';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)38, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 68, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 64, true);
      readerBasedJsonParser0.getCurrentName();
      readerBasedJsonParser0.getValueAsString((String) null);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("q437T");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      stringReader0.mark(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 125, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      stringReader0.close();
      try { 
        readerBasedJsonParser0._handleOddName(2332);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader(" starting at ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader(".`ITl.StE,WXHIs1.CH");
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._parsePosNumber(143);
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader2 = new StringReader(" starting at ");
      char[] charArray0 = new char[4];
      charArray0[0] = 'u';
      charArray0[1] = 'B';
      charArray0[2] = '6';
      charArray0[3] = '^';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 97, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 44, (-2249), false);
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000131; line: 1, column: -2234]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 64, true);
      readerBasedJsonParser0.getCurrentName();
      readerBasedJsonParser0.getValueAsString((String) null);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000132; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "A", true);
      String string0 = "ALLOW_YAML_COMMENTS";
      StringReader stringReader0 = new StringReader("ALLOW_YAML_COMMENTS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(125);
      char[] charArray0 = new char[8];
      charsToNameCanonicalizer0.makeChild(33);
      charArray0[0] = '9';
      charArray0[1] = '(';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '\u0012';
      charArray0[5] = '(';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      charArray0[7] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 33, true);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 18)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000133; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      StringReader stringReader0 = new StringReader("Zj?z-*mG&");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 0, true);
      readerBasedJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("i_f27~N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-254));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 184, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 78, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 184, 3, true);
      int int0 = 43;
      try { 
        readerBasedJsonParser1._matchToken("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING", 40);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(119);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-323), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      SerializedString serializedString0 = new SerializedString("+=sh17BYr%V4XC[");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-321), stringReader0, objectCodec1, charsToNameCanonicalizer2, charArray0, 1068, 9, false);
      readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._matchToken("NaN", 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(55296);
      StringReader stringReader0 = new StringReader("0e]}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1863, stringReader0, objectCodec0, charsToNameCanonicalizer2);
      readerBasedJsonParser0._decodeEscaped();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000134; line: 1, column: 31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("k.lGTNr a Ab");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(97);
      char[] charArray0 = new char[6];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2229, 2, true);
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000135; line: 1, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("f9");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'E';
      charArray0[1] = '|';
      charArray0[2] = '[';
      charArray0[3] = '<';
      charArray0[4] = 'I';
      charArray0[5] = 'u';
      charArray0[6] = '-';
      charArray0[7] = 'U';
      charArray0[8] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      readerBasedJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("fx*:9_R~w&|_]:");
      charsToNameCanonicalizer1.release();
      charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("5b1$#0X6v<?MnL'EgjG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("5b1$#0X6v<?MnL'EgjG");
      stringReader1.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild((-444));
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('b' (code 98)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000136; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("!{|`|}Fa^^I0 ");
      StringReader stringReader1 = new StringReader("wt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2455, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(55296);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 73;
      StringReader stringReader0 = new StringReader("0e]}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '\"';
      charArray0[6] = '|';
      int int1 = 33;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer2);
      SerializedString serializedString0 = new SerializedString("n%Xp{Dv0:\"ZS_g}]w");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000137; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      StringReader stringReader0 = new StringReader("0eUaYig");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1988), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('U' (code 85)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: java.lang.String@0000000138; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding2);
      StringReader stringReader0 = new StringReader("NaN");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-205));
      charsToNameCanonicalizer1.makeChild((-204));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(347);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 347, stringReader0, objectCodec0, charsToNameCanonicalizer3);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextToken();
      System.setCurrentTimeMillis(1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 398, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 737, 0, true);
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0._skipString();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000139; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(65);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(1536);
      charsToNameCanonicalizer1.makeChild(91);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer2.makeChild(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer3);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getCurrentToken();
      System.setCurrentTimeMillis(3);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000140; line: 2, column: 183]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "2.2250738585072012e-30*";
      StringReader stringReader0 = new StringReader("2.2250738585072012e-30*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2825, 2825, false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000141; line: 1, column: 2849]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-3233));
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("0e]}");
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer3, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      charArray0[8] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 1, (-1979), false);
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000142; line: 1, column: -1975]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(55296);
      StringReader stringReader0 = new StringReader("0e]}");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '\"';
      charArray0[6] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 73, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 1, true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000143; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[4] = '!';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, false);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000144; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[3];
      charArray0[1] = '\u0000';
      charArray0[2] = '\f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 45, false);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(39, "+Infinity");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000145; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l8P\"@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-2850));
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2760, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-3183), 1, true);
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: java.lang.String@0000000146; line: 1, column: -3182]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer(2760);
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("true");
      charsToNameCanonicalizer1.makeChild(51);
      StringReader stringReader2 = new StringReader("true");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader2, objectCodec0, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      stringReader0.mark(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '\u0014';
      charArray0[1] = 'g';
      charArray0[2] = '\u0014';
      charArray0[3] = 'g';
      charArray0[4] = '2';
      charArray0[5] = 'g';
      charArray0[6] = '\u0014';
      charArray0[7] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 1, (-2140), true);
      readerBasedJsonParser0._skipCR();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1446), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 64, (-3214), true);
      try { 
        readerBasedJsonParser1._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[1] = 'P';
      stringReader0.skip((-2063L));
      charArray0[2] = 'P';
      charArray0[3] = '&';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000147; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = '7';
      stringReader0.markSupported();
      charArray0[7] = 'G';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (byte)38, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 56, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("name");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(48);
      StringReader stringReader1 = new StringReader("name");
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader1, true);
      StringReader stringReader2 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, (-2179), 1, true);
      readerBasedJsonParser1.getValueAsString("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      readerBasedJsonParser0._handleApos();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser1.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(" -- suspect a DoS attack based on hash collisions");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 54, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextCharacters();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 203, stringReader1, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 777, (-478), true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec2, charsToNameCanonicalizer0, (char[]) null, 0, 2815, false);
      readerBasedJsonParser2.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextIntValue(336);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('-' (code 45)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000148; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '$';
      charArray0[1] = 'L';
      charArray0[2] = '[';
      charArray0[3] = 'a';
      charArray0[4] = '(';
      charArray0[5] = '\\';
      stringReader0.read(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1246, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('V' (code 86)) in numeric value: Decimal point not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000149; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1191));
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3096, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("nI']0)@");
      try { 
        readerBasedJsonParser0._parsePosNumber(538);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000150; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._parsePosNumber(91);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000151; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      charsToNameCanonicalizer2.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(3);
      StringReader stringReader0 = new StringReader("0e]}");
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 114, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer3);
      readerBasedJsonParser0._decodeEscaped();
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parsePosNumber(1107);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000152; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("I");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(52);
      StringReader stringReader1 = new StringReader("true");
      CharsToNameCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer(1929);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-4255));
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 111, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader(" starting at ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader(".`ITl.StE,WXHIs1.CH");
      char[] charArray0 = new char[1];
      charArray0[0] = '_';
      readerBasedJsonParser0._inputBuffer = charArray0;
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getTextCharacters();
      readerBasedJsonParser0.getValueAsString(" starting at ");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'starting': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000153; line: 2, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{# V9;891.PymD7");
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, false);
      iOContext1.allocWriteEncodingBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 85, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for OBJECT (from [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 1])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000154; line: 1, column: 46]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 9, 0, true);
      readerBasedJsonParser0._parseAposName();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000155; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = '8';
      charArray0[2] = '6';
      charArray0[3] = '\"';
      charArray0[4] = '!';
      charArray0[5] = '|';
      charArray0[6] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 73, false);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000156; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(387);
      StringReader stringReader0 = new StringReader("_!D/9");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1455, (-1049), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.loadMore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-272));
      iOContext1.constructTextBuffer();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-503), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000157; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("] 3g(6${q]35u=ZRv?");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-785), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, (-1), 102, true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000158; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("name");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.reset();
      charsToNameCanonicalizer0.makeChild((-444));
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'name': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000159; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-250), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._finishString2();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      StringWriter stringWriter0 = new StringWriter(33);
      StringBuilder stringBuilder0 = new StringBuilder(33);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(16, (-1.0F));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 16
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(718);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 718, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._finishString2();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000160; line: 1, column: 123]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Infinity");
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1767);
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-4), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1010, (-1826), false);
      readerBasedJsonParser0._parseNegNumber();
      readerBasedJsonParser0.getValueAsString("ALLOW_NON_NUMERIC_NUMBERS");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("I");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(52);
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '\"';
      charArray0[2] = '8';
      charArray0[3] = '|';
      charArray0[4] = '!';
      charArray0[5] = '8';
      charArray0[6] = '!';
      charArray0[7] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 42, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 49, (-2736), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a value
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000161; line: 1, column: -2733]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer(2760);
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getValueAsString();
      readerBasedJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2252), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 785, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, true);
      StringReader stringReader1 = new StringReader("Dv[il[(t");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser1.getValueAsString("[]sL^{ZC.n{X++n");
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.json.ReaderBasedJsonParser@0000000162; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 9, 0, true);
      readerBasedJsonParser0._parseAposName();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000163; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(93);
      StringReader stringReader0 = new StringReader("+Infinity");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      charArray0[5] = '9';
      charArray0[6] = '9';
      charArray0[7] = '9';
      StringWriter stringWriter0 = new StringWriter();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "f?&Xr]-&<_x", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 57, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 93, (-3893), false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: java.lang.String@0000000164; line: 1, column: -3882]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Ib\"3%guHrq#{S83");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = ')';
      charArray0[3] = 'd';
      charArray0[4] = ' ';
      charArray0[5] = ')';
      charArray0[6] = 'I';
      charArray0[7] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-1057), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 40, 26, false);
      readerBasedJsonParser1._decodeEscaped();
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('H' (code 72)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000165; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 165, 3, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(33);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      IOContext iOContext1 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[1] = '|';
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2949), stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("[]sL^{ZC.n{X++n");
      readerBasedJsonParser0.getCurrentToken();
      readerBasedJsonParser0.loadMore();
      readerBasedJsonParser0.getValueAsString("OH^h#uPS1F");
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("null");
      StringReader stringReader1 = new StringReader("null");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-535));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader1, objectCodec0, charsToNameCanonicalizer2);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextToken();
      System.setCurrentTimeMillis((-535));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(172);
      String string0 = " starting at ";
      StringReader stringReader0 = new StringReader(" starting at ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(58);
      char[] charArray0 = new char[7];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'r';
      charArray0[6] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 10, 1, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(718);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(15);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer1.makeChild(50);
      charsToNameCanonicalizer0.makeChild(33);
      CharsToNameCanonicalizer charsToNameCanonicalizer4 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer3.makeChild((-1763));
      CharsToNameCanonicalizer charsToNameCanonicalizer5 = charsToNameCanonicalizer2.makeChild(740);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Ndd5`}#5lI4v'");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer4);
      readerBasedJsonParser0._skipCR();
      CharsToNameCanonicalizer charsToNameCanonicalizer6 = charsToNameCanonicalizer5.makeChild(0);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer6, charArray0, 4, (-982), false);
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -982
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("3J;rRwY=L&u4~:AdnOJ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'N';
      charArray0[1] = '7';
      charArray0[2] = 'a';
      charArray0[3] = '7';
      charArray0[4] = 'x';
      charArray0[5] = '(';
      charArray0[6] = 's';
      charArray0[7] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
      try { 
        readerBasedJsonParser0.nextIntValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('J' (code 74)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000166; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("[]sL^{ZC.n{X++n");
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      iOContext3.allocConcatBuffer();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext3.withEncoding(jsonEncoding2);
      IOContext iOContext4 = new IOContext(bufferRecycler0, "[]sL^{ZC.n{X++n", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext4, 15, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("[]sL^{ZC.n{X++n");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      iOContext2.allocConcatBuffer();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding2);
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext3, 15, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'X';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 238, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3, true);
      try { 
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.lang.String@0000000167; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, ";%[JLi+t", false);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getNextChar(";%[JLi+t");
      readerBasedJsonParser0.loadMore();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "|!-|uC<%/";
      StringReader stringReader0 = new StringReader("|!-|uC<%/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.allocReadIOBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      readerBasedJsonParser0._getText2(jsonToken0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('|' (code 124)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000168; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      String string0 = "1O5VOH117}\\u,";
      StringReader stringReader0 = new StringReader(string0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      readerBasedJsonParser0._getText2(jsonToken0);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000169; line: 1, column: 14]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.makeChild(3);
      iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 43, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'H';
      charArray0[2] = '&';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1231, 110, true);
      try { 
        readerBasedJsonParser1.loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      int int0 = 119;
      charsToNameCanonicalizer1.makeChild(119);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-323), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'n';
      charArray0[2] = 'G';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec1, charsToNameCanonicalizer2, charArray0, 0, 3, false);
      readerBasedJsonParser1.getValueAsString("false");
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser1.loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      StringReader stringReader1 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'z';
      charArray0[2] = 'o';
      charArray0[3] = '<';
      charArray0[4] = 'J';
      charArray0[5] = '\"';
      charArray0[6] = '@';
      charArray0[7] = 'u';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1915, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 32, 0, false);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 25]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[8];
      charArray0[2] = '\u0087';
      charArray0[7] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-3446), 0, true);
      CharsToNameCanonicalizer.createRoot();
      readerBasedJsonParser0.getValueAsString("7u@ww j68bTy7O");
      readerBasedJsonParser0.getCurrentToken();
      readerBasedJsonParser0.loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000170; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]Mq4+2-yfZ:/doF*,");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      StringReader stringReader0 = new StringReader("]Mq4+2-yfZ:/doF*,");
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[1] = '\"';
      charArray0[2] = 'a';
      charArray0[3] = '8';
      charArray0[4] = '\"';
      charArray0[5] = '!';
      charArray0[6] = 'h';
      charArray0[7] = '\"';
      charArray0[8] = '8';
      int int0 = 39;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-31), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 39, false);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000171; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(718);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(15);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Malformed numeric value '");
      char[] charArray0 = new char[5];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 1014, true);
      readerBasedJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.loadMore();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(16);
      charsToNameCanonicalizer1.makeChild(1);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000172; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "|!-|uC<%/";
      StringReader stringReader0 = new StringReader("|!-|uC<%/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = '|';
      charArray0[3] = '|';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1908, 33, true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      readerBasedJsonParser0.getValueAsString("|!-|uC<%/");
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000173; line: 1, column: 44]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0._parsePosNumber(2048);
      SerializedString serializedString0 = new SerializedString("{# V9;891.PymD7");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000174; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("{O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      charsToNameCanonicalizer1.makeChild(0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0._parsePosNumber(3);
      readerBasedJsonParser0.getValueAsString("");
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000175; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-Infinity", true);
      StringReader stringReader0 = new StringReader(",.(%X+sd) rz >c");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.release();
      StringReader stringReader1 = new StringReader("-Infinity");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild((-1940));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: java.lang.String@0000000176; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1491), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-1492));
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = ' ';
      charArray0[5] = ')';
      charArray0[6] = ' ';
      charArray0[7] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1491), stringReader0, objectCodec1, charsToNameCanonicalizer2, charArray0, 3246, 1, true);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000177; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{# V9;891.PymD7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000178; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("{O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      charsToNameCanonicalizer1.makeChild(0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000179; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("}");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 37, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 2749, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("Non-standard token '", "Non-standard token '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 31, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCodec();
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000180; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{a<l|sU[7jx<\"Gjs");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-897));
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 47, (-2034), false);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      charArray0[1] = '|';
      charArray0[2] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2252), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, '|', true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextFieldName();
      try { 
        readerBasedJsonParser1._isNextTokenNameMaybe(33, "' (code 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.constructTextBuffer();
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[4];
      charArray0[0] = '\u0012';
      charArray0[1] = '\u0012';
      charArray0[2] = '\u0012';
      charArray0[3] = '\u0012';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 51, 33, false);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2112));
      charsToNameCanonicalizer1.makeChild(1031);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext2.withEncoding(jsonEncoding1);
      StringReader stringReader1 = new StringReader("expected a digit for number exponent");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 33, stringReader1, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser1._skipCR();
      String string0 = null;
      readerBasedJsonParser1.getValueAsString((String) null);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'expected': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a comment
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000181; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(718);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(15);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 11, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 42, 0, true);
      readerBasedJsonParser0._parseAposName();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting either '*' or '/' for a comment
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000182; line: 1, column: 59]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      TextBuffer textBuffer0 = iOContext0.constructTextBuffer();
      IOContext iOContext1 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(textBuffer0).when(iOContext1).constructTextBuffer();
      StringReader stringReader0 = new StringReader("[]sL^{ZC.n{X++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[1] = '|';
      charArray0[2] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2252), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 785, true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext3, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser1.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Infinity");
      StringReader stringReader1 = new StringReader("{O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      charsToNameCanonicalizer1.makeChild(0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("I_}0DYrnr?Gg|");
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextLength();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(" (version: ", "Infinity", true, '3', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 8)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("I");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(52);
      charsToNameCanonicalizer0.makeChild(425);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = 'a';
      charArray0[2] = '8';
      charArray0[3] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-520), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-2475), 574, true);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2475
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(2);
      charsToNameCanonicalizer2.makeChild(1);
      StringReader stringReader0 = new StringReader(":x?b");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild(56);
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'j';
      charArray0[2] = 'C';
      charArray0[3] = '7';
      charArray0[4] = 'W';
      charArray0[5] = '%';
      charArray0[6] = 'C';
      charArray0[7] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer3, charArray0, 33, 56, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-31));
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(29);
      charsToNameCanonicalizer1.makeChild(1834);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("2=8C/:7");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 57, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("c^kh@@Q@#vg");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000183; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      charArray0[1] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 875, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 1, true);
      readerBasedJsonParser0._handleOddName(98);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      char[] charArray0 = iOContext2.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("NaN");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 117, (-715), true);
      try { 
        readerBasedJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000184; line: 1, column: -708]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("NaN");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer1.makeChild(0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext2.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("I_}0DYrnr?Gg|");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000185; line: 2, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000186; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      StringReader stringReader1 = new StringReader("com.fasterxml.jackson.core.JsonToken");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 942, false);
      readerBasedJsonParser1.getValueAsString("com.fasterxml.jackson.core.JsonToken");
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(55);
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 64, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0._getText2(jsonToken0);
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      readerBasedJsonParser0._getText2(jsonToken1);
      try { 
        readerBasedJsonParser0._parsePosNumber((-1431));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000187; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'J';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'o';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      JsonToken jsonToken1 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0._getText2(jsonToken1);
      readerBasedJsonParser0._getText2(jsonToken0);
      try { 
        readerBasedJsonParser0._parsePosNumber(47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000188; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.release();
      String string0 = "Current token (";
      StringReader stringReader0 = new StringReader("Current token (");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2021), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      StringReader stringReader1 = new StringReader(") not VALUE_STRING or VALUE_>MBEDDED_OBJECT, can not access as binay");
      int int0 = (-3088);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 58, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, (-3088), (-4102), true);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 58, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 54, 0, true);
      String string1 = " at ";
      SerializedString serializedString0 = new SerializedString("7V7ma5h=]Lh*^O");
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      String string0 = "68q ?]Mo_hvcwp";
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-32768));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('q' (code 113)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000189; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("H>*[,nItoR^n![");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(959);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 51, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2411, 3, true);
      try { 
        readerBasedJsonParser0._reportInvalidToken(":d");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.constructTextBuffer();
      StringReader stringReader1 = new StringReader("7,2{6Zi6sHiycrd");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader2 = new StringReader("]hHFAaR9W5@\"QcSi");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 256, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("4l[@");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: java.lang.String@0000000010; line: 1, column: 0])
         //  at [Source: java.lang.String@0000000190; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charsToNameCanonicalizer0.makeChild(93);
      charArray0[0] = '[';
      stringReader0.read(charArray0);
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-468));
      int int0 = 45;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-468), stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 45, 45, true);
      readerBasedJsonParser0._releaseBuffers();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Pie'uZQr6wk:", "", true, 'k', 33);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("i_f27~N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3890), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getTextCharacters();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 2, true);
      readerBasedJsonParser1.nextLongValue(0L);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000191; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" at ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = 'z';
      charArray0[2] = 'P';
      charArray0[3] = 'N';
      charArray0[4] = '9';
      charArray0[5] = 'y';
      charArray0[6] = '=';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 65536, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 500, 1, true);
      readerBasedJsonParser0._matchToken(" at ", 0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec1 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('T');
      char[] charArray0 = new char[4];
      charArray0[3] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      stringWriter0.write(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      readerBasedJsonParser1.releaseBuffered((Writer) stringWriter0);
      try { 
        readerBasedJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000192; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "68q ?]Mo_hvcwp";
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(63);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      charArray0[2] = '0';
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, charsToNameCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("68q ?]Mo_hvcwp");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('q' (code 113)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000193; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "6\"#Umc_5;[r,E;}", true);
      StringReader stringReader0 = new StringReader("6\"#Umc_5;[r,E;}");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000194; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = '2';
      charArray0[1] = '4';
      charArray0[2] = 'I';
      charArray0[3] = '4';
      charArray0[4] = 'j';
      charArray0[5] = 'u';
      charArray0[6] = 'v';
      charArray0[7] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-647), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 5, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('4' (code 52)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000195; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(718);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(15);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 3, 3, true);
      readerBasedJsonParser0.getTextCharacters();
      StringReader stringReader1 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-100), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '-Invalid': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000196; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Ib\"3%guHrq#{S83");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ' ';
      charArray0[5] = ')';
      charArray0[6] = 'I';
      charArray0[7] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-1057), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 40, 26, false);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('b' (code 98)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000197; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 771, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getNextChar("4l[@");
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "+";
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("d=j]JY3'B_1c@E!{ ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 43, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      SerializedString serializedString0 = new SerializedString("d=j]JY3'B_1c@E!{ ");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'd': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000198; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      stringReader0.close();
      charsToNameCanonicalizer1.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      charsToNameCanonicalizer1.makeChild(33);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-409), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(50);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer2.makeChild(96);
      charsToNameCanonicalizer0.release();
      charsToNameCanonicalizer3.makeChild(15);
      StringReader stringReader0 = new StringReader("tj1a N1Ep");
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 32, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._decodeEscaped();
      StringReader stringReader1 = new StringReader("expected digit (0-9) to follow minus sign, for valid numeric value");
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("");
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: UNKNOWN; line: 2, column: 18]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("!{|`|}Fa^^I0 ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      SerializedString serializedString0 = new SerializedString("1Kw@6&X*");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000199; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(93);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, (-33), false);
      readerBasedJsonParser0.getValueAsBoolean(false);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      readerBasedJsonParser0._getText2(jsonToken0);
      try { 
        readerBasedJsonParser0._parsePosNumber(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000200; line: 1, column: -33]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, true);
      readerBasedJsonParser0._parseAposName();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken((String) null, (-2573));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      doReturn((Object) null).when(iOContext0).getSourceReference();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 650, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      readerBasedJsonParser0._tokenIncomplete = false;
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2679), 40, true);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('A' (code 65)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Infinity");
      StringReader stringReader1 = new StringReader("{O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      charsToNameCanonicalizer0.makeChild((-474));
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 663, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 69, 2, true);
      readerBasedJsonParser0.getCodec();
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000201; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("");
      readerBasedJsonParser0._skipCR();
      StringReader stringReader2 = new StringReader("IakT\"9{B1r58");
      stringReader2.skip(0L);
      readerBasedJsonParser0.getValueAsString("$!T&O+t");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 89, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 89, 3, true);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 116, (-312), true);
      readerBasedJsonParser0.getValueAsString("?\";I");
      try { 
        readerBasedJsonParser0._parsePosNumber(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000202; line: 1, column: -310]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3591);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 34, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("Failed copy(): ");
      readerBasedJsonParser0._handleApos();
      try { 
        readerBasedJsonParser0._parsePosNumber(1510);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): Expected space separating root-level values
         //  at [Source: java.io.StringReader@0000000203; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      iOContext1.allocWriteEncodingBuffer(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 570, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 262133, false);
      int int0 = 48;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 7, 1, false);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000204; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("");
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      char[] charArray1 = new char[1];
      charArray1[0] = 'T';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray1, 266, 73, false);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000205; line: 1, column: 76]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 693, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      readerBasedJsonParser0._getText2(jsonToken0);
      JsonToken jsonToken1 = JsonToken.END_ARRAY;
      readerBasedJsonParser0._getText2(jsonToken1);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(55);
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = '%';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '(';
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec1).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(56);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 3, 1294, true);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000206; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      StringReader stringReader0 = new StringReader("Non-standard token ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2037), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 33, true);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("Non-standard token ");
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Non': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      charsToNameCanonicalizer0.release();
      StringReader stringReader1 = new StringReader("");
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1133, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Non': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000207; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("[]s^{ZgC.n{I++n");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer0.makeChild(626);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 2286, 2286, false);
      readerBasedJsonParser0.nextLongValue((-2182L));
      readerBasedJsonParser0.nextFieldName((SerializableString) null);
      try { 
        readerBasedJsonParser0._reportInvalidToken("Internal error: total len assumed to be ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Internal error: total len assumed to be s': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000208; line: 1, column: 2290]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-1493), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 36, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.getTextLength();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-1493));
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-1493), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(75);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Non-standard token '");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3799, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: java.lang.String@0000000209; line: 1, column: 41]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2393, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[3];
      charArray1[0] = 'Q';
      charArray1[1] = 'P';
      charArray1[2] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray1, 48, 1068, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("D7!");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, (-1029), false);
      readerBasedJsonParser0.getCurrentValue();
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-707), (-2887), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -2887
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.makeChild((-4406));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding2);
      JsonEncoding jsonEncoding3 = JsonEncoding.UTF16_LE;
      iOContext3.withEncoding(jsonEncoding3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000210; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      StringReader stringReader0 = new StringReader("8wV;KD|tp#uYyBy6z+");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 92, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextLongValue(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      charsToNameCanonicalizer1.makeChild(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 733;
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = ' ';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = '';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 733, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 32, 32, false);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000211; line: 1, column: 99]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      stringReader0.reset();
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-3830), (-3830), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._reportInvalidToken("$Fv0T;A#K8..|q", "`whrk@");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '$Fv0T;A#K8..|q7u': was expecting `whrk@
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000212; line: 1, column: -3827]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'D';
      charArray0[2] = '2';
      charArray0[3] = 'B';
      charArray0[4] = 'y';
      charArray0[5] = 'T';
      charArray0[6] = ';';
      charArray0[7] = 'N';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.read();
      StringReader stringReader1 = new StringReader("\"Ofi_SyHmR[_*xA+T");
      char[] charArray1 = new char[9];
      StringReader stringReader2 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0, charArray1, 0, 116, false);
      readerBasedJsonParser0._nameStartRow = 3;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(4530, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[1] = 'q';
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 3, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(537);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1364), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 33, true);
      readerBasedJsonParser0.getText();
      readerBasedJsonParser1._handleOddName(1000);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'i';
      charArray0[0] = '5';
      charArray0[3] = '+';
      charArray0[4] = 'u';
      charArray0[5] = '+';
      charArray0[6] = '?';
      charArray0[7] = '?';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 15, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(1061, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = ' ';
      charArray0[3] = ' ';
      charArray0[4] = 'j';
      charArray0[5] = 'I';
      charArray0[6] = 'B';
      charArray0[7] = 'j';
      charArray0[8] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1093), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1012, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'II': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000213; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3591);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000214; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 110, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 110, (-1026), true);
      StringReader stringReader1 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 91, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1026), 3, false);
      readerBasedJsonParser1.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextIntValue('e');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000215; line: 1, column: -1024]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      iOContext1.allocWriteEncodingBuffer(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 570, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 262133, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3915, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getTokenLocation();
      readerBasedJsonParser1.nextIntValue((-2605));
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "{O";
      StringReader stringReader0 = new StringReader("{O");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(40);
      charsToNameCanonicalizer0.release();
      StringReader stringReader1 = new StringReader("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = '<';
      charArray0[2] = 'K';
      charArray0[3] = 'z';
      charArray0[4] = ':';
      charArray0[5] = '>';
      charArray0[0] = 'u';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2), 10, true);
      readerBasedJsonParser0.nextValue();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._finishString2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader(")r>7/4FmY%&PCn");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      charsToNameCanonicalizer0.release();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("true");
      charsToNameCanonicalizer1.makeChild(2573);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")r>7/4FmY%&PCn");
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(")3#");
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader3 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.setCodec(objectCodec1);
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 650, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.constructTextBuffer();
      IOContext iOContext3 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("#U");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader2 = new StringReader("]hHFAaR9W5@\"QcSi");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(123);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("]?BzH6uX]Ab[j~6");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('o');
      IOContext iOContext1 = new IOContext(bufferRecycler0, readerBasedJsonParser0, true);
      iOContext1.allocWriteEncodingBuffer((-3297));
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = 'o';
      charArray0[2] = '_';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-2995), true);
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.json.ReaderBasedJsonParser@0000000004; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.json.ReaderBasedJsonParser@0000000216; line: 1, column: -2993]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(1);
      StringReader stringReader0 = new StringReader(" starting at ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      StringReader stringReader1 = new StringReader("");
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("=k/0!oDJR]y%rnxv");
      char[] charArray0 = new char[3];
      charArray0[0] = 'u';
      charArray0[1] = 'e';
      charArray0[2] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 7, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 5812, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = '\u0081';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '';
      iOContext1.allocBase64Buffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1565, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1444, 33, false);
      readerBasedJsonParser0.nextBooleanValue();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("", 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("9r9e");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      iOContext1.allocWriteEncodingBuffer(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 104, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 104, 32, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000217; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("ALLOW_YAML_COMMENTS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(46);
      charsToNameCanonicalizer1.makeChild(125);
      char[] charArray0 = new char[8];
      charArray0[0] = '9';
      charArray0[1] = '(';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '%';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 33, true);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000218; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("I");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(28);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[5];
      charArray0[2] = 'l';
      charArray0[1] = '';
      charArray0[2] = 'l';
      charArray0[3] = '';
      charArray0[4] = '';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 110, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 2895, true);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextIntValue(114);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000219; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("name");
      stringReader0.skip(1063L);
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2417, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-1885), true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -1885
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("/~v`dL-FWY9;V+vn+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(57);
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1470), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3960, 1950, false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): was expecting either '*' or '/' for a comment
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000220; line: 1, column: 1953]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      stringWriter1.write(charArray0);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer(2);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 128, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000221; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(200);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 73, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, (-347), 2, false);
      readerBasedJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -347
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '\'';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 32, 0, false);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.nextIntValue(16);
      iOContext1.allocTokenBuffer();
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.nextIntValue((-2403));
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer1.release();
      charsToNameCanonicalizer1.makeChild(32);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "NaN", false);
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("m6)X+# .T9T");
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = 'U';
      charArray0[2] = 'H';
      charArray0[3] = 'd';
      charArray0[4] = ' ';
      charArray0[5] = 'i';
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-127), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("Current token (", 57);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l8P\"@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn("").when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'q';
      charArray0[2] = 'E';
      charArray0[3] = 'B';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.getCodec();
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000222; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.release();
      StringReader stringReader0 = new StringReader("Current token (");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2021), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      StringReader stringReader1 = new StringReader(") not VALUE_STRING or VALUE_>MBEDDED_OBJECT, can not access as binay");
      int int0 = (-3088);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 58, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, (-3088), (-4102), true);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 58, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 54, 0, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2._skipCR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(32);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.nextLongValue(0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1093), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      StringReader stringReader1 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[7];
      charArray0[0] = 'z';
      charArray0[1] = '3';
      charArray0[2] = 'f';
      charArray0[3] = 'V';
      charArray0[4] = 'w';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 82, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 3, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 13, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader1 = new StringReader("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 65, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1._skipCR();
      readerBasedJsonParser0.getValueAsString("7u@ww j68bTy7O");
      readerBasedJsonParser1.getText();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '';
      iOContext1.allocBase64Buffer();
      iOContext1.allocWriteEncodingBuffer(289);
      charArray0[5] = '{';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 8000, 2, false);
      readerBasedJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(7);
      charsToNameCanonicalizer1.release();
      charsToNameCanonicalizer1.makeChild((-2180));
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 10, 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      iOContext0.allocWriteEncodingBuffer(135);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCodec();
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0._closeInput();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer(3);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer1, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(33);
      char[] charArray1 = new char[5];
      charArray1[0] = '`';
      charArray1[1] = '`';
      charArray1[2] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3112, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray1, 3, 595, true);
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000223; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("9r9e");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      iOContext1.allocWriteEncodingBuffer(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3809), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 262133, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, 34, true);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000224; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      charsToNameCanonicalizer1.makeChild(33);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2561), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("");
      readerBasedJsonParser0._handleApos();
      try { 
        readerBasedJsonParser0.nextLongValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000225; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-272), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextLongValue(3);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("US-ASCII");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      charsToNameCanonicalizer0.makeChild(403);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      charArray0[3] = 'P';
      charArray0[4] = '+';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1320), stringReader0, objectCodec1, charsToNameCanonicalizer2);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0.nextLongValue(9223372036854775807L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'US': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000226; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 712, 4448, false);
      readerBasedJsonParser0.getTextLength();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000227; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(2);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Egs(q+ljW/9a");
      char[] charArray0 = new char[5];
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 1010, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000228; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("US-ASCII");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(403);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      char[] charArray0 = new char[7];
      charArray0[0] = '3';
      charArray0[1] = 'P';
      charArray0[2] = 'F';
      charArray0[3] = 'P';
      charArray0[4] = '+';
      charArray0[5] = '+';
      charArray0[6] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 5078, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 33, false);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('P' (code 80)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000229; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(9);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3075), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 65536, 4, false);
      readerBasedJsonParser0.getTextLength();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('+' (code 43)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000230; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(69);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'o';
      charArray0[2] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 4000, 33, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (' ' (code 32)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000231; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(15);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Malformed numeric value '");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[5];
      StringReader stringReader1 = new StringReader("+Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader("+Infinity");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer3);
      readerBasedJsonParser0._skipCR();
      SerializedString serializedString0 = new SerializedString("Malformed numeric value '");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000232; line: 2, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(")3#");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString(")3#");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      serializedString0.writeQuotedUTF8(filterOutputStream0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      iOContext0.allocWriteEncodingBuffer(3);
      char[] charArray1 = new char[7];
      charArray1[0] = '{';
      charArray1[1] = '{';
      charArray1[2] = 'k';
      charArray1[3] = '+';
      charArray1[4] = '+';
      charArray1[5] = 'V';
      charArray1[6] = '{';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 561, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray1, 3, 33, false);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('+' (code 43)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000233; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charArray0[5] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = (-1093);
      charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      int int1 = (-2605);
      int int2 = 91;
      boolean boolean0 = true;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("2=8C/:7");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec1).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec1).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 1116, 33, true);
      readerBasedJsonParser0.readValueAsTree();
      String string0 = "";
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:A7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'q';
      charArray0[2] = '6';
      charArray0[3] = 'B';
      charArray0[4] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("KhU:uQ_\"8");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000234; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      iOContext1.allocWriteEncodingBuffer(2760);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 570, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 262133, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec1).toString();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3915, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getCodec();
      readerBasedJsonParser1.nextFieldName();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000235; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(172);
      StringReader stringReader0 = new StringReader(" starting at ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2732), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      StringReader stringReader1 = new StringReader("was expecting a colon to separate field name and value");
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (' ' (code 32)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000236; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("true");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-63));
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 66, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'l';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-268), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 0, true);
      readerBasedJsonParser1._skipCR();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer2.makeChild(66);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, (-268), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer3, charArray0, 72, 2, false);
      readerBasedJsonParser2.nextFieldName();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextIntValue((-236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("x7E]+^pA8OWc|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'S';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1186, 2, true);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      readerBasedJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      boolean boolean0 = true;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, "6POtj:[", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("j;`hpsT");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-3064));
      char[] charArray0 = new char[5];
      charArray0[0] = 'M';
      charArray0[1] = ')';
      charArray0[2] = 'z';
      charArray0[3] = 'n';
      charArray0[4] = 'I';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3064), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-848), 75, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("j;`hpsT");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -848
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      char[] charArray0 = new char[1];
      StringReader stringReader0 = new StringReader("8wV;KD|tp#uYyBy6z+");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1769, 1156, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(48, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("DOUBLE");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 2, 2, false);
      readerBasedJsonParser0.getValueAsString("DOUBLE");
      int int0 = 424;
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, (-2030), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 424, 3, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(")3#");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      stringReader0.reset();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("=PlYF[sOB y_jG~");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1503);
      char[] charArray0 = new char[5];
      charArray0[0] = 'n';
      charArray0[1] = 'U';
      charArray0[2] = 'i';
      charArray0[3] = ';';
      charArray0[4] = 'n';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1547, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, 1, false);
      readerBasedJsonParser0.getValueAsString("");
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-498), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1843), (-1354), false);
      readerBasedJsonParser0.getValueAsString("No digit following minus sign");
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      char[] charArray0 = iOContext2.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("NaN");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2584), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-392), 45, false);
      SerializedString serializedString0 = new SerializedString("NaN");
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -392
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringReader stringReader0 = new StringReader("]d6cf/4.V=:}");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-272));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      long long0 = readerBasedJsonParser0._nameStartOffset;
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '~';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 104, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 200, 0, false);
      SerializedString serializedString0 = new SerializedString("]d6cf/4.V=:}");
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.io.IOContext@0000000002; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000237; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '';
      SerializedString serializedString0 = new SerializedString("Dl^-]<Ir[s[;se");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      serializedString0.writeQuotedUTF8(byteArrayBuilder0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-394), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 45, 101, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      String string0 = "7u@ww j68bTy7O";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[2] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[8];
      charArray0[0] = 'y';
      charArray0[2] = 'j';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      SerializedString serializedString0 = new SerializedString("c,=}y2= II`:I{eCt%");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000238; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer1.makeChild(0);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer2, false);
      char[] charArray0 = new char[3];
      charArray0[0] = '}';
      charArray0[1] = '`';
      charArray0[2] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 5, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 63, 63, true);
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0._skipString();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000239; line: 1, column: 81]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader1 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 58, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._decodeEscaped();
      StringReader stringReader2 = new StringReader("Null String illegal for SerializedString");
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer2.makeChild(5588);
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("MnM:\"#p{K!m.<,Lt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 737, 0, true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000240; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "49}6Gt!EB].F3w@", false);
      StringReader stringReader0 = new StringReader("U<");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1343), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, (-2), 406, false);
      readerBasedJsonParser1.getValueAsString();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed ");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2703, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString("?");
      readerBasedJsonParser0._bufferRecyclable = true;
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(806, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)): was expecting a colon to separate field name and value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000241; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("ALLOW_YAML_COMMENTS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      char[] charArray0 = new char[4];
      charArray0[0] = '6';
      charArray0[1] = '6';
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 44, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, 188, true);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(54, "ALLOW_YAML_COMMENTS");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000242; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-181), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(45, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): was expecting a colon to separate field name and value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000243; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("c8z@OEYYA");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(262144);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1000, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getValueAsString((String) null);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(45, (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in FIELD_NAME
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000244; line: 1, column: 28]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '(';
      charArray0[1] = 'q';
      charArray0[2] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 3, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(537);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1364), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 33, true);
      readerBasedJsonParser0._parseAposName();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleOddName(1000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'c';
      charArray0[1] = 'i';
      charArray0[2] = '5';
      charArray0[3] = '+';
      charArray0[4] = 'u';
      charArray0[5] = '3';
      charArray0[6] = '?';
      charArray0[7] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 15, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 3, true);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(1061, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('e' (code 101)): was expecting a colon to separate field name and value
         //  at [Source: java.lang.String@0000000245; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("i_f27~N");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-254));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 184, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(45, "i_f27~N");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): was expecting a colon to separate field name and value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000246; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      System.setCurrentTimeMillis(1L);
      charArray0[0] = '-';
      charArray0[1] = '';
      charArray0[2] = 'v';
      CharBuffer charBuffer0 = CharBuffer.allocate(56);
      stringReader0.read(charBuffer0);
      charArray0[3] = 'i';
      charArray0[4] = '?';
      charArray0[5] = 'g';
      charArray0[6] = 'R';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-596), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 46, 32, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue((-3869));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charsToNameCanonicalizer0.makeChild(240);
      charArray0[0] = '_';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-6176), (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, true);
      readerBasedJsonParser0.getTextLength();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 67]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("q]2(0V4VeA_Ye");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._matchToken("q]2(0V4VeA_Ye", 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'q]q': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000247; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer1, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      charArray0[1] = 'u';
      CharsToNameCanonicalizer.createRoot();
      charArray0[2] = 'E';
      charArray0[3] = '/';
      charArray0[4] = ']';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._matchToken("$ ", 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '$': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer@0000000248; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("I");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(52);
      char[] charArray0 = new char[7];
      charArray0[0] = '!';
      charArray0[1] = '|';
      charArray0[2] = '';
      charArray0[3] = '|';
      charArray0[4] = '9';
      charArray0[5] = '!';
      charArray0[6] = 'Y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-560), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 12, (-934), true);
      readerBasedJsonParser0.getCurrentName();
      readerBasedJsonParser0.getValueAsString("I");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'I': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000249; line: 1, column: -930]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-201));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0.getNextChar("l2");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputl2
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000250; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      TextBuffer textBuffer0 = iOContext1.constructTextBuffer();
      IOContext iOContext2 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(textBuffer0).when(iOContext2).constructTextBuffer();
      doReturn((Object) null).when(iOContext2).getSourceReference();
      doReturn(false).when(iOContext2).isResourceManaged();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-3222), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, (-1093), false);
      readerBasedJsonParser0.nextFieldName();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0.getInputSource();
      try { 
        readerBasedJsonParser0.getNextChar("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input
         //  at [Source: UNKNOWN; line: 1, column: -2183]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '`';
      charArray0[2] = 'W';
      charArray0[3] = 'C';
      charArray0[4] = '{';
      charArray0[5] = 'q';
      charArray0[6] = '@';
      charArray0[7] = '9';
      charArray0[8] = '$';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 116, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, (-827), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000251; line: 1, column: -793]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2327);
      charsToNameCanonicalizer1.makeChild(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[1] = 'I';
      charArray0[2] = 'q';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'q';
      charArray0[6] = '.';
      charArray0[7] = 'B';
      charArray0[8] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 7, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 33, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'IqIIq': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000252; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader1 = new StringReader("f;%=V60As*N,QkAm=");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1880, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 121, 33, false);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'f': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000253; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 32, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(91, "'null', 'true', 'false' or NaN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('[' (code 91)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000254; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("H5>[,nItoR^n3![");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      try { 
        readerBasedJsonParser0._reportInvalidToken("H5>[,nItoR^n3![", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = (-1843);
      int int1 = 114;
      int int2 = (-498);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      char[] charArray1 = new char[4];
      charArray1[0] = 'L';
      char char0 = 'w';
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1082, 922, true);
      try { 
        readerBasedJsonParser0._reportInvalidToken("NaN", "NaN");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 922
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("US-ASCII");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(403);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer(3);
      StringReader stringReader1 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '+';
      charArray0[2] = 'P';
      charArray0[3] = 'F';
      charArray0[4] = 'P';
      charArray0[5] = '+';
      charArray0[6] = 'F';
      charArray0[7] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3951, stringReader1, objectCodec0, charsToNameCanonicalizer1, charArray0, (-62), 500, true);
      readerBasedJsonParser0.getCodec();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -62
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(58);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 33, false);
      readerBasedJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1056);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2393, true);
      StringReader stringReader2 = new StringReader(" in character escape sequence");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader2, objectCodec1, charsToNameCanonicalizer1, charArray0, 141, 3, true);
      readerBasedJsonParser1.getTokenLocation();
      try { 
        readerBasedJsonParser1.nextIntValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'in': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000255; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1914);
      StringReader stringReader1 = new StringReader("");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000256; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer0.makeChild((-1838));
      StringReader stringReader0 = new StringReader("psG<9p6s");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("psG<9p6s");
      CharsToNameCanonicalizer.createRoot();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000257; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("i_f27H~N1");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec1, charsToNameCanonicalizer1);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000258; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3591);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2780), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 4, true);
      readerBasedJsonParser0._parseAposName();
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(2);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("Egs(q+ljW/9a");
      char[] charArray0 = new char[5];
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 2, 1010, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7s3 I)SbhyKRw+@Y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = '7';
      charArray0[1] = 'l';
      charArray0[2] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-3058), 42, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3058
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1064));
      char[] charArray0 = new char[4];
      charArray0[1] = 'q';
      charArray0[2] = '6';
      charArray0[3] = 'B';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 2, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000259; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      StringReader stringReader1 = new StringReader("expected a hex-digit for character escape sequence");
      iOContext0.allocBase64Buffer();
      charsToNameCanonicalizer1.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3830), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 761, true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000260; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("') as character #");
      StringReader stringReader1 = new StringReader("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-207));
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[2] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 97, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 125, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-1171), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1737), 1036, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[0] = 'j';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000261; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      StringReader stringReader0 = new StringReader("4l[@");
      StringReader stringReader1 = new StringReader(") out of range of int (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(64);
      iOContext0.constructTextBuffer();
      charsToNameCanonicalizer0.makeChild(116);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 648, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000262; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec1).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec1).toString();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 91, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-1093), stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, (-2605), false);
      readerBasedJsonParser1.getCodec();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -2602]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(2428);
      charsToNameCanonicalizer2.release();
      charsToNameCanonicalizer2.makeChild(172);
      StringReader stringReader0 = new StringReader("was expecting a colon to separate field name and value");
      SerializedString serializedString0 = new SerializedString("Malformed numeric value '");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 52, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000263; line: 1, column: 109]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      int int0 = (-1446);
      String string0 = "kMq-@";
      StringReader stringReader0 = new StringReader("kMq-@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'B';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1446), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.io.JsonStringEncoder", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("#FF>XMXK\"(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = ':';
      charArray0[1] = 'H';
      stringReader0.read();
      charArray0[2] = 'h';
      charArray0[3] = '3';
      charArray0[4] = 'L';
      charArray0[5] = 'i';
      charsToNameCanonicalizer0.release();
      charArray0[6] = '{';
      charArray0[7] = 'A';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1559, true);
      try { 
        readerBasedJsonParser0._reportInvalidToken("z;)yI8:.$%z~G)");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'z;)yI8:.$%z~G)': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000264; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.reset();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      char[] charArray1 = new char[1];
      charArray1[0] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray1, 45, 2, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000265; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      charsToNameCanonicalizer0.makeChild(54);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      charsToNameCanonicalizer2.release();
      StringReader stringReader0 = new StringReader("UTF-8");
      char[] charArray0 = new char[16];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1, 2, true);
      readerBasedJsonParser0._nameStartRow = 64;
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('U' (code 85)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000266; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("u@wwj68bwTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3830), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 566, 57, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-3830), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000267; line: 1, column: 59]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-3830), (-3830), true);
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000268; line: 1, column: -3827]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting comma to separate ";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      char char0 = 'P';
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 13, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 500, (-66), true);
      readerBasedJsonParser0.getTextLength();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000269; line: 1, column: -64]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(51);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      charArray0[3] = '[';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 51, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 2101, false);
      int int0 = 58;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("/~v`dL-FWY9;V+vn+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(98);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 1950, 2, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 0, 708, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q D?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-2147), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 2, true);
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('q' (code 113)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000270; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charsToNameCanonicalizer1.makeChild((-814));
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 105, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 680, (-1078), true);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(47);
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1114111, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000271; line: 2, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("&L!4*5`@Z/(a8C .e_+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader1 = new StringReader("&L!4*5`@Z/(a8C .e_+");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = '6';
      charArray0[4] = '6';
      charArray0[5] = 'k';
      charArray0[6] = '6';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, (Reader) null, objectCodec1, charsToNameCanonicalizer1, charArray0, 500, 2, true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000272; line: 1, column: 39]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 30, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 141, 159, true);
      readerBasedJsonParser1.getTokenLocation();
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, objectCodec2, charsToNameCanonicalizer0, charArray0, 4804, 4002, true);
      readerBasedJsonParser2.getCurrentLocation();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(",lrLVsAF=x*ZSR?", "/'zvBh", false, 'M', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 6)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '[';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-839), 3, false);
      try { 
        readerBasedJsonParser0._handleInvalidNumberStart(98, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('b' (code 98)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000273; line: 1, column: -838]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      String string0 = "7u@ww j68bTy7O";
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer.createRoot();
      int int0 = 56320;
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56320, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 56320, 53, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 53
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "2=8C/:7";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("expected a digit for number exponent");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-407), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 6, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 6, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 627, (-407), false);
      Object object0 = readerBasedJsonParser1.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, (-2615), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 627, 0, false);
      try { 
        readerBasedJsonParser1.nextLongValue((-28L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -407
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3441, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 15, 0, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 32, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('N');
      iOContext0.allocWriteEncodingBuffer(42);
      char[] charArray0 = new char[1];
      charArray0[0] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 8000, false);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser1.getNextChar("");
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("was expecting a colon to separate field name and value");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-800));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, (-1555), 240, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("was expecting a colon to separate field name and value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting comma to separate ";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringWriter stringWriter0 = new StringWriter(4394);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      iOContext1.allocNameCopyBuffer((-470));
      stringReader0.read(charBuffer0);
      try { 
        readerBasedJsonParser0._handleOddValue((-470));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000274; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(56);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[4];
      charArray0[0] = '9';
      charArray0[1] = ',';
      charArray0[2] = '9';
      charArray0[3] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, (-788), 318, true);
      readerBasedJsonParser0.getCodec();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -788
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringReader stringReader1 = new StringReader("&'X4Wx+D9]pe/[%E");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'l';
      charArray0[2] = 'G';
      charArray0[3] = 'J';
      charArray0[4] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-2072), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 794, true);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      readerBasedJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1351, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000275; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", false);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer(3);
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charsToNameCanonicalizer0.makeChild(1);
      charArray0[1] = 'T';
      charArray0[2] = 'k';
      charsToNameCanonicalizer0.release();
      StringReader stringReader2 = new StringReader("was expecting comma to separate ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2147, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.lang.String@0000000276; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("was expecting a colon to separate field name and value");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'n';
      charArray0[1] = '{';
      charArray0[2] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 4692, (-2076), false);
      readerBasedJsonParser0._closeInput();
      readerBasedJsonParser0.loadMore();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000277; line: 1, column: 541]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringWriter stringWriter0 = new StringWriter(4394);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      ByteBuffer.allocateDirect(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(33);
      charsToNameCanonicalizer2.makeChild(33);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-876), stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 3, (-1196), false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000278; line: 1, column: 65]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-2282), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, (char[]) null, (-2369), 2, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("[Z5cE~vb+`t[<v*na:X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-272), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(123);
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 'w';
      charArray0[2] = ':';
      charArray0[3] = '%';
      charArray0[4] = ',';
      charArray0[5] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 125, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 256, 1, false);
      readerBasedJsonParser0.nextLongValue(9223372036854775807L);
      readerBasedJsonParser0.nextFieldName((SerializableString) null);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-31));
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      StringReader stringReader0 = new StringReader("Invalid input: JSON Pointer expression must start with '/': \"");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1807), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._finishString2();
      readerBasedJsonParser0.nextIntValue((-711));
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 32, 0, false);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.nextIntValue(16);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "+";
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000279; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2561), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000280; line: 1, column: 127]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1056);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'F';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 13, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 500, (-66), true);
      readerBasedJsonParser0.getTextLength();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000281; line: 1, column: -31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("4l[@");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2958), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 10, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 73, 1550, true);
      readerBasedJsonParser1.getValueAsString("2=8C/:7");
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000282; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(9);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1896, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 1744, 1896, false);
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      char[] charArray1 = new char[1];
      charArray1[0] = 'T';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray1, 2, 3, false);
      readerBasedJsonParser0.getValueAsString("l");
      readerBasedJsonParser0.getText();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(51);
      StringReader stringReader0 = new StringReader("|k+'p>fNj,PgOd#{Z+,");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, (char[]) null, 9, (-662), false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-241), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 65, (-892), false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer0.makeChild((-1830));
      StringReader stringReader0 = new StringReader("psG<9p6s");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("psG<9p6s");
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000283; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("was expecting a colon to separate field name and value");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2076), stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, (-662), 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer1.makeChild(1);
      charsToNameCanonicalizer1.release();
      StringReader stringReader0 = new StringReader("') as character #");
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '3';
      charArray0[2] = ')';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = ')';
      charArray0[6] = '3';
      charArray0[7] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 3, false);
      readerBasedJsonParser0._parseAposName();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, Integer.MAX_VALUE, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 112, 3191, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 112
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charsToNameCanonicalizer1.makeChild(1);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input");
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2047, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 72, 123, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-498), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1843), (-1320), false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(114);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1843
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      char[] charArray0 = new char[3];
      charArray0[0] = 'j';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      char[] charArray1 = new char[1];
      charArray1[0] = 'T';
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray1, 2, 3, false);
      readerBasedJsonParser0.getValueAsString("l");
      readerBasedJsonParser0.getText();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken(";AS!1L@#-l", 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      String string0 = "!nwj3\\LPJX6v.rN";
      String string1 = "Exponent indicator not followed by a digit";
      boolean boolean0 = true;
      char char0 = '5';
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 203, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-136), 0, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("!nwj3LPJX6v.rN", 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -136
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 141, true);
      readerBasedJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue((-1386));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ALLOW_UNQUOTED_FIELD_NAMES");
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader1 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-403));
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-403), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(117);
      StringReader stringReader0 = new StringReader(" starting at ");
      charsToNameCanonicalizer1.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 48, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 2, false);
      charsToNameCanonicalizer0.makeChild(117);
      StringReader stringReader1 = new StringReader(" starting at ");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 51, stringReader1, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getValueAsBoolean();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'starting': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000284; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("#6)Ecg~xne:&,WG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(48);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-526));
      charsToNameCanonicalizer2.makeChild(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(48);
      charsToNameCanonicalizer1.makeChild(3091);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 110, stringReader0, objectCodec0, charsToNameCanonicalizer3);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.nextToken();
      System.setCurrentTimeMillis(33);
      readerBasedJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = 's';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 650, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      TextBuffer textBuffer0 = iOContext2.constructTextBuffer();
      IOContext iOContext3 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext3).allocTokenBuffer();
      doReturn(textBuffer0).when(iOContext3).constructTextBuffer();
      doReturn((Object) null).when(iOContext3).getSourceReference();
      StringReader stringReader1 = new StringReader("#U");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader2 = new StringReader("]hHFAaR9W5@\"QcSi");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader3 = new StringReader("#U");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext3, (-485), stringReader3, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser1.setCodec(objectCodec0);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("#6)Ecg~xne:&,WG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(48);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-526));
      charsToNameCanonicalizer2.makeChild(1);
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 42, 3, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2658), (-1603), false);
      readerBasedJsonParser1.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000285; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "W", true);
      StringReader stringReader0 = new StringReader("bGdO?+3#p9e");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'Y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1942, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1942, 65, false);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'bGdO': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000286; line: 1, column: 70]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'q';
      charArray0[2] = '6';
      charArray0[3] = 'B';
      charArray0[4] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 2, false);
      readerBasedJsonParser0._bufferRecyclable = true;
      readerBasedJsonParser0._closeInput();
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("name");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      try { 
        readerBasedJsonParser0._handleOddValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000287; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charArray0[5] = 'C';
      charArray0[6] = 'w';
      charArray0[7] = '3';
      boolean boolean0 = false;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      readerBasedJsonParser0._parseAposName();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", 33, 33);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      StringWriter stringWriter3 = stringWriter2.append('f');
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter3);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000288; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting comma to separate ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      StringWriter stringWriter0 = new StringWriter(4394);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      iOContext1.allocNameCopyBuffer((-470));
      stringReader0.read(charBuffer0);
      try { 
        readerBasedJsonParser0._handleOddValue((-470));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000289; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      StringReader stringReader1 = new StringReader("lEWT:-EYLV+O} N:sM");
      StringReader stringReader2 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[1] = '(';
      charArray0[2] = 'K';
      charArray0[3] = 'R';
      charArray0[4] = 'u';
      charArray0[5] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000290; line: 1, column: 36]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-577));
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 10, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 112, (-45), false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000291; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3025, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("Exponent indicator<not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1822, (-2586), false);
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1093), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" in character escape sequence");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(39);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, stringReader0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader(" in character escape sequence");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 240, 415, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser((IOContext) null, 45, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, (char[]) null, 33, 33, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(108);
      StringReader stringReader1 = new StringReader("2goG+B?!|Ta");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2);
      readerBasedJsonParser0.getValueAsString("iDqX3,@P");
      CharsToNameCanonicalizer charsToNameCanonicalizer3 = charsToNameCanonicalizer0.makeChild(97);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 48, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer3, (char[]) null, 3, 2162, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 9, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 106, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, (-255), 115, true);
      readerBasedJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'q';
      charArray0[2] = '6';
      charArray0[3] = 'B';
      charArray0[4] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 2, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'jq4l': was expecting ('true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000292; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = '+';
      charArray0[3] = 'V';
      charArray0[4] = 'V';
      charArray0[5] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 32, true);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'k': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000293; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("name");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTextLength();
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      readerBasedJsonParser0._getText2(jsonToken0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'name': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000294; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3119);
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 2, true);
      readerBasedJsonParser0.getTokenLocation();
      charsToNameCanonicalizer1.release();
      StringReader stringReader1 = new StringReader("4l[@");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextIntValue((-631));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'in': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000295; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("?Q3TRjC2tXi<<dS}iN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-128), 39, true);
      readerBasedJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue(1180);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'i';
      charArray0[3] = 'l';
      charsToNameCanonicalizer0.makeChild(0);
      charArray0[4] = '';
      iOContext1.allocBase64Buffer();
      iOContext1.allocWriteEncodingBuffer(289);
      charArray0[5] = '{';
      charArray0[6] = '+';
      charArray0[7] = 'k';
      charArray0[8] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 1, true);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'o': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000296; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 11, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-1142), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 1, 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      stringWriter1.write(charArray0);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter1);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000297; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3192, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1105);
      charsToNameCanonicalizer1.release();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      charsToNameCanonicalizer1.makeChild(33);
      try { 
        readerBasedJsonParser0._handleInvalidNumberStart(33, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000298; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=P_OTX>R{-=Wz7Q f", false);
      StringReader stringReader0 = new StringReader("=P_OTX>R{-=Wz7Q f");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2882);
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '?';
      charArray0[2] = '@';
      charArray0[3] = '_';
      charArray0[4] = '(';
      charArray0[5] = 'd';
      charArray0[6] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 114, 3, false);
      try { 
        readerBasedJsonParser0._handleOddName(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): was expecting double-quote to start field name
         //  at [Source: java.lang.String@0000000299; line: 1, column: 115]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(4363);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 13, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0.getValueAsString("Unexpected padding character ('");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('l' (code 108)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000300; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charArray0[5] = 'C';
      charArray0[6] = 'w';
      charArray0[7] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'fz': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000301; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("!{^y");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.setCodec(objectCodec1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000302; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '~';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 2, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext2.constructTextBuffer();
      StringReader stringReader1 = new StringReader("#U");
      StringReader stringReader2 = new StringReader("Trying to release buffer not owned by the context");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader3 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 189, stringReader3, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("}");
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      iOContext0.allocWriteEncodingBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000303; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("?Q3TRjC2tXi<<dS}iN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, (-741), true);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000304; line: 1, column: -739]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      String string0 = "+";
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000305; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1450), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000306; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      iOContext0.allocBase64Buffer();
      iOContext0.allocWriteEncodingBuffer((-1602));
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = 'l';
      charArray0[2] = 'k';
      charArray0[3] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 377, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1015, false);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'lk': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000307; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q D?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 0, true);
      StringReader stringReader1 = new StringReader(" in character escape sequence");
      IOContext iOContext2 = new IOContext(bufferRecycler0, "68q D?]Mo_hvcwp", true);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext2, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-191), 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2._finishString2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -191
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "was expecting comma to separate ";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting comma to separate ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("was expecting comma to separate ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000308; line: 1, column: 65]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(51);
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = '\'';
      charArray0[2] = '/';
      charArray0[3] = '[';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 51, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 2101, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[6];
      charArray0[0] = '6';
      charArray0[1] = 'L';
      charArray0[2] = '3';
      charArray0[3] = 'k';
      charArray0[4] = 'A';
      charArray0[5] = 's';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 645, true);
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "Exponent indicator not followed by a digit";
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2392), 0, false);
      int int0 = (-730);
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-730), stringReader0, (ObjectCodec) null, (CharsToNameCanonicalizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3591);
      charsToNameCanonicalizer1.release();
      char char0 = 'z';
      char char1 = 'X';
      char char2 = 'C';
      char char3 = '3';
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Reader reader0 = null;
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[8];
      char char4 = 'v';
      charArray0[0] = 'v';
      charArray0[1] = 'v';
      charArray0[2] = '\\';
      charArray0[3] = 'z';
      charArray0[4] = 'S';
      charArray0[5] = '3';
      charArray0[6] = 'z';
      charArray0[7] = 'C';
      boolean boolean1 = true;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 44, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 32, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = (-898);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-898));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, (Reader) null, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000309; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charArray0[5] = 'C';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      readerBasedJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("#U");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = 'j';
      charArray0[2] = '3';
      charArray0[3] = '\'';
      charArray0[4] = '6';
      charArray0[5] = 'J';
      charArray0[6] = '$';
      charArray0[7] = '<';
      charArray0[8] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-2089), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, 0, false);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser1._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 764, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2566, (-458), true);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      readerBasedJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      charArray0[5] = '_';
      stringWriter1.write(charArray0);
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      readerBasedJsonParser1._getText2(jsonToken0);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, (-2702), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2213, true);
      readerBasedJsonParser2._skipCR();
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 9, 0, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-4085), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3808, true);
      try { 
        readerBasedJsonParser1._handleOddName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000310; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "49}6Gt!EB].F3w@", false);
      StringReader stringReader0 = new StringReader("U<");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocWriteEncodingBuffer(97);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1343), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, (-2), 406, false);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(97, "U<");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('a' (code 97)): was expecting double-quote to start field name
         //  at [Source: java.lang.String@0000000311; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("/~v`dL-FWY9;V+vn+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '-';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1395));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, Integer.MIN_VALUE, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 93, 52, true);
      try { 
        readerBasedJsonParser0._handleOddName(1082);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u043A' (code 1082 / 0x43a)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000312; line: 1, column: 94]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("true");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '6';
      charArray0[2] = '+';
      charArray0[3] = '3';
      charArray0[4] = 'i';
      charArray0[5] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 125, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 3, true);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(3, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000313; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2723, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")3#");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-1093));
      char char0 = 'j';
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Q");
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 91, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.readValueAsTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("P~0u=V");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '7';
      charArray0[2] = 'A';
      charArray0[3] = 'H';
      charArray0[4] = ',';
      charArray0[5] = 's';
      charArray0[6] = 'T';
      charArray0[7] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      TypeReference<Object> typeReference0 = (TypeReference<Object>) mock(TypeReference.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.readValueAs((TypeReference<?>) typeReference0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Exponent indicator not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocReadIOBuffer();
      StringReader stringReader0 = new StringReader("68q ?]Mo_hvcwp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('_');
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = '_';
      charArray0[2] = '_';
      charArray0[3] = '_';
      charArray0[0] = '_';
      charArray0[5] = '_';
      stringWriter1.write(charArray0);
      readerBasedJsonParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null, 125, 45);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.CharTypes");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = 'r';
      charArray0[2] = '4';
      charArray0[3] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 116, 1235, true);
      readerBasedJsonParser0.loadMore();
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("^>/%uj#6P44[~1Y9w9#");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 876, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getInputSource();
      SerializedString serializedString0 = new SerializedString("i[Ta1=yLE?}x&21lz48");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      // Undeclared exception!
      try { 
        byteBuffer0.putInt(876, 3167);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("?Q3TRjC2tXi<<dS}iN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1455);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-413), 0, true);
      Object object0 = readerBasedJsonParser0.getInputSource();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 112, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2702, 1455, true);
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 105, 2, true);
      readerBasedJsonParser2.getTextLength();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._reportInvalidToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1843), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._releaseBuffers();
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("7u@ww j68bTy7O");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000314; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "UTF16_BE", false);
      StringReader stringReader0 = new StringReader("{=i");
      StringReader stringReader1 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "{=i", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-489), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsBoolean();
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000315; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", false);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 438, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, (-931), false);
      readerBasedJsonParser0.getTextLength();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000316; line: 1, column: 15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("2=8C/:7");
      StringReader stringReader1 = new StringReader("}oRPXG");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(1694);
      charsToNameCanonicalizer2.makeChild(0);
      int int0 = (-1011);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1011), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: java.lang.String@0000000317; line: 1, column: 15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte) (-27);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("): ");
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      charArray0[2] = 'j';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      charArray0[5] = 'j';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, (byte)83, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = 'P';
      stringReader0.skip((-2063L));
      charArray0[2] = '&';
      charArray0[3] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000318; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 0, true);
      CharsToNameCanonicalizer.createRoot();
      readerBasedJsonParser0._parseAposName();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-4059), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 3787, true);
      readerBasedJsonParser1._parseAposName();
      try { 
        readerBasedJsonParser0._handleOddName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000319; line: 1, column: 21]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'z';
      charArray0[2] = 'X';
      charArray0[3] = 'S';
      charArray0[4] = 'r';
      charArray0[5] = 'C';
      charArray0[6] = 'w';
      charArray0[7] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      readerBasedJsonParser0._parseAposName();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000320; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Infinity");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1105);
      charsToNameCanonicalizer1.release();
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1105, 1, false);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000321; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("?Q3TRjC2tXi<<dS}iN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000322; line: 1, column: 37]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2453, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2101, 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Decimal point not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1471);
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'o';
      charArray0[2] = 'k';
      charArray0[3] = '';
      charArray0[4] = '=';
      charArray0[5] = '!';
      charArray0[6] = 'H';
      charArray0[7] = 'p';
      charArray0[8] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 13, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1471, 1471, true);
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(8);
      StringReader stringReader0 = new StringReader("\"`+)kjGwF]_6mBe*");
      char[] charArray0 = new char[1];
      charArray0[0] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 43, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 2803, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("/~v`dL-FWY9;V+vn+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'V';
      charArray0[1] = '-';
      charArray0[2] = 'e';
      charArray0[3] = '.';
      charArray0[4] = '{';
      charArray0[5] = 'Y';
      charArray0[6] = 'I';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, Integer.MIN_VALUE, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-741), true);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000323; line: 1, column: -739]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "2=8C/:7", true);
      StringReader stringReader0 = new StringReader("4l[@");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1093));
      char[] charArray0 = new char[5];
      charArray0[0] = 'j';
      charArray0[1] = 'q';
      charArray0[2] = '6';
      charArray0[3] = 'B';
      charArray0[4] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 2, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: java.lang.String@0000000009; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
}
