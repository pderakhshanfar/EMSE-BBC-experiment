/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:42:53 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.FormatSchema;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byte byte0 = (byte) (-29);
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)53, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E3' (code 227)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)0, false);
      byteQuadsCanonicalizer0.makeChild((byte)0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[3];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-240), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 224, 2213, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-3971), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 53, (-877), true);
      uTF8StreamJsonParser1._parsePosNumber(0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(63, 2965);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 224
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      Integer integer0 = new Integer(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.setEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)125, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)13;
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)125;
      byteArray1[3] = (byte)13;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray1, 0, (byte)13, false);
      try { 
        uTF8StreamJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: java.lang.Integer@0000000016; line: 1, column: 0])
         //  at [Source: java.lang.Integer@0000000007; line: 3, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-29));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 850, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (-1746), true);
      uTF8StreamJsonParser0.getCurrentValue();
      Integer integer0 = new Integer(0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, integer0, false);
      uTF8StreamJsonParser0.getCurrentName();
      uTF8StreamJsonParser0.getLastClearedToken();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(52);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E3' (code 227)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -1744]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)7, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream1, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 9, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._reportInvalidToken((String) null, "FLOAT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)13;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)49, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 246, true);
      uTF8StreamJsonParser0.nextTextValue();
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(4353);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 42);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Rb");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3478));
      byte[] byteArray0 = new byte[4];
      byteQuadsCanonicalizer1.release();
      byteArray0[0] = (byte) (-63);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)55;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 42, 791, false);
      uTF8StreamJsonParser0.getValueAsInt((-4100));
      System.setCurrentTimeMillis((byte) (-70));
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeCharForError(3014);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 42
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 0, false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      System.setCurrentTimeMillis(0);
      try { 
        uTF8StreamJsonParser0.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 233;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(233);
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-294), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-3289), (-1715), true);
      uTF8StreamJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      try { 
        uTF8StreamJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000008; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 1327;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 49, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1327, 1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(878);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000009; line: 1, column: -1323]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-101);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byteArrayInputStream0.reset();
      int int0 = 137;
      byteQuadsCanonicalizer0.makeChild(137);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext2.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1215, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-101), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName((-184));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: -99]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-64));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-572), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 0, 1, false);
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-727));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)49);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 2, 200, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, Integer.MAX_VALUE, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1180, 2, false);
      uTF8StreamJsonParser0._decodeEscaped();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(790, 1023, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 790
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-20);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte)49, true);
      uTF8StreamJsonParser0.getCurrentValue();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 1, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (byte) (-20), 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)69;
      byteArray0[5] = (byte)69;
      byteArray0[3] = (byte) (-24);
      byteArray0[5] = (byte) (-81);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-81), bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)69, 12, false);
      try { 
        uTF8StreamJsonParser0.parseLongName((byte)0, (-210), (-210));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild((-2083));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)42, 3, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000011; line: 1, column: -36]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = new Integer(8000);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte) (-51);
      byteArray0[8] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)9, 32);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-396), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 9, 78, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)53, false);
      byteQuadsCanonicalizer0.makeChild((byte)0);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-40);
      PipedInputStream pipedInputStream0 = new PipedInputStream(57343);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-40);
      byteArray1[1] = (byte) (-40);
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte)127;
      byteArray1[6] = (byte)100;
      byteArray1[7] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, (byte)100, 2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "", false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1019, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, 117, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(3, (-621));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-29), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 850, 13, true);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: UNKNOWN; line: 1, column: -833]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1718));
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, 1, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(737);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)53, false);
      byteQuadsCanonicalizer0.makeChild((byte)0);
      uTF8StreamJsonParser0._loadToHaveAtLeast(3);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E3' (code 227)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1388));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 12, (byte) (-40), true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 1977, true);
      uTF8StreamJsonParser1.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, true);
      uTF8StreamJsonParser1.getCurrentName();
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, 12, byteArrayInputStream0, objectCodec2, byteQuadsCanonicalizer1, byteArray0, 58, 54, true);
      try { 
        uTF8StreamJsonParser2._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-113), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 54, (byte) (-113), true);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("1+bDf~*(9", "1+bDf~*(9");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '1+bDf~*(9': was expecting 1+bDf~*(9
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: -112]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 6);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)42, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, (-572), false);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)42;
      byteArray1[2] = (byte)42;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)42;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 3486, 1, false);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      System.setCurrentTimeMillis(3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(53);
      byteArrayInputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.addName("K", 0, 0, 4);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 33, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 3, 1, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-1));
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000013; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)66;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 5907, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 45, 45, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0.slowParseName();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-40);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2348), byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 1, 2, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 12)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "99,9-N?bOJ";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-20);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)49, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      uTF8StreamJsonParser0.getCurrentName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)52;
      byteArray0[0] = (byte)52;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[2] = (byte) (-24);
      byteArray0[2] = (byte)117;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      int int0 = 69;
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue((byte) (-24));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 40, 244, true);
      int int0 = uTF8StreamJsonParser0.getTextLength();
      assertEquals(0, int0);
      
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)84;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 241, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 57, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)84);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1234), (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte) (-38), 39, true);
      uTF8StreamJsonParser1.getText();
      SerializedString serializedString0 = new SerializedString("Spill-over slots in symbol table with ");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)49);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 0, 2, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "' (code ", true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)127, pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 43, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.getValueAsInt(43);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("com.fasterxml.jackson.core.io.SerializedString", 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 0, 1000, false);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8StreamJsonParser0.getCurrentName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)127, pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 43, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 65, pipedInputStream1, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 123, (-1710), true);
      try { 
        uTF8StreamJsonParser1._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[5] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)127, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, (byte)127, false);
      MockFile mockFile0 = new MockFile("' (for ");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 32, true);
      uTF8StreamJsonParser1.releaseBuffered((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+Usk");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+Usk", false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1290);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 192, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 2036, 6, true);
      int int0 = 2262;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken(" IsVj__v9oy", 2262);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte) (-37);
      byteArray0[6] = (byte) (-37);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 40, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 73, (-943), true);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)49);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 0, 2, true);
      uTF8StreamJsonParser0.getCurrentValue();
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "' (code ", true);
      uTF8StreamJsonParser0.getCurrentName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0._decodeCharForError(471);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe8
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 127, 3, false);
      try { 
        uTF8StreamJsonParser0._matchToken(" IsVj__v9oy", 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token ' Isd\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: -115]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-444));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 110, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("; $D12%==i&f^[);", 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)42, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)42, 3, true);
      try { 
        uTF8StreamJsonParser0._matchToken("expected a hex-digit for character escape sequence", 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.io.ByteArrayInputStream@0000000017; line: 1, column: -37]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-97);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 110, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 43, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      uTF8StreamJsonParser1._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)117;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(114);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)35, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 56, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 3);
      byteArrayInputStream0.close();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      Integer integer0 = new Integer(39);
      IOContext iOContext1 = new IOContext(bufferRecycler1, integer0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 10, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)127, (-1627), false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._loadToHaveAtLeast(0);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsString();
      try { 
        uTF8StreamJsonParser0.parseLongName(46, 235, 4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (-2053));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2053), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, 0, true);
      uTF8StreamJsonParser0.getValueAsInt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 1, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 24)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[2];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 51, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 16, 0, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("OqS 'ZQdn,aPW'J)D", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      iOContext0.setEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)125, 7, false);
      uTF8StreamJsonParser0.nextFieldName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("1YE2");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)54;
      byteArray1[1] = (byte)54;
      byteArray1[2] = (byte)54;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, (byte)54, (byte)54, true);
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.ByteArrayInputStream@0000000019; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte) (-87);
      byteArray0[3] = (byte) (-23);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(181);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1479), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-43), (-778), false);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe9
         //  at [Source: java.io.ByteArrayInputStream@0000000020; line: 1, column: -730]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)11);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (byte)64, false);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfb
         //  at [Source: java.lang.Integer@0000000021; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000022; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 47, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, Integer.MIN_VALUE, (byte)53, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 2, (-676), true);
      uTF8StreamJsonParser0._skipCR();
      try { 
        uTF8StreamJsonParser0._parseName((-300));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 2, column: -675]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2037), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3646, 1024, false);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000024; line: 1, column: -2620]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)13;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 125, 0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-216), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (byte)93, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)93);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 47, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, Integer.MIN_VALUE, (byte)53, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.loadMore();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 40, 244, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_COMMENTS;
      uTF8StreamJsonParser0.disable(jsonParser_Feature0);
      uTF8StreamJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("{!s", 1375);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)53, 1571);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3052));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)53;
      byteArray1[2] = (byte) (-40);
      byteArray1[3] = (byte)53;
      byteArray1[4] = (byte)65;
      byteArray1[5] = (byte)53;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 110, 2, false);
      uTF8StreamJsonParser0.getCodec();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 382);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1023, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 0, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(7, 34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6000, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 102, 4, true);
      uTF8StreamJsonParser0.getTextLength();
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      byte byte0 = (byte)49;
      iOContext0.allocTokenBuffer();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1630, 606, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8StreamJsonParser0, true);
      uTF8StreamJsonParser0.getCurrentName();
      uTF8StreamJsonParser0._skipCR();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 2, column: 607]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-29);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      byteArrayInputStream0.close();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler2, object0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 0, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-4948), 0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser1._loadToHaveAtLeast((-3083));
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsString();
      try { 
        uTF8StreamJsonParser0.parseLongName(1, (-950), 616);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000028; line: 2, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 48, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1604), 1, false);
      uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      uTF8StreamJsonParser0.getCurrentName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1604
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4096, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-917), 654, false);
      uTF8StreamJsonParser0.getValueAsString("com.fasterxml.jackson.core.JsonFactory$Feature");
      int[] intArray0 = new int[5];
      intArray0[0] = 2470;
      intArray0[1] = 2;
      intArray0[2] = (-917);
      intArray0[3] = 98;
      intArray0[4] = 1;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (-835), 45, (-917), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -917
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)117;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(114);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)35, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 56, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-95);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)49;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8000, (byte)47, true);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream1 = new PipedInputStream(3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream1.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      PipedInputStream pipedInputStream2 = new PipedInputStream(199);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)127;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)127;
      byteArray0[8] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 43, pipedInputStream2, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1336), 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)127, pipedInputStream1, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 182, (byte)127, false);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (-1336), pipedInputStream2, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 2592, 1555, true);
      try { 
        uTF8StreamJsonParser2._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      byteArrayInputStream0.skip(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.mark(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byteQuadsCanonicalizer1.toString();
      byteQuadsCanonicalizer1.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, (byte)25, false);
      byteQuadsCanonicalizer1.addName("", (int) (byte)25);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.ByteArrayInputStream@0000000029; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(350);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)86;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)47;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 350, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1860), (byte)95, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("UTF-8", "UTF-8");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1860
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(123);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-778), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("expected a hex-digit for character escape sequence", "expected a hex-digit for character escape sequence");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[2] = (byte)117;
      PipedInputStream pipedInputStream0 = new PipedInputStream(200);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 92, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 2, 2, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(324);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[5] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)127, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, (byte)127, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((-4549), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 8, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)42, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)13;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)49, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      uTF8StreamJsonParser0.getCurrentName();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 13)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.PipedInputStream@0000000030; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(3042);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer2, byteArray0, 0, 1752, true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte) (-20);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)49, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, pipedOutputStream0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      iOContext1.setEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)84, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2066, (byte)125, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 695, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 695, false);
      uTF8StreamJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = (-2);
      byteArrayInputStream0.reset();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      ObjectCodec objectCodec1 = null;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-2), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (byte)127, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(+~L");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      Integer integer0 = new Integer(0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, integer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 10, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000032; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)34;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(181);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1479), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-43), (-778), false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.io.ByteArrayInputStream@0000000033; line: 1, column: -718]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream1.close();
      Object object0 = new Object();
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-587));
      try { 
        uTF8StreamJsonParser0._parsePosNumber(50);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): Expected space separating root-level values
         //  at [Source: java.io.ByteArrayInputStream@0000000034; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Integer integer0 = new Integer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, integer0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      IOContext iOContext2 = new IOContext(bufferRecycler0, integer0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)127);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2), 1, true);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      IOContext iOContext3 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, 73, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 123, 3, true);
      try { 
        uTF8StreamJsonParser1._parseName(45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 300, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1170, 782, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseName(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(123);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-778), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)118;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 54, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte)118, false);
      uTF8StreamJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)42;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 31, (byte)42, true);
      uTF8StreamJsonParser0.getCodec();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2933), pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 43, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1571, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 43, (byte)127, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 43
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "{:\"`=H{\nY1", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-1162), true);
      SerializedString serializedString0 = new SerializedString("{:\"`=H{\nY1");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(199);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 4381, (-37), false);
      uTF8StreamJsonParser0.getText();
      SerializedString serializedString0 = new SerializedString("file");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
      uTF8StreamJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 97, (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte) (-38), 3, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 97, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 47, 43, false);
      uTF8StreamJsonParser1._loadToHaveAtLeast(1);
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000035; line: 1, column: 44]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int int0 = 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      String string0 = "99,9-N?bOJ";
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2834), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, (-1798), true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(256);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('N' (code 78)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000036; line: 1, column: -1798]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      iOContext0.setEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)84;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 241, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 57, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byteQuadsCanonicalizer1.toString();
      byteQuadsCanonicalizer1.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 127, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 19, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[0] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Base64Variant base64Variant0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectCodec0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 53;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(550);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 97, pushbackInputStream0, objectCodec2, byteQuadsCanonicalizer1, byteArray0, (byte) (-43), (byte)39, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(53);
      byteArrayInputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-1890), 188, true);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(91);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 2078 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-878), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 58, 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byte byte0 = (byte) (-113);
      byteArray0[1] = (byte) (-113);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, 1, false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 9)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000038; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 225, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-3143), (-3143), false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(199);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 4381, (-37), false);
      uTF8StreamJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1042), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      uTF8StreamJsonParser0.getValueAsString("`Z!.'[na_/");
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream1.reset();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-676), byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2062, true);
      uTF8StreamJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast((-676));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byte byte0 = (byte)100;
      byteArray0[2] = (byte)100;
      byte byte1 = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byte byte2 = (byte)39;
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2637;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 32, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 1, 3, false);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 61, byteArrayInputStream2, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      uTF8StreamJsonParser0.getInputSource();
      byteArrayInputStream0.close();
      IOContext iOContext2 = new IOContext(bufferRecycler2, iOContext0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2993), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 61, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._loadToHaveAtLeast(63);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser1.getValueAsString();
      try { 
        uTF8StreamJsonParser1.parseLongName(61, (-4492), (-2));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(903);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-157), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 1974, 76, false);
      uTF8StreamJsonParser0._parseAposName();
      uTF8StreamJsonParser0._releaseBuffers();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(2240, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u08C0' (code 2240 / 0x8c0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.io.ByteArrayInputStream@0000000041; line: 1, column: -1896]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 1, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 61, byteArrayInputStream2, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      uTF8StreamJsonParser0.getInputSource();
      byteArrayInputStream0.close();
      IOContext iOContext2 = new IOContext(bufferRecycler2, iOContext0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2993), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 61, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(63);
      try { 
        uTF8StreamJsonParser1.parseLongName(61, (-4492), (-2));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000042; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)13;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2499, 55);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3080, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 92, 1, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000043; line: 1, column: -91]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = (-1440);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 98, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-1440), 3, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-1440));
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.String@0000000044; line: 1, column: 1443]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)39, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)100, 31, false);
      uTF8StreamJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-431), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 4)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3320, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-905), (-634), true);
      uTF8StreamJsonParser0.getValueAsString((String) null);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(217L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-1), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 15, 55296, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-37), (-2), true);
      ByteArrayInputStream byteArrayInputStream2 = (ByteArrayInputStream)uTF8StreamJsonParser0.getInputSource();
      byteArrayInputStream2.close();
      IOContext iOContext2 = new IOContext(bufferRecycler1, byteArrayInputStream2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream1, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-887), 3184, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(853);
      try { 
        uTF8StreamJsonParser0.parseLongName(3184, (-887), 11);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000045; line: 1, column: 40]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 13);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2230, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 114, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-1919), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 45, false);
      uTF8StreamJsonParser1._loadToHaveAtLeast(114);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Integer integer0 = new Integer(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, integer0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 817);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 27, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, (byte[]) null, (-547), (byte) (-113), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((-355), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      int int0 = 3042;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild((-2464));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(1489);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)127, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 102, 1, true);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1516), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 2, 0, true);
      uTF8StreamJsonParser1.setCodec((ObjectCodec) null);
      try { 
        uTF8StreamJsonParser1._parseName((byte)127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000046; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-38);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)84;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-38), (-86), false);
      uTF8StreamJsonParser0._parsePosNumber(2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4096, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-917), 654, false);
      uTF8StreamJsonParser0.getValueAsString("com.fasterxml.jackson.core.JsonFactory$Feature");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "(+~L");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 47, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3242), 2463, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      int int0 = new Integer(1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 635, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 56, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1885, (byte) (-24), false);
      uTF8StreamJsonParser0.nextToken();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 216, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser1._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream1, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild((-1103));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[4] = (byte)127;
      byteArray1[5] = (byte)127;
      byteArray1[6] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 102, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer2, byteArray1, 240, 3, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-284), pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      try { 
        uTF8StreamJsonParser1.nextLongValue(102);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 165, (byte)3, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) filterOutputStream0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 123, 123, false);
      Class<Integer> class0 = Integer.class;
      uTF8StreamJsonParser0.readValueAs(class0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, 0, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 3, 48, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 116, (-105));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(58);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2614, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-105), 1, true);
      uTF8StreamJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1926));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2302), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, (-788), true);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.io.PipedInputStream@0000000047; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-617), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 1, 2345, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)4);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2816, 1, true);
      uTF8StreamJsonParser0.getTypeId();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 248, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 4)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000048; line: 1, column: -2813]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)78;
      byteArray0[8] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 2230);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 56;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte)28, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-40), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (byte)28, 2, true);
      uTF8StreamJsonParser1._loadToHaveAtLeast(57);
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000049; line: 1, column: -24]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      pipedInputStream0.mark((-892));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3065, 0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 635, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 102, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-55);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)35, (-1338), false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): Expected space separating root-level values
         //  at [Source: org.evosuite.runtime.testdata.FileSystemHandling@0000000051; line: 1, column: -1370]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[5] = (byte)127;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 123, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 102, 1, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 3042, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 2, 9, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._loadToHaveAtLeast(3042);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2135));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2135), pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 509, (-1231), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(1298);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 539, pipedInputStream1, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 110, (-568), true);
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2135));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 201, 3390, true);
      uTF8StreamJsonParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byte byte0 = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocTokenBuffer();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-32768), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-572), 295, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      uTF8StreamJsonParser0.getCurrentName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -572
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)13;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 45, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)49, 45, false);
      uTF8StreamJsonParser0.getTextCharacters();
      String string0 = "eP[[S,";
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte)49, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 256, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2625), 224, false);
      String string0 = null;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken((String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)93);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 102, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 9, 1, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((-135L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00DC': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000052; line: 1, column: -5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2499, 55);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)54);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3080, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 92, 1, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2625));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 206, 2, false);
      String string0 = "}";
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("}", (byte)13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)42, 3);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5048, 0, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.ByteArrayInputStream@0000000053; line: 1, column: -5045]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-778), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 78, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1000);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1000, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, Integer.MIN_VALUE, false);
      uTF8StreamJsonParser0.nextBooleanValue();
      uTF8StreamJsonParser0._closeInput();
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, Integer.MIN_VALUE, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-1091), 2, true);
      uTF8StreamJsonParser0.nextLongValue(2147483647L);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[5] = (byte)127;
      int int0 = 52;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)127, (byte)127, true);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000054; line: 1, column: 128]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a hex-digit for character escape sequence", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)7);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-473), (byte)7, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -473
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocTokenBuffer(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byte byte0 = (byte) (-40);
      byteArray0[1] = (byte) (-40);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 123, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-40), (-1962), true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      Integer integer0 = new Integer(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      iOContext0.setEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JSON");
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (-2676), false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0._decodeCharForError(0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      int int0 = 1169;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byte byte0 = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1169, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-226), 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -226
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)44;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 315, 51);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1885;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)117, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)44, 106, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-6);
      byteArray0[3] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-6), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte)100;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (-497), true);
      int int0 = 2044;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-37), (-2), true);
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext2 = new IOContext(bufferRecycler1, object0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 853, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 4, true);
      uTF8StreamJsonParser1._decodeEscaped();
      uTF8StreamJsonParser0.getValueAsString();
      try { 
        uTF8StreamJsonParser1._parseName((-37));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.io.ByteArrayInputStream@0000000055; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)127;
      byteArray1[1] = (byte)127;
      byteArray1[2] = (byte)127;
      byteArray1[3] = (byte)127;
      byteArray1[5] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)127, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, 52, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((byte)127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(181);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1479), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-43), (-778), false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.io.ByteArrayInputStream@0000000056; line: 1, column: -728]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 57;
      intArray0[1] = 43;
      intArray0[2] = (-629);
      intArray0[3] = (-2334);
      intArray0[4] = 343;
      intArray0[5] = 45;
      UTF8StreamJsonParser.growArrayBy(intArray0, 49);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(49);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)89;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte) (-98);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)102;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 43, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)102, 49, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 116, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1588, false);
      uTF8StreamJsonParser0.getCurrentName();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 116, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1588, (byte)0, false);
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000057; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-159), true);
      uTF8StreamJsonParser0.getValueAsString((String) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFile mockFile1 = new MockFile(mockFile0, "@<~c");
      File file0 = MockFile.createTempFile("VALUE_EMBEDDED_OBJECT", "", (File) mockFile1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) mockPrintStream0);
      uTF8StreamJsonParser0.getInputSource();
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 10, (-2), false);
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext2 = new IOContext(bufferRecycler1, object0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 853, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 4, true);
      uTF8StreamJsonParser1._decodeEscaped();
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte) (-24);
      byteArray0[6] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.constructTextBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-27));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = (-629);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)117, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, (-629), 2, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(903);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1023, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-128), false);
      uTF8StreamJsonParser1.nextLongValue((byte)0);
      try { 
        uTF8StreamJsonParser0.nextIntValue(1261);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000058; line: 1, column: 631]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(53);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)24, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte)0, 77, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(514L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 24)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      PipedInputStream pipedInputStream0 = new PipedInputStream(200);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 78, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 125, 125, true);
      uTF8StreamJsonParser0.getValueAsInt(241);
      try { 
        uTF8StreamJsonParser0._matchToken("", (byte)42);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 339, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2284, 0, false);
      SerializedString serializedString0 = new SerializedString("");
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 58, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)35, 620, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[2] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[0] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte) (-27));
      int int0 = 98;
      byteQuadsCanonicalizer0.makeChild(58);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-43);
      byteArray1[1] = (byte) (-27);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 110, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 1, 57, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-59);
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[3] = (-3884);
      intArray0[6] = 3;
      intArray0[7] = 1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 244, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 46, (-59), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)11;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)121;
      byteArray0[8] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 57, (-3087));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2974), byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 102, 184, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(2609);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3579, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 2, 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-32768), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)53, (-532), true);
      uTF8StreamJsonParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("eP[[S,");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(181);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1479), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-43), (-778), false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x2ae875
         //  at [Source: java.io.ByteArrayInputStream@0000000059; line: 1, column: -728]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[0] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-163), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 73, 3137, false);
      uTF8StreamJsonParser0.getValueAsString("");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 168, 92, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      uTF8StreamJsonParser0.loadMore();
      uTF8StreamJsonParser0.enable(jsonParser_Feature0);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000060; line: 1, column: 185]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3197);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-82);
      iOContext1.allocReadIOBuffer();
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (-1824), true);
      uTF8StreamJsonParser0.getValueAsInt(3197);
      try { 
        uTF8StreamJsonParser0._matchToken("", 46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 93, 123, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 93
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-59), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 0, true);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("eP[[S,");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'eP[[S,': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.io.ByteArrayInputStream@0000000061; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1479), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1610, (-1479), false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000062; line: 1, column: -3087]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      TextBuffer textBuffer0 = iOContext1.constructTextBuffer();
      IOContext iOContext2 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(textBuffer0).when(iOContext2).constructTextBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 110, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 3, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext4, 54, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 54, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-90);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)115;
      byteArray0[7] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 123, 199);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(52);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 123, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, 997, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xa8
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000063; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      int int0 = 654;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 4096, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-755), 654, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -755
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)69;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-81), 101, false);
      byteQuadsCanonicalizer0.makeChild(0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -81
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.constructTextBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-27));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)117, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, (-629), 2, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(903);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1023, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-128), false);
      uTF8StreamJsonParser1.nextLongValue((byte) (-128));
      try { 
        uTF8StreamJsonParser0.nextIntValue(1261);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000064; line: 1, column: 631]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 163, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext((BufferRecycler) null, (Object) null, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, true);
      uTF8StreamJsonParser1.getTextCharacters();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.io.ByteArrayInputStream@0000000065; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      bufferRecycler0.allocCharBuffer(1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte) (-21), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-59), (byte) (-81), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 125, byteArrayInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray0, 44, (-423), true);
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.io.ByteArrayInputStream@0000000066; line: 1, column: -464]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1839));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding1);
      iOContext2.constructTextBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 97, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-757), 1, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext3 = new IOContext(bufferRecycler0, "cK#~?H*^IaCJ4^", true);
      iOContext2.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 116, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 116, 876, true);
      try { 
        uTF8StreamJsonParser1._handleOddName(116);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('t' (code 116)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000067; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      int int0 = (-497);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 635, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 102, true);
      try { 
        uTF8StreamJsonParser0._handleOddName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000068; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(53);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 57, (-1091), false);
      uTF8StreamJsonParser0._releaseBuffers();
      uTF8StreamJsonParser0.getValueAsString("expected a hex-digit for character escape sequence");
      uTF8StreamJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte) (-27));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 14);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4918, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 48, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 4)): expected a hex-digit for character escape sequence
         //  at [Source: java.io.ByteArrayInputStream@0000000069; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-59);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild((byte) (-59));
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-59);
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)0;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-59), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray2, 244, 49, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000070; line: 1, column: 50]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3042, 0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 635, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 102, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((-497), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1832));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 4619, 54, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((byte) (-40));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-32);
      byteArray1[1] = (byte) (-32);
      byteArray1[3] = (byte) (-32);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-32), dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, (byte) (-32), (byte) (-32), false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      try { 
        uTF8StreamJsonParser0._parseName((byte) (-32));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      iOContext0.allocReadIOBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1435, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-27), (-1418), true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[22];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1);
      iOContext1.constructTextBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-402), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 16, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3014, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer2, byteArray0, (-894), (-331), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextLongValue((-894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -894
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 75, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 1, 3, true);
      uTF8StreamJsonParser0.getCurrentValue();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      pipedInputStream0.markSupported();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2933), pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 43, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-99);
      byteArray0[3] = (byte) (-97);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)125, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-99), (-3587), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName((-2482));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2482
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-1822), (-683), true);
      uTF8StreamJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 12, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 7, (-2574), true);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: -2573]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)51;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)93, (byte)8, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)127);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byte byte0 = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 1023;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte) (-27));
      boolean boolean0 = false;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 14);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4918, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 123, 48, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape '*' (code 42)
         //  at [Source: java.io.ByteArrayInputStream@0000000071; line: 1, column: -73]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)53);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, 56320, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000072; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 163, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 23, true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext((BufferRecycler) null, (Object) null, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, true);
      uTF8StreamJsonParser1.getTextCharacters();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte)11;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(50);
      PipedInputStream pipedInputStream0 = new PipedInputStream(47);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 35, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)11, (byte)11, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)127;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)63;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)127, (-1038), true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(5);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-40), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 102, 3, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.Object@0000000073; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-59);
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = 0;
      intArray0[3] = 2;
      pipedOutputStream0.write(byteArray0);
      intArray0[4] = 1;
      intArray0[5] = (-3860);
      intArray0[6] = 3;
      intArray0[7] = 1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 244, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 46, (-59), true);
      try { 
        uTF8StreamJsonParser0._decodeCharForError((byte) (-59));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000074; line: 1, column: -58]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3454);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3454);
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 224, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 49, 168, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(1752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy((int[]) null, (byte) (-81));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 49, 39, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 72, 595, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 1, 1002, false);
      uTF8StreamJsonParser1.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 72
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3197);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteQuadsCanonicalizer0.makeChild(114);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream1.markSupported();
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 57, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1838), 3, true);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((-2573));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2573
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2186, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1), 39, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)42, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, (byte)117, (byte) (-43), true);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      try { 
        uTF8StreamJsonParser0._parseName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: java.io.BufferedInputStream@0000000075; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)100;
      int int0 = 44;
      int int1 = 1093;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 48, (byte)100);
      int int2 = (-847);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3396, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 4096, (-847), true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000076; line: 1, column: -846]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "]", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 200, 200, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000077; line: 1, column: 201]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte) (-24));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 46, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-1), true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00C5\u0000\u0000\u0000\u0000\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)100;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-494), pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (-775), 3, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec1).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec1).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)100, mockFileInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray0, (byte)100, (byte)9, true);
      uTF8StreamJsonParser1.getValueAsInt(91);
      Class<Integer> class0 = Integer.class;
      uTF8StreamJsonParser1.readValueAs(class0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName2(1, (byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "END_ARRAY", true);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte) (-59), (-2645), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.readValueAs((TypeReference<?>) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 1;
      UTF8StreamJsonParser.growArrayBy(intArray0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-69);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = null;
      try {
        uTF8StreamJsonParser0 = new UTF8StreamJsonParser((IOContext) null, 2, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 163, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 6, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 2550, true);
      try { 
        uTF8StreamJsonParser1.parseMediumName2(32, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 12)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000078; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (-497), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2048, (byte)100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1852);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)71;
      System.setCurrentTimeMillis((-197L));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)71;
      byteArray1[3] = (byte)9;
      byteArray1[4] = (byte)71;
      byteArray1[5] = (byte)71;
      byteArray1[6] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, (byte)0, 13, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      byteArrayInputStream0.skip(3);
      int int0 = 3;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 3, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = (UTF8StreamJsonParser)uTF8StreamJsonParser0.overrideStdFeatures(1, 55);
      try { 
        uTF8StreamJsonParser1._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000\u0000\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.io.SequenceInputStream@0000000079; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3454);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)48;
      iOContext3.allocReadIOBuffer(1);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-63);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 3, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 31, 3, false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000080; line: 1, column: -26]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 235, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 10, 3, false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, false);
      ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.close();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1511, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(0);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.ByteArrayInputStream@0000000081; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(53);
      PipedInputStream pipedInputStream0 = new PipedInputStream(34);
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 65570, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 53, true);
      int int0 = 63;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(1223);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[0] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-27));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1023, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-128), false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 128)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000082; line: 1, column: -128]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[1];
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 513, 3400);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3400, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 116, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1588, false);
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, (byte) (-40), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1857), 1023, false);
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(236);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000083; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(53);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 57, (-1091), false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00D8' (code 216)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -1145]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-84);
      byteArray0[7] = (byte) (-9);
      byteArray0[8] = (byte)64;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-56), 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -56
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 189;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-785));
      int int1 = 588;
      byteQuadsCanonicalizer1.addName("h@s P8", (int) (byte)0, (int) (byte) (-40), 4696);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 189, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 1093, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000084; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 40, 244, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 7, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (byte) (-37), 32, true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, (-1291), mockFileInputStream0, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 100, 0, true);
      try { 
        uTF8StreamJsonParser2.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3752), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1335, true);
      try { 
        uTF8StreamJsonParser0.nextLongValue(9223372036854775807L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000085; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.nextLongValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-59);
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = (-3884);
      intArray0[6] = 3;
      intArray0[7] = 1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 244, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-839), 32, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -839
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      byteArray0[7] = (byte) (-128);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-27));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1023, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-128), false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte) (-128));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.ByteArrayInputStream@0000000086; line: 1, column: -128]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1000, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, Integer.MIN_VALUE, false);
      uTF8StreamJsonParser0.nextBooleanValue();
      uTF8StreamJsonParser0._closeInput();
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-66), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 78, true);
      uTF8StreamJsonParser1.getValueAsString();
      uTF8StreamJsonParser1.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3197);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 232, bufferedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 192, 232, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-179), bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (byte) (-82), 1857, true);
      uTF8StreamJsonParser1.getValueAsInt((-7516));
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x7f
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000087; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Integer integer0 = new Integer(2);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, integer0, true);
      byte[] byteArray0 = new byte[1];
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      boolean boolean1 = false;
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3187, 1, false);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(97);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "ehj(\";R-i", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 55296, 1360, true);
      uTF8StreamJsonParser0.getTextLength();
      try { 
        uTF8StreamJsonParser0.parseLongName(2, 2048, 255);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 2)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000088; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(233);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.setEncoding(jsonEncoding1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-197), (-1354));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-24), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 241, (-1978), false);
      uTF8StreamJsonParser0.nextFieldName();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        uTF8StreamJsonParser0.parseLongName(216, (-2683), (-2683));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000089; line: 1, column: -3955]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)100;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 44, 200, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 5);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      byteQuadsCanonicalizer0.makeChild(3197);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 949, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-82), 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -82
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 752, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-270), false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000090; line: 1, column: -258]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      byteArrayInputStream0.read();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.mark(2);
      byteQuadsCanonicalizer0.makeChild((-128));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2079), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5225, 0, false);
      Base64Variant base64Variant0 = null;
      try { 
        uTF8StreamJsonParser0.getNumberType();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: java.io.ByteArrayInputStream@0000000091; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.mark(2892);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(1);
      byteQuadsCanonicalizer1.toString();
      byteQuadsCanonicalizer0.release();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 1262, 2048, true);
      uTF8StreamJsonParser0.getValueAsInt(224);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(1262);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x4ee
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000092; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 503, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2856), 934, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2048, (-497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2856
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-101);
      byteArray0[2] = (byte)100;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 44, 200, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2694, 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1000, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2355, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1314, (byte)91, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-37);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 40, 244, true);
      uTF8StreamJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(2, (byte) (-37), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)42, 0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3322, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 484, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(3, 3, (-3429));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(32);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 42, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)91, 7, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-1338), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 874, 42, true);
      try { 
        uTF8StreamJsonParser1._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)91;
      byteArray0[0] = (byte)91;
      byte byte1 = (byte) (-128);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)91, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)91, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 440, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1265, 440, false);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x75
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(97);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "ehj(\";R-i", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(97);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2040, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, (-2482), 92, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)35;
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)35, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3891), 0, false);
      uTF8StreamJsonParser0.getValueAsInt(903);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte)35);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x23
         //  at [Source: java.lang.String@0000000093; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-81);
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-81), byteArrayInputStream1, objectCodec2, byteQuadsCanonicalizer0, byteArray1, (byte) (-81), 56320, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(685);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x2ad
         //  at [Source: java.lang.String@0000000094; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4063), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2976, (-628), true);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.Object@0000000095; line: 1, column: -627]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byteQuadsCanonicalizer1.toString();
      byteQuadsCanonicalizer1.release();
      ObjectCodec objectCodec0 = null;
      int int0 = (-4290);
      int int1 = 32;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 32, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 192, 3, false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.io.ByteArrayInputStream@0000000096; line: 1, column: -180]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byteQuadsCanonicalizer1.toString();
      byteQuadsCanonicalizer0.release();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 3, 43, false);
      uTF8StreamJsonParser0.getTextOffset();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 50, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
      uTF8StreamJsonParser1._parsePosNumber(92);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-40);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 1571);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      Integer integer0 = new Integer(1619);
      IOContext iOContext1 = new IOContext(bufferRecycler0, integer0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1619, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-264), (-3052), true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 116, false);
      try { 
        uTF8StreamJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.Integer@0000000097; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-382), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 92, 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "99,9-N?bOJ", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Integer integer0 = new Integer(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)50;
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)50, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3891), (-932), true);
      uTF8StreamJsonParser0.getValueAsInt(903);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar((byte)35);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x23
         //  at [Source: java.lang.String@0000000098; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Integer integer0 = new Integer(1);
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 7, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      uTF8StreamJsonParser0.getValueAsInt(2);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar((-3891));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ('\uF0CD' (code 61645 / 0xf0cd)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000099; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      byteArrayInputStream0.skip(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.mark(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-128));
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 168, 114, false);
      uTF8StreamJsonParser0.getValueAsInt(224);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000100; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[4];
      byte byte0 = (byte) (-116);
      byteArray1[0] = (byte) (-116);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-59);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-59), dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, (byte) (-116), (byte) (-116), false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      try { 
        uTF8StreamJsonParser0._parseName((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000101; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3454);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)54;
      byteQuadsCanonicalizer0.makeChild(3);
      byteArray0[4] = (byte)1;
      byte byte0 = (byte) (-107);
      byteArray0[5] = (byte) (-107);
      pipedInputStream0.markSupported();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 327, true);
      uTF8StreamJsonParser0._decodeCharForError(12);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      try { 
        uTF8StreamJsonParser0._parseName((byte) (-107));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x95
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000102; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, byteArrayInputStream1, true);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 2048, 9);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 35, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(0, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000103; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ")Tw", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 57);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 98);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, bufferedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5, (byte)0, false);
      uTF8StreamJsonParser0.getValueAsInt(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 192;
      intArray0[1] = 3;
      intArray0[2] = 1;
      intArray0[3] = 1383;
      intArray0[4] = 2;
      intArray0[5] = 2;
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 40, 2502, 2, 57);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 2)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000104; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3197);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte) (-3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-82));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 168, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)74;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2543, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)74, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-2213);
      intArray0[1] = 32768;
      intArray0[2] = (-368);
      intArray0[3] = 0;
      intArray0[4] = 1234;
      UTF8StreamJsonParser.growArrayBy(intArray0, 0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-106);
      byteArray0[5] = (byte) (-51);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-51), 0, false);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000105; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      UTF8StreamJsonParser.growArrayBy(intArray0, 2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      byteQuadsCanonicalizer0.makeChild(0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      UTF8StreamJsonParser.growArrayBy((int[]) null, 469);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      byteQuadsCanonicalizer0.makeChild(469);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-59);
      byteArray1[1] = (byte) (-59);
      byteArray1[2] = (byte) (-59);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 49, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 0, 78, false);
      uTF8StreamJsonParser0.getInputSource();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler1, "expected digit (0-9) to follow minus sign, for valid numeric value", true);
      byteQuadsCanonicalizer0.makeChild(57);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-131), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 0, false);
      try { 
        uTF8StreamJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000106; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte) (-40);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-40), 635);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-785));
      byteQuadsCanonicalizer1.addName("h@s P8", (int) (byte)0, (int) (byte) (-40), 4696);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 189, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)53, 588, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(1, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000107; line: 1, column: -52]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)42;
      byteArray0[0] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)117, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      int int0 = 471;
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E8' (code 232)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 5);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3197);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-82), true);
      uTF8StreamJsonParser0.getValueAsString("com.fasterxml.jackson.core.JsonFactory$Feature");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)7;
      sequenceInputStream0.read(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      sequenceInputStream0.skip(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(97);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 97, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 0, 97, false);
      int int0 = 1360;
      uTF8StreamJsonParser0.getValueAsString("ehj(\";R-i");
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(1360, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u0550' (code 1360 / 0x550)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000108; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2221);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)90;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidInitial(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000109; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)18;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)32, 1184, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-66);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2585), byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000110; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-40);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 116, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1588, false);
      SerializedString serializedString0 = new SerializedString("");
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (byte)0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2962, (byte)0, false);
      try { 
        uTF8StreamJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000111; line: 1, column: -2958]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3197);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)71;
      byteArray0[2] = (byte) (-82);
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (-1824), true);
      uTF8StreamJsonParser0.getValueAsInt(3197);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-102);
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)123;
      byteArray0[7] = (byte)106;
      byteArray0[8] = (byte)18;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1853), pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)98, (-2843), false);
      uTF8StreamJsonParser0.getValueAsInt(144);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.allocNameCopyBuffer(1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2051, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5052, 2, false);
      uTF8StreamJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.setSchema((FormatSchema) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)68;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (-504), false);
      uTF8StreamJsonParser0._closeInput();
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 114, (-2321), false);
      uTF8StreamJsonParser0.getValueAsString();
      uTF8StreamJsonParser1.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3396);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-40);
      byteArray0[6] = (byte)110;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-69), pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 46, 3, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)110, pushbackInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte) (-40), (byte)110, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -40
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 3, true);
      uTF8StreamJsonParser0.overrideStdFeatures(1, 55);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.SequenceInputStream@0000000112; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "): ", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, 3078, false);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000113; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("No current event to copy", (String) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)101;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1712), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1841), 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1841
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      int int0 = (-1523);
      byteQuadsCanonicalizer0.makeChild((-1523));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 56, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-59), 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -59
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-59);
      byteArray0[0] = (byte) (-59);
      byte byte1 = (byte)0;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 244);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      String string0 = "";
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-59);
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = (-3860);
      intArray0[6] = 3;
      intArray0[7] = 1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 244, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 46, (-59), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 635, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2637, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1885, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: java.io.ByteArrayInputStream@0000000114; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, true);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.write((-783));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-128));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte) (-128);
      byteArray0[7] = (byte) (-128);
      byteArray0[8] = (byte)91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-99), (-99), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[0] = (byte)24;
      byteArray0[3] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)24;
      byteArray1[1] = (byte)24;
      byteArray1[2] = (byte)24;
      byteArray1[3] = (byte)24;
      byteArray1[4] = (byte)24;
      byteArray1[5] = (byte) (-63);
      byteArray1[6] = (byte)24;
      byteArray1[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)24);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3757, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 4808, 1, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x18
         //  at [Source: UNKNOWN; line: 1, column: -4799]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)25;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      byteArrayInputStream0.skip(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.mark(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-128));
      byteQuadsCanonicalizer0.toString();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 168, 114, false);
      byteQuadsCanonicalizer1.addName("[com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer: size=0, hashSize=0, 0/0/0/0 pri/sec/ter/spill (=0), total:0]", 116);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.io.ByteArrayInputStream@0000000115; line: 1, column: 115]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-92);
      byte byte1 = (byte)98;
      byteArray0[2] = (byte)98;
      pipedInputStream0.markSupported();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)98, 168, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      try { 
        uTF8StreamJsonParser0._parseName((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000116; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3454);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)54;
      byteQuadsCanonicalizer0.makeChild(3);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-107);
      pipedInputStream0.markSupported();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 327, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      try { 
        uTF8StreamJsonParser0._parseName((byte) (-107));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x95
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000117; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte) (-24);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte) (-27);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-27), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)39, (byte)117, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 39
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-21), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1885, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, object0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-128);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-628), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-128), 7, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -128
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)32, 0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, byteArrayInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 646, 123, false);
      uTF8StreamJsonParser0._closeInput();
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
  }
}
