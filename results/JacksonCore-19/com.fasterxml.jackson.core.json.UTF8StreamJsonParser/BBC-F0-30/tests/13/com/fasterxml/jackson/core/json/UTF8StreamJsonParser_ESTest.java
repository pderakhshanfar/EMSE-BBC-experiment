/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 18:57:58 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile1 = new MockFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      String string0 = "wkI-~";
      mockFile1.getCanonicalFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 3, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)43;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3782, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 34, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(1023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "!]v5]gx^r");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      byte byte0 = (byte)49;
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-306), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      boolean boolean0 = false;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(366);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3205), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-15), (-3205), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        uTF8StreamJsonParser0._parseName(226);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000008; line: 1, column: -3189]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)74);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-27), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5, 0, true);
      uTF8StreamJsonParser0._decodeEscaped();
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe5
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000009; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)31;
      String string0 = "\"m6kpTmvm/";
      File file0 = MockFile.createTempFile("_Pr.Bpev$%f<Vt&N", "\"m6kpTmvm/");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.read();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)105);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-34), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)116, (byte)0, false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(48);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)31);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000010; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2262, bufferedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 2, 1612, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)52, 1612);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2262, bufferedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 2, 1612, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000011; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte)78;
      MockFile mockFile1 = new MockFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFile mockFile2 = new MockFile(mockFile0, "wkI-~");
      mockFile1.getCanonicalFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 9, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 3, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      int int0 = 2337;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 19, 35, true);
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)78;
      byteArray0[3] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 59, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 2, true);
      try { 
        uTF8StreamJsonParser0.nextIntValue(192);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/72eGvM0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      mockFile0.getCanonicalFile();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-30);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-969L));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-30), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 16, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((-4484L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      int int0 = 56;
      PipedInputStream pipedInputStream0 = new PipedInputStream(56);
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-117), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-50), (byte) (-50), false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        uTF8StreamJsonParser0._parseName(56);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-79);
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-79);
      byteArray0[6] = (byte) (-79);
      byteArray0[7] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)74);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-27), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5, 0, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe5
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 198, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 78, 2, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte) (-73));
      uTF8StreamJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)29;
      ObjectCodec objectCodec0 = null;
      byte byte1 = (byte) (-93);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[2] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = false;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 16, (-3869), true);
      try { 
        uTF8StreamJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000015; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      byte byte0 = (byte)78;
      int int0 = 365;
      file0.getCanonicalFile();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((-1L));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(58);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 365, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte) (-15), false);
      int int1 = 3214;
      byteQuadsCanonicalizer0.makeChild(5);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x4e
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000016; line: 1, column: -15]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)67, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1018), (-1018), true);
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 21)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1088), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
      uTF8StreamJsonParser0.getInputSource();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(114);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-60);
      mockFileInputStream0.release();
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)58;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-162), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1102, 4, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      uTF8StreamJsonParser0.configure(jsonParser_Feature0, false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)111;
      byteArray1[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 31, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 3657, 3, true);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xa3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: -3651]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-73);
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte) (-50);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1114111);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 4096, 3, false);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xb7
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: -4091]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-80);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocNameCopyBuffer((byte) (-125));
      byteArrayInputStream0.mark(32);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-80), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)25, false);
      uTF8StreamJsonParser0._objectCodec = null;
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.ByteArrayInputStream@0000000020; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Q#yh:+KS(*0qkInA*Y|", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      MockFile mockFile0 = new MockFile("Q#yh:+KS(*0qkInA*Y|", "Q#yh:+KS(*0qkInA*Y|");
      MockFile mockFile1 = new MockFile(mockFile0, "wkI-~");
      mockFile1.getCanonicalFile();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 5505, 1, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)78);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000021; line: 1, column: -5501]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "}F8yBjNbe(Z=x!\\I4vF";
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)127;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-355), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1, false);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)77;
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2181);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3827, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)0, 128, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)118, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, (-270), false);
      try { 
        uTF8StreamJsonParser1.parseMediumName(97);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)105;
      byteArray0[8] = (byte)31;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-579), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 34, 1, true);
      uTF8StreamJsonParser0._handleOddName(56);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      file0.getCanonicalFile();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1039));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-15), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 2, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)67, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-50), (byte) (-50), true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 21)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.allocTokenBuffer(0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(200, 98);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile.createTempFile("2vM", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 58, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 110, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(13, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 41, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 688, (-983), true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(14);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      uTF8StreamJsonParser0.getCurrentLocation();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 258);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      mockFileInputStream0.skip(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 1);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 114, 0, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.nextBooleanValue();
      SerializedString serializedString0 = new SerializedString("}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)77;
      byteArray1[1] = (byte)49;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)52;
      byteArray1[4] = (byte)90;
      byteArray1[5] = (byte)36;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte) (-54);
      byteArray1[8] = (byte)10;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 114, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 1, (byte)10, false);
      try { 
        uTF8StreamJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      file0.getCanonicalFile();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(365);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3205), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-15), (-3205), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer0.makeChild(3214);
      try { 
        uTF8StreamJsonParser0.nextLongValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000027; line: 1, column: -3185]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[3] = (byte)111;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4334, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 2, false);
      uTF8StreamJsonParser0.getValueAsDouble(0.0);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      file0.getCanonicalFile();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte) (-15);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(365);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3205), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-15), (-3205), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer0.makeChild(3214);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000029; line: 1, column: -3185]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "}F8yBjNbe(Z=x!\\I4vF";
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1255, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 2, true);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000030; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      mockFileInputStream0.skip(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1014), bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1181, 4, false);
      mockFileInputStream0.skip(1);
      uTF8StreamJsonParser0.nextLongValue(0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 12, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 0, true);
      try { 
        uTF8StreamJsonParser1._reportInvalidToken("}F8yBjNbe(Z=x!I4vF");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.read();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-14);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}F8yBjNbe(Z=x!I4vF", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 545, (byte)90, true);
      uTF8StreamJsonParser0.getCodec();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)97;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)28, 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)97, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, (byte)97, (byte)39, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      MockFile.createTempFile("z6B<i!))>^wH+x", "}F8yBjNbe(Z=x!I4vF", (File) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8, 0, false);
      uTF8StreamJsonParser0.getValueAsDouble((-2474.349355597154));
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000032; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      iOContext0.constructTextBuffer();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 47, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 114, 0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(0);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      File file0 = MockFile.createTempFile(") in numeric value", "q?H?ZNV 'YQZ!");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "s3Y4o;@'vl");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 116, 2, false);
      SerializedString serializedString0 = new SerializedString("UTF16_BE");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 34, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-283), 1, false);
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
      uTF8StreamJsonParser0.getValueAsString("");
      uTF8StreamJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[3] = (byte)111;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4334, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 619, false);
      uTF8StreamJsonParser0.getValueAsDouble(0.0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/72eGvM0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)59;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2245, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 4334, 46, true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000033; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)77;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-614), 160);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 98, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 58, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)111, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(200, 98);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 1;
      int int1 = 3;
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, dataInputStream0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1854, dataInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 1872, 0, false);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2538, mockFileInputStream0, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 3, 127, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      try { 
        uTF8StreamJsonParser1.releaseBuffered((OutputStream) pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 262144, (-2001), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      mockFile0.mkdir();
      SerializedString serializedString0 = new SerializedString("-le->1$-UnQey7FR");
      int int0 = (-239);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)3;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-239), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 43, true);
      SerializedString serializedString1 = new SerializedString("u");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)63;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 224, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1507, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2, (-1534));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)8;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-69);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-347), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 34, (-2259), true);
      String string0 = "u";
      SerializedString serializedString0 = new SerializedString("u");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      mockFileInputStream0.skip(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 7, 2, true);
      SerializedString serializedString0 = new SerializedString("}F8yBjNbe(Z=x!I4vF");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 4989, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 4989, 1, true);
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 4989;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 3;
      intArray0[7] = 2;
      intArray0[8] = 3;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 48, (-2530), 2, (-2530));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MIME");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 98, 2982, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)122, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)29, 16, false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((-708));
      uTF8StreamJsonParser0.getValueAsString((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      mockFileInputStream0.skip(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      uTF8StreamJsonParser0.getText();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 34, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1451, 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextIntValue(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "}F8yBjNbe(Z=x!I4vF", true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-778), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-663), (-663), true);
      uTF8StreamJsonParser0._parsePosNumber((-2638));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, bufferRecycler0.CHAR_TOKEN_BUFFER);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000034; line: 1, column: -1325]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      mockFileInputStream0.skip(1);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((-161));
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, bufferRecycler0.CHAR_CONCAT_BUFFER);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000035; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-56);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)127, 2, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2181, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (byte)6, 0, false);
      uTF8StreamJsonParser1._parsePosNumber(1316);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-57);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)10, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-2184), true);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-635), mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 91, 3, false);
      try { 
        uTF8StreamJsonParser0._parseName(110);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000036; line: 1, column: -2183]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 46, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1285, (byte)29, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1285, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte) (-93), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName2((-1794), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)111;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)29, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, (-1361), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(98, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)67;
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-27);
      byteArray0[5] = (byte)18;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1605));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 5326, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)18, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x43
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000037; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 0, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000038; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      MockFile.createTempFile("z6B<i!))>^wH+x", "}F8yBjNbe(Z=x!I4vF", (File) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3836), bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 51, 56, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (-1), true);
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(8);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2702), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 53, 12, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      MockFile.createTempFile("z6B<i!))>^wH+x", "z6B<i!))>^wH+x", (File) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-842), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 51, 1682, true);
      uTF8StreamJsonParser0.getValueAsDouble(3940.092140070361);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = iOContext1.allocReadIOBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 3);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)43;
      byteArray1[2] = (byte)55;
      byteArray1[3] = (byte) (-24);
      byteArray1[4] = (byte) (-82);
      byteArray1[5] = (byte) (-88);
      byteArray1[6] = (byte)39;
      byteArray1[7] = (byte)32;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte) (-24), (byte) (-82), false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      uTF8StreamJsonParser0.getValueAsDouble(2.147483647E9);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000040; line: 1, column: -51]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      MockFile.createTempFile("z6B<i!))>^wH+x", "}F8yBjNbe(Z=x!I4vF", (File) null);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8, 0, false);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000041; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 4096, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 20, (-1440), true);
      try { 
        uTF8StreamJsonParser1._parseName(6336);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000042; line: 1, column: -1439]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      file0.getCanonicalFile();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-15);
      byteArray0[6] = (byte) (-15);
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-15), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 101, 556, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-15), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2006, 13, false);
      try { 
        uTF8StreamJsonParser1._handleOddName(240);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x6f
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000043; line: 1, column: -1991]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "<i");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 16, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 1, (-993), true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, evoSuiteFile0, false);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-148), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, (-3111), 44, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 116, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 15, false);
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, (OutputStream) null, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000044; line: 1, column: 31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1023, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-320), false);
      uTF8StreamJsonParser0.getText();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-320), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 438, 3, false);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-320);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 3;
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 29)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000045; line: 1, column: -321]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[4];
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)29, 28, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 28, 2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" starting at ");
      try { 
        uTF8StreamJsonParser1._readBinary((Base64Variant) null, mockFileOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-301), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2110, 69, false);
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000046; line: 1, column: 70]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)78;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (byte)8, false);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('N' (code 78)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000047; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(199);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 2, 3, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "BahPer!1|Zpw{]1o7d", false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.nextIntValue((-4234));
      uTF8StreamJsonParser0._parsePosNumber((-4234));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-3625), true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000048; line: 1, column: -3624]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)51;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 64, true);
      uTF8StreamJsonParser0.getText();
      int int0 = 73;
      try { 
        uTF8StreamJsonParser0._parsePosNumber(95);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000049; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-61), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1418, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      int int0 = 1418;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2110, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1605));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)67, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1018), (-1018), true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 21)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-320), false);
      uTF8StreamJsonParser0.getText();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-320), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 438, 3, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer3 = byteQuadsCanonicalizer2.makeChild(50);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, 3316, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer3, byteArray0, 35, 201, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser2.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 35
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      file0.setReadable(false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1247, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, 111, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0.getCurrentLocation();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(13);
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockPrintStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000051; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "BahPer!1|Zpw{]1o7d", false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte) (-65);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-635), false);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-65), mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 256, 461, false);
      uTF8StreamJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextIntValue((byte) (-65));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)6;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte)116;
      byteArray0[5] = (byte) (-114);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1875, (byte)116, true);
      uTF8StreamJsonParser0.getValueAsString(">o6tCiz(;ul");
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsInt();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext0.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 110, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 65, 1, false);
      byte byte0 = (byte) (-57);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-57), (byte) (-113), false);
      uTF8StreamJsonParser1.getEmbeddedObject();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext2, 857, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 13, (-420), true);
      try { 
        uTF8StreamJsonParser2.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1247, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, 111, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte) (-113);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1624, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 1624, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000052; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3240), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 111, false);
      uTF8StreamJsonParser0.getValueAsString();
      uTF8StreamJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((OutputStream) filterOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000053; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy((int[]) null, (-1559));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext1.setEncoding(jsonEncoding2);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 186, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 35, (-786), false);
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000054; line: 1, column: -785]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      int int0 = 6;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 224, (byte)0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int1 = 78;
      int int2 = 102;
      char[] charArray0 = new char[4];
      uTF8StreamJsonParser0.loadMore();
      charArray0[0] = '?';
      charArray0[1] = 'j';
      charArray0[2] = ',';
      charArray0[3] = 'Y';
      // Undeclared exception!
      try { 
        iOContext0.releaseConcatBuffer(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)59;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      try { 
        uTF8StreamJsonParser0.nextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000055; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)40;
      byteArray0[4] = (byte)66;
      byteArray0[5] = (byte)82;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 51, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 91, (byte)40, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken((String) null, 66);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000056; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 224, (byte)0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 110, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 65536, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000057; line: 1, column: -223]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-27);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1584));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)67, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1018), (-1018), true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x43
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000058; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-83), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-452), false);
      uTF8StreamJsonParser0.nextTextValue();
      uTF8StreamJsonParser0.nextLongValue(1);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("al8*");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'al8*': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000059; line: 1, column: -1355]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteQuadsCanonicalizer0.makeChild(0);
      Enumeration<MockFileInputStream> enumeration1 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, sequenceInputStream1, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 102, 3, false);
      uTF8StreamJsonParser0.nextTextValue();
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000060; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 3, 0, false);
      uTF8StreamJsonParser0.getValueAsString("com.fasterxml.jackson.core.json.UTF8StreamJsonParser");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1255, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 2, true);
      uTF8StreamJsonParser1._decodeEscaped();
      uTF8StreamJsonParser1._loadToHaveAtLeast(65536);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 224, (byte)0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 804, 2, true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (-1190), mockFileInputStream0, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 9, (-1218), false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000061; line: 1, column: -223]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-615);
      intArray0[1] = 307;
      intArray0[2] = 3;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy(intArray0, (-1872));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1122), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1023, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-320), false);
      uTF8StreamJsonParser0.getText();
      int int0 = 438;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-320), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 438, 3, false);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-2150));
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 29)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000062; line: 1, column: -433]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("U'-Ck5@Jw", "J,$.");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)125;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 352, mockFileInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 63, 1, false);
      int[] intArray0 = new int[9];
      intArray0[0] = (-323);
      intArray0[1] = 3;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 352;
      intArray0[8] = 0;
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 13, 8000, 118, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000063; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 5350, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 5350 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteQuadsCanonicalizer0.makeChild(0);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-61);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 949, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 949, 3, false);
      uTF8StreamJsonParser0.nextIntValue((byte) (-1));
      uTF8StreamJsonParser0.nextLongValue((byte) (-61));
      uTF8StreamJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 184, 3, false);
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 3, true);
      uTF8StreamJsonParser0.getValueAsString("}F8yBjNbe(Z=x!I4vF");
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsInt();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(3016);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' (code 0x");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 2, 1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (-12), true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 17, (-1937), false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-747));
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, 17, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, (-1937), 57, true);
      uTF8StreamJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser2.nextIntValue(65536);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1937
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      uTF8StreamJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1044, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(116);
      byteQuadsCanonicalizer1.release();
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (-2630), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 1044, true);
      uTF8StreamJsonParser2._skipCR();
      uTF8StreamJsonParser1.getValueAsInt();
      uTF8StreamJsonParser2.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 203, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 309, (-4638), false);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 309, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2368), 200, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      file0.mkdir();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
      uTF8StreamJsonParser0.nextLongValue(26L);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1023, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-320), false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 34, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 384, 384, true);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 29)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000064; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-48), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-48), 0, false);
      uTF8StreamJsonParser0.getValueAsLong(1458L);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 21, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 752, (byte) (-48), false);
      uTF8StreamJsonParser1.nextBooleanValue();
      uTF8StreamJsonParser1._decodeCharForError(0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte) (-48));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -48
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte) (-77);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 125, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2973, 1, true);
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2601, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 1170, true);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (-1450), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 877, 2601, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3093, 0, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000065; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "}F8yBjNbe(Z=x!I4vF", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2878), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 10, 2, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
      String string0 = "$S<,6%i&tj_Yt Wo";
      String string1 = "o`C;&F*<d-J8<";
      char char0 = 'Y';
      int int0 = (-1487);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant(string0, string1, boolean0, char0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 13)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-61), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1418, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, pipedOutputStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)111;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocConcatBuffer();
      byteArray0[2] = (byte) (-12);
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2701, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 223, 12, false);
      uTF8StreamJsonParser0.nextBooleanValue();
      SerializedString serializedString0 = new SerializedString("q6n,s`>Ee=4uY[m)k");
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)111, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-12), 1, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-2), (-2), false);
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = null;
      int int0 = 125;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, 125, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(92);
      int int1 = 191;
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, bufferRecycler0.BYTE_BASE64_CODEC_BUFFER, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, int0, int1, boolean0);
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.io.BufferedInputStream@0000000066; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte byte0 = (byte)29;
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = (-320);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-320), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((byte)29);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape (CTRL-CHAR, code 29)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000067; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-268), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, (-3705), (-1175), true);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      uTF8StreamJsonParser0._releaseBuffers();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)25;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 733, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 5, (byte)57, false);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      char char0 = 'Z';
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'Z', (byte)25);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte) (-59);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)125;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-961), dataInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 15, false);
      ByteArrayBuilder byteArrayBuilder0 = uTF8StreamJsonParser0._getByteArrayBuilder();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayBuilder0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) filterOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "}F8yBjNbe(Z=x!\\I4vF";
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2601, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 1170, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2585), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, 3, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000068; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3605, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)122, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)29, (byte) (-1), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)122;
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)122;
      byteArray1[3] = (byte)122;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1317), mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 2, 2, false);
      uTF8StreamJsonParser0.getText();
      SerializedString serializedString0 = new SerializedString("");
      uTF8StreamJsonParser1.nextFieldName((SerializableString) serializedString0);
      uTF8StreamJsonParser1._parsePosNumber(432);
      uTF8StreamJsonParser1.nextLongValue(0L);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 1749;
      intArray0[1] = 16;
      intArray0[2] = 307;
      intArray0[3] = 48;
      intArray0[4] = 6;
      intArray0[5] = 69;
      intArray0[6] = 34;
      intArray0[7] = 4022;
      UTF8StreamJsonParser.growArrayBy(intArray0, 69);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2720));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer1.toString();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-551), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)56, 2, true);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 98;
      intArray0[2] = 2;
      intArray0[3] = (int) (byte)56;
      intArray0[4] = 1;
      UTF8StreamJsonParser.growArrayBy(intArray0, 583);
      uTF8StreamJsonParser0.getValueAsLong((long) (byte)56);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectCodec0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 46, 256);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 5350, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-412), 1, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-1849));
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2485), byteArrayInputStream0, objectCodec2, byteQuadsCanonicalizer1, byteArray0, 3, (-1849), true);
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.ObjectCodec$MockitoMock$1187487881@0000000069; line: 1, column: -1848]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-73);
      byteArray0[2] = (byte) (-50);
      byteArray0[3] = (byte)67;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 49;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(49);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, (byte)21, 3, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 54, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 101, (byte) (-73), true);
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xb7
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000070; line: 1, column: -171]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "1Q_JKI.");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 632, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)0, (byte)97, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 58, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2732, (-1500), true);
      uTF8StreamJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      mockFileInputStream0.markSupported();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 8000, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 65599, 1994, true);
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000071; line: 1, column: 1995]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)7;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 48, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      uTF8StreamJsonParser0._nameStartCol = 1;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.nextIntValue((byte)0);
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1740), 13);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(47);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)116, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, (byte) (-62), 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-412));
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000072; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile0.setExecutable(true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-590));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 928, (-561), true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: java.io.PushbackInputStream@0000000073; line: 1, column: -1486]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-78);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-3625), true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000074; line: 1, column: -3624]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(356);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 356, 2068, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("}F8yBjNbe(Z=x!I4vF", "3R'");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 356
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 44, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 48, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1381, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 0, 2, false);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1500));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 78, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 78, 1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-2148), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, Integer.MAX_VALUE, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.getValueAsString("{");
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 32, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)15;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 128, 3, false);
      uTF8StreamJsonParser0.nextLongValue((-2381L));
      uTF8StreamJsonParser0.getValueAsString("v& fM:un|!?Y#cj+Ghe");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(mockFile0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, mockFileInputStream1, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-268), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, (-3705), (-1175), true);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(1017);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-12);
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte) (-42);
      byteArray2[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 55, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray2, (byte) (-12), (-928), false);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.nextIntValue((-1163));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 58, (byte)0, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 73);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1317), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArrayBuilder0.NO_BYTES, (-1317), 58, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._readBinary((Base64Variant) null, byteArrayBuilder0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1317
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1023, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)0, true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000075; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((-161));
      Base64Variant base64Variant0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, bufferRecycler0.CHAR_CONCAT_BUFFER);
      try { 
        uTF8StreamJsonParser0._readBinary(base64Variant0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000076; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)11;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)11;
      sequenceInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectCodec0, false);
      int int0 = (-2639);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, sequenceInputStream0, objectCodec2, byteQuadsCanonicalizer0, byteArray0, (byte)11, 49, false);
      try { 
        uTF8StreamJsonParser0._decodeCharForError((-2639));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xb1
         //  at [Source: com.fasterxml.jackson.core.ObjectCodec$MockitoMock$1187487881@0000000077; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      file0.setReadable(false, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/72eGvM0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1576, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 91, (-864), true);
      file0.setExecutable(true, false);
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000078; line: 1, column: -930]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1247, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, 111, false);
      try { 
        uTF8StreamJsonParser0.nextIntValue(111);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000079; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile0.setExecutable(true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2436));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2436), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 3, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("72eGvM", (-2436));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      file0.toURL();
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)116, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 3, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000080; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)7;
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)7, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 48, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      uTF8StreamJsonParser0._nameStartCol = 1;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.nextIntValue((byte)7);
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2577), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 57, false);
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3093, 0, false);
      uTF8StreamJsonParser0.nextLongValue(3);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "72eGvM";
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte) (-83);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2132, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 2132, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000081; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)102);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2398), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, (byte)111, true);
      uTF8StreamJsonParser0.getTextCharacters();
      SerializedString serializedString0 = new SerializedString("IT-Vc`}sB,_i8[");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 898;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1284), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 898, 2, false);
      uTF8StreamJsonParser0.getTypeId();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/72eGvM0");
      FileSystemHandling.createFolder(evoSuiteFile1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 2, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 49, 898, true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext2, 898, mockFileInputStream0, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 1, 51, true);
      try { 
        uTF8StreamJsonParser2._closeInput();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 335);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(bufferedInputStream0, pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 13, sequenceInputStream1, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 1, (-499), false);
      uTF8StreamJsonParser0._decodeCharForError(2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = iOContext0.allocReadIOBuffer(179);
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte)100;
      byteArray0[2] = (byte) (-12);
      int int0 = 3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 125);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream0.read(byteArray1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3934, pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte) (-84), 0, true);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      uTF8StreamJsonParser0._quadBuffer = intArray0;
      byteArrayInputStream0.markSupported();
      int int1 = 224;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeCharForError(224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -84
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      FileSystemHandling.createFolder(evoSuiteFile0);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)63;
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-3625), true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B2' (code 178)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000082; line: 1, column: -3625]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)118;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 127, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("72eGvM", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '72eGvM': was expecting null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000083; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1888, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      iOContext1.setEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 92, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, (-807), false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000084; line: 1, column: -806]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1054, 47, false);
      uTF8StreamJsonParser0.nextIntValue(1054);
      uTF8StreamJsonParser0.nextLongValue(47);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-2568), false);
      uTF8StreamJsonParser1.nextToken();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-88);
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte)15;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 128, 3, false);
      uTF8StreamJsonParser0.nextLongValue((-2381L));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte) (-14);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4989, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 101, true);
      try { 
        uTF8StreamJsonParser0.nextIntValue((-1240));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000085; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, mockFile0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-113);
      byteArray0[4] = (byte) (-79);
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 54, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 3, true);
      uTF8StreamJsonParser0._parsePosNumber(44);
      uTF8StreamJsonParser0._loadToHaveAtLeast((byte)70);
      uTF8StreamJsonParser0.getInputSource();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 898, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-2563), false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = null;
      try {
        uTF8StreamJsonParser1 = new UTF8StreamJsonParser((IOContext) null, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-144), 2153, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-283), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((-161));
      Base64Variant base64Variant0 = null;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, bufferRecycler0.CHAR_CONCAT_BUFFER);
      try { 
        uTF8StreamJsonParser0._readBinary(base64Variant0, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000086; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte) (-63);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-3625), true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000087; line: 1, column: -3624]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4000);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 0, 4000, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile0.setExecutable(true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(549);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 1, true);
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2, (-893));
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 2)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000088; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      String string0 = "-le->1$-UnQey7FR";
      SerializedString serializedString0 = new SerializedString("");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1814, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      mockFileInputStream0.markSupported();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      mockFileInputStream0.read(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1950), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-31);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 11, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 11, (-3126), false);
      SerializedString serializedString0 = new SerializedString("string value");
      SerializedString serializedString1 = new SerializedString("-le->1$-UnQey7FR");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte) (-1), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 48, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      uTF8StreamJsonParser0.nextIntValue((byte) (-1));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(16);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 16);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)51, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2461, (-322), false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(2);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 18);
      uTF8StreamJsonParser0.nextIntValue(1);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000089; line: 1, column: -965]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)11;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      sequenceInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)29, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 3, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00E9': was expecting ('true', 'false' or 'null')
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000090; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile0.setExecutable(true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2436));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2436), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 3, true);
      uTF8StreamJsonParser0._decodeEscaped();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.getAbsolutePath();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("/tmp/72eGvM0");
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)59;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1839, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      try { 
        uTF8StreamJsonParser0.parseLongName(0, 1839, (byte)59);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000091; line: 1, column: 28]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-484), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)111, 2, false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000092; line: 1, column: -104]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      iOContext0.allocBase64Buffer();
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 2);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape (CTRL-CHAR, code 0)
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000093; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}F8yBjNbe(Z=x!I4vF");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1950), true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000094; line: 1, column: -1949]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte) (-105);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3428, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 52, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, " bytes", false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 54, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 0, (-1249), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x97
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000095; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.allocNameCopyBuffer(4096);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[2] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2222, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-3440), (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, (byte)29, true);
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000096; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-96);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-96), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3242, (byte) (-27), true);
      SerializedString serializedString0 = new SerializedString("-le->1$-UnQey7FR");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      bufferedInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      iOContext1.allocTokenBuffer();
      uTF8StreamJsonParser0._loadToHaveAtLeast(1730);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2222, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte) (-1), (byte) (-1), false);
      try { 
        uTF8StreamJsonParser1._parseName((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000097; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte) (-42);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1416, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xd6
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFile@0000000098; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 4, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1810), 5, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((-534L));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-27);
      byteArray0[6] = (byte)67;
      byteArray0[7] = (byte) (-55);
      byteArray0[8] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(Integer.MIN_VALUE);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 47, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x74
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000099; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)111;
      iOContext0.constructTextBuffer();
      byteArray0[2] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1572, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (byte)111, true);
      try { 
        uTF8StreamJsonParser0._handleOddName((byte) (-12));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf4
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000100; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)122, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)29, 16, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 16, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 29, false);
      try { 
        uTF8StreamJsonParser1._parseName(200);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000101; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/72eGvM0");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      mockFile0.setExecutable(true);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 0, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("72eGvM", (-965));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, (-352), 0, false);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 988, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer2, (byte[]) null, 45, 1085, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 93, 457, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2168, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-96), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (byte)41, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000102; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1500), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 4, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 32, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2701, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-105), 1518, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -105
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 102, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1500), 1, true);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1500
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-1);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 697, 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName((-357));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1047, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 12, (byte)0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(1935);
      uTF8StreamJsonParser0.getValueAsInt();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1385), 34, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-1385));
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      byte byte0 = (byte) (-1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)50, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArrayBuilder0.NO_BYTES, (-1693), (byte) (-36), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1693
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      file0.setWritable(false);
      mockFileInputStream0.markSupported();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(78);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)47;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-48), 102, false);
      mockFileInputStream0.read(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)111, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 13, 2775, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("i.D2REaPAx|Wi", "Decimal point not followed by a digit");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      iOContext0.allocConcatBuffer();
      byteQuadsCanonicalizer1.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 95, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 5350, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-412));
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000103; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 128, 61, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 4, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1234), 117, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._matchToken(" bytes", 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1234
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}i>Zby)3.fr^'b/m~i", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-34);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 1, 1, false);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      try { 
        uTF8StreamJsonParser0.loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      MockFile.createTempFile("72eGvM", "");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "72eGvM", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 16, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte)41, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 240, 240, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextIntValue((-815));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 465, 988);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)73;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 465, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 65599, (-1136), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(48, (byte)59, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1639, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(200, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)4;
      IOContext iOContext1 = new IOContext(bufferRecycler0, pushbackInputStream0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 21, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 61, 25, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 47, pushbackInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, (byte)64, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName2((byte) (-64), 2553);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-61);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-42);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 3397, 1, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 9, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 0, true);
      try { 
        uTF8StreamJsonParser1.parseMediumName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 29)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000104; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-12);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 92, (byte)0, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((byte)0);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 3;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 58, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 202, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1031, (-1240), true);
      try { 
        uTF8StreamJsonParser1.nextIntValue(1929);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-949), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 116, (-116), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.createFolder(evoSuiteFile0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 65536, true);
      uTF8StreamJsonParser0.getCodec();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3470, (-197), false);
      try { 
        uTF8StreamJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000105; line: 1, column: -196]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 180);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = (-2633);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1019, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (-3456), (-2633), true);
      int int1 = 58;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName((int[]) null, 58, 58, 1, (-2660));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3456
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = null;
      iOContext1.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      pipedInputStream0.markSupported();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      int int0 = 3281;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 9, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 114, 31, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      System.setCurrentTimeMillis(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 0, false);
      uTF8StreamJsonParser0._releaseBuffers();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Mh%surf}@$;o}T@Mw%", "Mh%surf}@$;o}T@Mw%", false, 'v', 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 18)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext2 = new IOContext(bufferRecycler1, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext3 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 13, (-1958), true);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(53);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read -1971 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      iOContext0.allocWriteEncodingBuffer();
      byte[] byteArray0 = new byte[3];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild((-2489));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 48, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 3861, (-776), true);
      try { 
        uTF8StreamJsonParser0.parseLongName(0, 65599, (byte) (-12));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2222, pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 411, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.parseEscapedName((int[]) null, 0, 112, 0, (-1500));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)6;
      byteArray0[2] = (byte)69;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)118;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 127, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName((byte) (-114));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)29;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(50);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 39, mockFileInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1023, 224, true);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)29;
      intArray0[1] = 224;
      intArray0[2] = 2;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 55, (byte)29, (-1767), 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1767
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      iOContext1.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      iOContext0.setEncoding(jsonEncoding0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (-1525), 1, (-1683), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1683
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 2227, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 908, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 2, true);
      uTF8StreamJsonParser1.getTextLength();
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000106; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2577), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 57, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      iOContext1.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000107; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2222, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, mockFileInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte) (-1), (-2961), true);
      try { 
        uTF8StreamJsonParser0.nextIntValue(1742);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00FF': was expecting ('true', 'false' or 'null')
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000108; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4#vF", (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)29, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 57, (byte) (-44), true);
      uTF8StreamJsonParser0.getText();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1094, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2578, (byte) (-44), true);
      byteQuadsCanonicalizer0.makeChild((-3402));
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x1d
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000109; line: 1, column: -98]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-320));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 759, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 52, 52, false);
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000110; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)14;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 47, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1402, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000111; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte)0;
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 50, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 125, 1, false);
      try { 
        uTF8StreamJsonParser0._matchToken("Sv%_.E-/*XtP0@R", (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000112; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 3, 0, false);
      int int0 = 46;
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte) (-99);
      byte byte1 = (byte) (-81);
      byteArray0[3] = (byte) (-81);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-81), 501, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(5350);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 82]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-3456), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(1189);
      uTF8StreamJsonParser0.getValueAsInt(2);
      iOContext0.allocBase64Buffer();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(37, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000113; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 5350, false);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(46);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 5350 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(192);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 92, (-5624), true);
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte) (-42));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-42);
      byteArray1[8] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 1, 1023, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(3483L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 29)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000114; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)0, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 61, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 58, 28, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-901), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 28, (-901), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(0, 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 58
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 465, 988);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)73;
      byteArray1[1] = (byte)98;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte) (-33);
      byteArray1[4] = (byte) (-33);
      byteArray1[5] = (byte) (-33);
      byteArray1[6] = (byte) (-33);
      byteArray1[7] = (byte)63;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2175), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 61, 25, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)31, (byte)73);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      iOContext0.constructTextBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1313), pipedInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (-1313), 32, false);
      uTF8StreamJsonParser0.getText();
      int int0 = 5087;
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue((-1313));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000115; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, file0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 835, 48, true);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-7);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1392, (byte) (-59), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1384), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1863, (-1384), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 10);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileDescriptor0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(205);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(10);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 119, (-1172), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      File file0 = MockFile.createTempFile("n_{CWTL", "-");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream1, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      int int0 = 47;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)8;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)8, (byte)8, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 102, 102, false);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000116; line: 1, column: 103]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2222, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte) (-1);
      intArray0[1] = (int) (byte) (-1);
      intArray0[2] = 0;
      intArray0[3] = (int) (byte)29;
      intArray0[4] = (int) (byte)29;
      intArray0[5] = 80;
      intArray0[6] = 3;
      intArray0[7] = (-2568);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000117; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 53, pipedInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray0, (byte)52, (-1), true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-26), pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (-65), (-65), true);
      try { 
        uTF8StreamJsonParser1._matchToken("", (-4054));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte byte0 = (byte)0;
      int int0 = 58;
      int int1 = 6;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 3;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 58, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer.createRoot();
      int int0 = 2081;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2081, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-32768), 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3175), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 100, 78, false);
      uTF8StreamJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "}F8yBjNbe(Z=x!\\I4vF";
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 46, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1285, (byte)29, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(2701);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xa3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000118; line: 1, column: -1253]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2720));
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext2.allocBase64Buffer();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 2, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 730, 127, false);
      try { 
        uTF8StreamJsonParser0._parseName(957);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbd
         //  at [Source: java.io.SequenceInputStream@0000000119; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 16, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 16, 16, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2352), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1686, false);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext2, 500, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-1), 26, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser2._parseName((-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-16);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-16), (byte)0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)13, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 52, 52, true);
      try { 
        uTF8StreamJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      int int0 = (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-61));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pj,vj");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 177, (byte)0, false);
      uTF8StreamJsonParser0.getValueAsInt(1);
      iOContext1.allocBase64Buffer();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(2, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000120; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)122, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)29, 16, false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((-708));
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer0, false);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 16, 3, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000121; line: 1, column: -11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[1] = (byte)48;
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4948), pipedInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, (-2300), (byte) (-26), false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 102, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, (byte)48, true);
      try { 
        uTF8StreamJsonParser1.nextLongValue(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E6' (code 230)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000122; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte) (-13);
      byteArray0[8] = (byte) (-77);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 47, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 43, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000123; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte byte0 = (byte)0;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 48, pipedInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray0, (byte)0, 3, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00E6' (code 230)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000124; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(110);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 13, 3, true);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-2103));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[6];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1279), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1053), false);
      try { 
        uTF8StreamJsonParser0._matchToken(".P=a Dc5", 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-286));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(file0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, mockFileInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-2602), 13, false);
      uTF8StreamJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2602
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-77);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray2 = iOContext1.allocBase64Buffer();
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 110, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray2, 65, 1, true);
      uTF8StreamJsonParser0.getValueAsInt(1);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2720));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-551), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-1433), 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1433
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      int int0 = 4;
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 672, 0, true);
      Class<InputStream> class0 = InputStream.class;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)11;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      sequenceInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-23), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.io.PushbackInputStream@0000000125; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      byteQuadsCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)70;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-13);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)22;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 16, 1, true);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)7, 4989, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue((-1240));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 173, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-1970), 474, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1970
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(Integer.MAX_VALUE);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2701, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 2701, 5, true);
      uTF8StreamJsonParser0._nameStartRow = 3;
      try { 
        uTF8StreamJsonParser0._handleOddName((byte)105);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000126; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-61));
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 117, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, 551, false);
      uTF8StreamJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-3625));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 492, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (byte)29, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue((-3101L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'o\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000127; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)12;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)29;
      int int0 = 2227;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 6, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2227, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "was expecting double-quote to start field name");
      uTF8StreamJsonParser0.getValueAsInt((-2));
      iOContext0.allocBase64Buffer();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(80, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('P' (code 80)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000128; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 173, 726, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 173
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 1, 58, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 43, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-513), 1, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -513
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1977);
      byte byte0 = (byte)52;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)48;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)52;
      byteArray0[5] = (byte)52;
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-26), 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)11;
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      sequenceInputStream0.read(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-23), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-874), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-730), (byte) (-26), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -730
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      int int0 = 58;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 58, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("was expecting a colon to separate field name and value", "was expecting a colon to separate field name and value");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(35);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)63;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1924, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (-286), false);
      uTF8StreamJsonParser0.nextLongValue(1634L);
      uTF8StreamJsonParser0._parsePosNumber(15);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder();
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000129; line: 1, column: -857]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)0, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)48;
      int int0 = 47;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 47, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)48, (-1313), true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000130; line: 1, column: -1312]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "72eGvM", false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)46;
      byteArray0[0] = (byte)83;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 47, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-872), (byte)0, true);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, 3, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1054, (-3457), false);
      uTF8StreamJsonParser1.nextFieldName();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -872
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2167, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 3, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-1745), sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1569, (-1745), false);
      uTF8StreamJsonParser1.nextFieldName();
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000131; line: 1, column: -3489]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 116, (byte)0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-936), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 201, 0, true);
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000132; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-434), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 2, true);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(6000);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)122);
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.JsonEncoding@0000000133; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1054, 47, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000134; line: 1, column: 48]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-56));
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1169), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-1135), 2223, true);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1103);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1135
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2701);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte) (-67);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(file0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 1, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1018), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, (-2441), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName((byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-42);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 3397, 1, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 9, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 0, true);
      try { 
        uTF8StreamJsonParser1.parseMediumName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 29)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000135; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-27), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2423), 57, true);
      uTF8StreamJsonParser0.getTextOffset();
      try { 
        uTF8StreamJsonParser0._reportInvalidChar((byte)105);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x69
         //  at [Source: java.io.ByteArrayInputStream@0000000136; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-61);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 2616, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-1), 0, true);
      try { 
        uTF8StreamJsonParser0.getDoubleValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000137; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 47;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 47, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)48, (-1313), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)68;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 65536, (byte)16, false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 58, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 58, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-5), 13, false);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._reportInvalidToken("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte byte0 = (byte)0;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 3, (-61));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      int int0 = (-3424);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1181, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 117, (-3424), false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken(")k,ytin*lv}+{!<O");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token ')k,ytin*lv}+{!<O': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000138; line: 1, column: -3423]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext1, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte) (-1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, (-907), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2184), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 5, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)10, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 32, 3, false);
      try { 
        uTF8StreamJsonParser1._parseName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000139; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      String string0 = "?0\\u`yK.*Hx=DS}9dT";
      IOContext iOContext1 = new IOContext(bufferRecycler0, string0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext0.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 111, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)41, 255, false);
      try { 
        uTF8StreamJsonParser0._parseName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000140; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-13);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 16, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 56, 853, false);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)52;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 1, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000141; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)122;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3187), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-1), (byte) (-1), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName((-1608));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1608
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte) (-34);
      byteArray0[4] = (byte) (-20);
      byteArray0[5] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-4072), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 65536, (byte)50, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName(752);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 752
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 192, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (-1488), false);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 65599, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 192, 1069, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseName(65599);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65599
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 39, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-3625), (-4677), false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext2 = new IOContext(bufferRecycler0, object0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 44, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 327, 1, true);
      try { 
        uTF8StreamJsonParser0._parseName(2973);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x9d
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000142; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 128, 0, true);
      uTF8StreamJsonParser0.getValueAsInt();
      uTF8StreamJsonParser0.getInputSource();
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)52;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 1, true);
      try { 
        uTF8StreamJsonParser0._parseName((byte)48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('0' (code 48)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000143; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-96);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
      try { 
        uTF8StreamJsonParser0._parseName(2167);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000144; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      sequenceInputStream0.skip((-612L));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)7, (byte)7, true);
      try { 
        uTF8StreamJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000145; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-1);
      sequenceInputStream0.skip(1L);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-944), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1, false);
      try { 
        uTF8StreamJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000146; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "6n3g", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-753), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (byte)29, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 29)): has to be escaped using backslash to be included in string value
         //  at [Source: java.lang.String@0000000147; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)12;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 368, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (byte)11, false);
      uTF8StreamJsonParser0.getValueAsInt(0);
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(0, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000148; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)9;
      byteArray1[1] = (byte)41;
      byteArray1[2] = (byte) (-27);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray2 = iOContext1.allocBase64Buffer();
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 110, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray2, 65, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(47);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x2f
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000149; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte) (-42);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 3397, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar((-1503));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ('\uFA21' (code 64033 / 0xfa21)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000150; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)120;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-1);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-1);
      byteArray1[5] = (byte) (-1);
      byte byte0 = (byte)7;
      byteArray1[6] = (byte)7;
      byteArray1[7] = (byte)120;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1181), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (-1181), (byte)0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1181
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_LE;
      iOContext2.withEncoding(jsonEncoding2);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 34, (byte)0, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)2;
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)2;
      byteArray1[3] = (byte)2;
      byteArray1[4] = (byte) (-64);
      byteArray1[5] = (byte) (-105);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)2;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 573, (-1235), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "true");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1950), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-1950), false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      iOContext0.allocWriteEncodingBuffer(3);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2083), (-2360), false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 197, 101, false);
      uTF8StreamJsonParser0._closeInput();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("72eGvM", (-965));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte)29;
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-42);
      int int0 = 34;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(34);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 44, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, (byte) (-42), (byte) (-42), false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)29);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 58, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 58, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 13, false);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000151; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (-4001), false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber(102);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)32;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 16, 1, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-13);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1313), pipedInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (-1313), 32, false);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(5087);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1313
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "72eGvM");
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 116, 0, false);
      uTF8StreamJsonParser0.getText();
      System.setCurrentTimeMillis(116);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("72eGvM", 533);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 101, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)0, 31, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, 1247, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 2174, false);
      try { 
        uTF8StreamJsonParser1.nextIntValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000152; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocBase64Buffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2415, false);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 2563, true);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("n_{CWTL", "n_{CWTL");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext1, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)122;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, (-907), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-90);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)39;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 16, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)126, (-1461), true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000153; line: 1, column: -1460]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(file0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)122;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)122;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2167, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)122, 1, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.io.PipedInputStream@0000000154; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte) (-107);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, (byte)68, false);
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._reportInvalidInitial(126);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x7e
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000155; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3470, (-197), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000156; line: 1, column: -196]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte) (-105);
      byteArray0[7] = (byte) (-64);
      byteArray0[8] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-13), 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-120);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)20;
      byteArray0[8] = (byte) (-120);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 92, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)51, 1247, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)20, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-38), (byte)20, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -38
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1300);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)120;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, (byte)0, false);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte) (-13), 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xfffffff3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000157; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2631, 1, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      file0.setReadable(false, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)76;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 13, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "dfUw:qG", true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-310));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-48);
      byteArray0[8] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1439), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)26, (byte)111, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      int int0 = 1592;
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 575, 1592, true);
      int int1 = (-2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "was expecting double-quote to start field name");
      uTF8StreamJsonParser0.getValueAsInt(65599);
      iOContext1.allocBase64Buffer();
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(575, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u023F' (code 575 / 0x23f)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000158; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-87);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, (-363), false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.AUTO_CLOSE_SOURCE;
      uTF8StreamJsonParser0.disable(jsonParser_Feature0);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1000, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-1781), (-2516), true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 47, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, (-2265), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[0];
      int int0 = 16;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 18, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 16, true);
      uTF8StreamJsonParser0.getTextCharacters();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 3;
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)73);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 3, false);
      uTF8StreamJsonParser0.getTextCharacters();
      SerializedString serializedString0 = new SerializedString(".Lvw,.c[{");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000159; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      File file0 = MockFile.createTempFile("}F8yBjNbe(Z=x!I4vF", "}F8yBjNbe(Z=x!I4vF");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 2);
      MockFileInputStream mockFileInputStream1 = new MockFileInputStream(file0);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-86);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-43);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)117, 43, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-54), mockFileInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-43), 1, false);
      uTF8StreamJsonParser1._loadToHaveAtLeast(0);
      uTF8StreamJsonParser1.getTextLength();
      uTF8StreamJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte)69);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)18, (-1012), true);
      uTF8StreamJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)15;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1663, 16, false);
      uTF8StreamJsonParser0._closeInput();
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)121;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)13;
      byteArray0[8] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 180, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)13, 3086, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (-405));
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      IOContext iOContext0 = new IOContext(bufferRecycler0, pipedInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-16);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-16), (byte)0, true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)14);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte) (-42);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte) (-42);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)14, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2807, 4269, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2807
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-5001), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 3, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000160; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      MockFile mockFile0 = new MockFile("}F8yBjNbe(Z=x!I4vF");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte) (-93);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1285, 1543, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1285, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)29, 2, true);
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xa3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000161; line: 1, column: -24]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1365);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-1), 4, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)29;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-42);
      byteArray1[5] = (byte) (-42);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte) (-42);
      byteArray1[8] = (byte)29;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 1, 1023, false);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 29)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000162; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile("ODz8", "ODz8");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/}F8yBjNbe(Z=x!\\I4vF0}F8yBjNbe(Z=x!\\I4vF");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte)98;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 46, 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(46);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-27), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2423), 57, true);
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2423
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "$z7Y/3g5dvOw&,Vm>C\"", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)46;
      byteArray0[5] = (byte) (-32);
      byteArray0[6] = (byte)36;
      byteArray0[7] = (byte)30;
      byteArray0[8] = (byte) (-24);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, dataInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 34, 2, false);
      int int0 = uTF8StreamJsonParser0.getTextOffset();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1726, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)0, true);
      try { 
        uTF8StreamJsonParser0.parseLongName(48, 9, (byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000163; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      pipedInputStream0.close();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 44, 500, true);
      try { 
        uTF8StreamJsonParser0.parseLongName(48, 65599, 8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte) (-11);
      byteArray0[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, 48, false);
      try { 
        uTF8StreamJsonParser0.parseLongName(461, 2, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 4)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000164; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-779), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2675), 1, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(0, (-2980), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2675
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3470, (-197), false);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: org.evosuite.runtime.mock.java.io.MockFileInputStream@0000000165; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)52;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 1, true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-32);
      byte byte0 = (byte)68;
      byteArray0[4] = (byte)68;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1993), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1751, (-1197), true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte)65, (-2129));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x41
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000166; line: 1, column: -3879]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)85;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte) (-117);
      byteArray0[7] = (byte)43;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 6, (byte)43, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000167; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      File file0 = MockFile.createTempFile("72eGvM", "");
      MockFile mockFile0 = new MockFile(file0, "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(mockFile0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)123;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 8, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 116, 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("72eGvM", 533);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
