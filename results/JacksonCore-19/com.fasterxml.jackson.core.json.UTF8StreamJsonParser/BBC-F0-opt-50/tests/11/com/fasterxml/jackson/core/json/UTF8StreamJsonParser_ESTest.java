/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 07:37:14 GMT 2021
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class UTF8StreamJsonParser_ESTest extends UTF8StreamJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      iOContext0.allocNameCopyBuffer(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 34, true);
      uTF8StreamJsonParser0._tokenIncomplete = true;
      uTF8StreamJsonParser0.getValueAsInt(2);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 56320, (byte)116, false);
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)10;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 43, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue(1167L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 934);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (byte)101);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-426), pushbackInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 3650, 1024, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 98, pushbackInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1602, 0, true);
      uTF8StreamJsonParser1._parseAposName();
      try { 
        uTF8StreamJsonParser1._matchToken("com.fasterxml.jackson.core.type.ResolvedType", (byte)39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com.fasterxml.jackson.core.type.Resolvee': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000012; line: 1, column: -1597]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-64);
      byteArray0[3] = (byte) (-89);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-216), (byte) (-89), false);
      Class<InputStream> class0 = InputStream.class;
      uTF8StreamJsonParser0.readValueAs(class0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(3);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 2227, (byte)34);
      byteArrayInputStream3.close();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 2531, byteArrayInputStream2, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 92, 1, false);
      uTF8StreamJsonParser1.slowParseName();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild((byte)57);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 128, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2430, 617, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -1807]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1636, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 13, false);
      uTF8StreamJsonParser0._parsePosNumber((byte) (-33));
      uTF8StreamJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = (-1847);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(32768);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)92, 72, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)117;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 125, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName((byte)117);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)1;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1636, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 13, false);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000013; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[17];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "XhacQ17]h(hCpsW5");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray1, 826, 3080, false);
      MockFile mockFile0 = new MockFile("XhacQ17]h(hCpsW5");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, mockPrintStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1847));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 127, 43, true);
      Base64Variant base64Variant0 = null;
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000014; line: 1, column: -67]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1363), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1285), true);
      uTF8StreamJsonParser0.getValueAsString(",#,ZDk89Nm;`gjD");
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.lang.String@0000000015; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-126);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2074, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 2, true);
      try { 
        uTF8StreamJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.io.DataInputStream@0000000016; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocConcatBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      boolean boolean0 = true;
      int int0 = (-1847);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(0);
      int int1 = 390;
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 54, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[0] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000017; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 2, true);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x20
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000018; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 5, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 91, (-561), true);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.nextFieldName();
      uTF8StreamJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte byte0 = (byte)54;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[0] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 2048;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 18, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 2048, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)54, (byte)34);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[0] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000019; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)69;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)57;
      byteArray2[1] = (byte)48;
      byteArray2[2] = (byte)57;
      byteArray2[3] = (byte) (-12);
      byteArray2[4] = (byte)34;
      byteArray2[5] = (byte)69;
      byteArray2[6] = (byte)69;
      byteArray2[7] = (byte)59;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray2);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 323, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)57, (byte)34, false);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00F4' (code 244)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 331);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '!';
      charArray0[2] = 'J';
      charArray0[3] = 'G';
      charArray0[4] = '+';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 331, 2, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1016, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, (-1311), false);
      try { 
        uTF8StreamJsonParser1._handleOddName(102);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x66c3c3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000020; line: 1, column: -1308]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-54);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-54);
      byteArray1[1] = (byte) (-54);
      byteArray1[2] = (byte) (-54);
      byteArray1[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, (byte) (-54), true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000021; line: 1, column: -52]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9@&&g ");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1373), (byte)34, false);
      uTF8StreamJsonParser0.readValueAsTree();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec1).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn("2tN 2a}t$P<e{").when(objectCodec1).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 78, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, Integer.MAX_VALUE, false);
      uTF8StreamJsonParser1._finishAndReturnString();
      uTF8StreamJsonParser1.readValueAsTree();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-106);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.releaseConcatBuffer((char[]) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)78);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)78, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, (byte) (-106), true);
      uTF8StreamJsonParser0._handleOddName((byte)78);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 78, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, Integer.MAX_VALUE, false);
      uTF8StreamJsonParser0.readValueAsTree();
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (byte)54, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, (-550), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName((-2534));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 331);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = '!';
      charArray0[2] = 'J';
      charArray0[3] = 'G';
      charArray0[4] = '+';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 331, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler2, bufferRecycler2, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      byteArray0[6] = (byte)48;
      byteArray0[7] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 842, (byte)34, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0._closeInput();
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000022; line: 1, column: -791]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2798);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 12, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1250, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeCharForError(2798);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)7;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-603), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)7, 2, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)111;
      byteArray0[7] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-4332));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 19, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)92, (-429), true);
      uTF8StreamJsonParser0._parseAposName();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer.createRoot();
      iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 110, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)54, 1, false);
      uTF8StreamJsonParser0._finishString();
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00B9' (code 185)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000023; line: 1, column: -44]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte byte0 = (byte)111;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)111;
      byteArray0[7] = (byte)111;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)111;
      byteArray0[2] = (byte)69;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, false);
      uTF8StreamJsonParser0.getValueAsInt((int) (byte)69);
      uTF8StreamJsonParser0._decodeCharForError(0);
      try { 
        uTF8StreamJsonParser0._parseName(34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000024; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3182), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)48, 0, true);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000025; line: 1, column: -43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocBase64Buffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 1, 0, false);
      uTF8StreamJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(98);
      PipedInputStream pipedInputStream0 = new PipedInputStream(646);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 91, (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, (byte[]) null, 1, 1, true);
      uTF8StreamJsonParser1.nextLongValue((-1873));
      uTF8StreamJsonParser1.overrideStdFeatures((-1873), 98);
      uTF8StreamJsonParser1.getValueAsInt(646);
      uTF8StreamJsonParser1.nextToken();
      uTF8StreamJsonParser1.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "Decimal point not followed by a digit", false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 56, 0, false);
      uTF8StreamJsonParser0._decodeEscaped();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 98, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, (-81), (byte) (-83), false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("^");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000026; line: 1, column: -53]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 136, (byte)48, true);
      uTF8StreamJsonParser0.getValueAsInt(26);
      uTF8StreamJsonParser0.nextToken();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.getTextCharacters();
      uTF8StreamJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)57;
      byteArray1[3] = (byte)48;
      byteArray1[3] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild((byte)57);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild((byte)48);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)0, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer2, byteArray1, (byte)57, (-7), false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -58]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[12];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectCodec0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1360), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 15, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: com.fasterxml.jackson.core.ObjectCodec$MockitoMock$1827147892@0000000027; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)47;
      byteArray1[1] = (byte)47;
      byteArray1[2] = (byte)47;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)47;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 101, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, (-398), false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000028; line: 1, column: -396]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-42);
      iOContext0.constructTextBuffer();
      byte byte0 = (byte)57;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 358, true);
      int int0 = (-71);
      int int1 = (-1422);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000029; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte)92);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 237, 125, false);
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('}' (code 125)): expected a value
         //  at [Source: java.lang.String@0000000030; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte byte0 = (byte)111;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)111;
      byteArray0[2] = (byte)69;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 101, true);
      uTF8StreamJsonParser0.getValueAsInt((int) (byte)69);
      uTF8StreamJsonParser0._decodeCharForError(0);
      try { 
        uTF8StreamJsonParser0._parseName(34);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000031; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1704));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 123, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 721, 91, true);
      try { 
        uTF8StreamJsonParser0.nextIntValue(721);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(254);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = iOContext1.allocWriteEncodingBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 110, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1788, 140, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-708), (-2865), true);
      try { 
        uTF8StreamJsonParser1._parseName(742);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      iOContext0.allocReadIOBuffer((-2949));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8, 2, true);
      iOContext0.allocTokenBuffer();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._parseNegNumber();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer not owned by the context
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)56;
      byteArray0[2] = (byte)91;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-5455));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-128));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000032; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(631);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1610));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)27, byteArrayInputStream2, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)27, 2, false);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 27)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000033; line: 1, column: -23]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.markSupported();
      byteQuadsCanonicalizer0.makeChild((-493));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 34, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 36, 2646, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName(34);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)39;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1186, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("+", "+");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc8
         //  at [Source: java.lang.String@0000000034; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1753), byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2344, 701, false);
      uTF8StreamJsonParser0.nextIntValue(44);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.setEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1359), false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte)117, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 35, 3358, false);
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000035; line: 1, column: 3328]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)106);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1248));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 117, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 128, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "+";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[20];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byte byte0 = (byte)44;
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)39;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1186, true);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc8
         //  at [Source: java.lang.String@0000000036; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      iOContext0.allocNameCopyBuffer(813);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.allocTokenBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream2, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 427, false);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, (-4301), 0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 88, 3167, false);
      try { 
        uTF8StreamJsonParser0.parseLongName(1, 69, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000037; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)43, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-3499), dataInputStream1, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 0, 4220, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-3269), false);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't6\u001A\u001A6\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000038; line: 1, column: -3255]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      iOContext0.allocNameCopyBuffer(813);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2950), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 40, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(61, 1118);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-61);
      byteArray0[2] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 331);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0, 3);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 0, false);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc3
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000039; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((int) (byte)92);
      iOContext1.allocTokenBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4000, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, 759, true);
      uTF8StreamJsonParser0.getTokenLocation();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, 1885, 228, true);
      uTF8StreamJsonParser1.getValueAsInt((int) (byte) (-46));
      uTF8StreamJsonParser0.getCurrentLocation();
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x5c
         //  at [Source: java.io.ByteArrayInputStream@0000000040; line: 1, column: -1650]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)37;
      byteArray0[5] = (byte)42;
      byteArray1[2] = (byte)42;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(2);
      bufferRecycler0.allocCharBuffer((int) (byte)0, (int) (byte)42);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)37, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 2, (-727), false);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000041; line: 1, column: -714]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[6];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild((byte)101);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, (-1497), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 65536, 101, false);
      uTF8StreamJsonParser0.getValueAsDouble((double) 1);
      uTF8StreamJsonParser0._parseNegNumber();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)93;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)93;
      byteArray1[6] = (byte)26;
      byteArray1[1] = (byte)93;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)53, false);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000042; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer(1392);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 240);
      IOContext iOContext2 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 963, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 908, 3, true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000043; line: 1, column: -902]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(1392);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 240);
      IOContext iOContext2 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer1, false);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1, bufferedInputStream1, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 240, 240, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)91;
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-1269));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 95, (-2535), false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xe7
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000044; line: 1, column: -2626]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-17);
      byteArray0[7] = (byte)114;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (-1323));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-106), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 358, true);
      uTF8StreamJsonParser0._parsePosNumber(1);
      try { 
        uTF8StreamJsonParser0._reportInvalidInitial(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x3
         //  at [Source: java.io.DataInputStream@0000000045; line: 2, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      String string0 = "No Base64Variant with name ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No Base64Variant with name ");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)43, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getCurrentLocation();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "No Base64Variant with name ", true, 'S', (-5203));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-3464), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)101, 10, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(3036);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('e' (code 101)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: -88]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8, 2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._parseNegNumber();
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2092), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 6, (-1333), false);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('+' (code 43)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.io.DataInputStream@0000000046; line: 1, column: -1336]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      iOContext1.allocNameCopyBuffer(0);
      iOContext0.allocConcatBuffer();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.io.ByteArrayInputStream@0000000047; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocConcatBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      iOContext1.allocTokenBuffer(2282);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(117);
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, (byte)0, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 117, true);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      iOContext0.allocConcatBuffer();
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      iOContext0.allocTokenBuffer(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 128);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, false);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1023);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 48, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 3953, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.io.BufferedInputStream@0000000048; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-46);
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteArrayInputStream0, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((int) (byte)92);
      iOContext1.allocTokenBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4000, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, 759, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x5c
         //  at [Source: java.io.ByteArrayInputStream@0000000049; line: 1, column: 763]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)7;
      iOContext0.allocBase64Buffer();
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ALLOW_NUMERIC_LEADING_ZEROS");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-777), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-2722), (-2266), true);
      int int0 = 73;
      int int1 = 49;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue((byte)21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2722
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte) (-60);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-60), 772, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -60
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-106);
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 61, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 0, 3, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'N': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000050; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 135, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 69, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 1810, 3, false);
      uTF8StreamJsonParser1.getValueAsInt(0);
      try { 
        uTF8StreamJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\"' (code 34)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000051; line: 1, column: -1799]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$-");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(52);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)54, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, (-55), false);
      uTF8StreamJsonParser0.getTokenLocation();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 2, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 52, 0, true);
      uTF8StreamJsonParser1._loadToHaveAtLeast(2);
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000052; line: 1, column: -47]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1873));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1873), (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 224, 0, true);
      uTF8StreamJsonParser0.nextLongValue(0L);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 49, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 3, 3, false);
      uTF8StreamJsonParser1.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)53;
      byteArray1[1] = (byte)92;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)53;
      byteArray1[5] = (byte)92;
      byteArray1[6] = (byte)26;
      byteArray1[7] = (byte)92;
      byteArrayInputStream0.read(byteArray1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)26, 1, false);
      uTF8StreamJsonParser0.nextIntValue((-711));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)91;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer1.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1615, (InputStream) null, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 3, 1615, false);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 98, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser1.getTokenLocation();
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(2);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream2.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 976, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3163, 1, false);
      SerializedString serializedString0 = new SerializedString("");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[22];
      byte byte0 = (byte) (-12);
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer((int) (byte)7);
      iOContext2.allocTokenBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte) (-12), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, (byte)12, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc
         //  at [Source: java.lang.String@0000000053; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-42);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-82);
      byteArray1[1] = (byte)32;
      byteArray1[2] = (byte) (-42);
      byteArray1[3] = (byte) (-42);
      byteArray1[4] = (byte) (-82);
      byteArray1[5] = (byte) (-82);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)32, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, (byte)32, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xae
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000054; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)71;
      byte byte0 = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 9);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 402);
      int int0 = 91;
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1373), pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 91, false);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$-");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(52);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 752, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 46, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0._closeInput();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 7, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream(255);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1097));
      int int0 = 224;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte) (-87);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2015), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 2, false);
      try { 
        uTF8StreamJsonParser0.nextLongValue(0L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2660));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler1, "+?yQ", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2238), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-2052), false);
      uTF8StreamJsonParser0.nextToken();
      int[] intArray0 = new int[0];
      UTF8StreamJsonParser.growArrayBy(intArray0, 0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-56);
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler2, jsonEncoding0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1802, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)55, 0, true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00C8' (code 200)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.JsonEncoding@0000000055; line: 1, column: -52]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)92;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)92;
      byteArray1[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)92, 3, true);
      uTF8StreamJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.toString();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1196, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 102, 0, false);
      uTF8StreamJsonParser1._decodeEscaped();
      iOContext0.releaseTokenBuffer((char[]) null);
      ByteQuadsCanonicalizer.createRoot();
      try { 
        uTF8StreamJsonParser1.parseLongName(92, 37, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000056; line: 1, column: -98]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)117;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)117;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 2, 51);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 55, (-1417), false);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000057; line: 1, column: -1468]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$-");
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)54, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1204, (byte)54, false);
      uTF8StreamJsonParser0._parsePosNumber(2094);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000058; line: 1, column: -1143]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)91;
      iOContext0.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)57, 2959, false);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte)47, (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 3, (byte)47, false);
      try { 
        uTF8StreamJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1873));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1873), (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 224, 0, true);
      uTF8StreamJsonParser0.nextLongValue(1414L);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 49, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, (-1876), 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", false);
      byte[] byteArray0 = new byte[5];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      MockFile mockFile0 = new MockFile("q4#ce?`-*tbQc29H", "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-167), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 69, (-459), false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)37;
      byteArray0[5] = (byte)42;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte)42;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)37, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 350, (-2303), true);
      try { 
        uTF8StreamJsonParser0.parseLongName((byte)0, 0, (byte)42);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2660));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler1, "+?yQ", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-2526), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 255, 2, true);
      uTF8StreamJsonParser0.nextTextValue();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      IOContext iOContext1 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 48, (-1382), false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-293));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 44, 44, false);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x5c
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000059; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)43, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-91), dataInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 1, 2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)117;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 32, dataInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (-448), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(3, (-448));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[7] = (byte)18;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1554), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-121), 56319, false);
      uTF8StreamJsonParser0.loadMore();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)48);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)48, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer1, byteArray1, (byte)44, 10, false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: -30]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1940);
      int int0 = 6;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 6);
      int int1 = 26;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 39, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 148)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 358, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000060; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(254);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-125);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 55, (byte) (-125));
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(116);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream2, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4345, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 631, 3, false);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)37;
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)37;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray2 = iOContext0.allocWriteEncodingBuffer((int) (byte)37);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2336, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray2, 1, (-2147), true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000061; line: 1, column: -2133]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)26;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte)106;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)106;
      byteArray0[6] = (byte)106;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1278, (-949), true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 3366, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
      try { 
        uTF8StreamJsonParser1._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000062; line: 1, column: 18]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      boolean boolean0 = false;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 53, (byte)40);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 1799, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(34, (byte)92);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000063; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1940);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 6);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 39, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.parseLongName(1, 26, 31);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)53;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)0;
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)53;
      byteArray0[0] = (byte)0;
      int int0 = 92;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte)91, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(3, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000064; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, 4);
      IOContext iOContext1 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-829), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 4, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 54, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 93, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName2(54, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)42;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1373, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1373, 0, false);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
      SerializedString serializedString0 = new SerializedString("");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte)0;
      iOContext0.allocTokenBuffer(2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.markSupported();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(100);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 95, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 1, false);
      try { 
        uTF8StreamJsonParser0._parseName(45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000065; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer1, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-82), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2104, 1, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((byte)57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)8, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray1, 1026, (byte)92, false);
      MockFile mockFile0 = new MockFile("'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, mockPrintStream0, byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1007);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 7, (InputStream) null, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 52, 57, false);
      MockFile mockFile0 = new MockFile("'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, mockPrintStream0, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 52
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)53;
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)53;
      byteArray0[0] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 45, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, (byte)53, false);
      byteQuadsCanonicalizer0.makeChild(114);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(123, 114, (byte)53);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)53;
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)53;
      byteArray0[0] = (byte)0;
      int int0 = 92;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte)91, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName2(3, 3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000066; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)8, (InputStream) null, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray1, 1026, (byte)92, false);
      MockFile mockFile0 = new MockFile("'");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      try { 
        uTF8StreamJsonParser0._readBinary((Base64Variant) null, mockPrintStream0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000067; line: 1, column: 93]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ",ZDk89Nm;`gjD";
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",ZDk89Nm;`gjD");
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(31);
      int int0 = 50;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 224, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 50, 0, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1399);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('e' (code 101)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000068; line: 1, column: -47]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)69;
      byteArray1[2] = (byte)44;
      byteArray1[3] = (byte)48;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte)48;
      byteArray1[6] = (byte)48;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)48);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)48, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer1, byteArray1, (byte)44, 10, false);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: -30]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte) (-108);
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1940);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 6);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 39, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.parseLongName(1, 26, 31);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte)91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 3, 358, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for ROOT starting at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000003; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000069; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 116, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 102, 2, true);
      uTF8StreamJsonParser0._decodeEscaped();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 3638, (byte)48, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: -95]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 55, 2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1), bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 55, 3, false);
      try { 
        uTF8StreamJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -49]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(631);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1610));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream2, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)92, 2, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.lang.String@0000000070; line: 1, column: -84]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte) (-83));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-543), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)92, (-98), false);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: java.lang.String@0000000071; line: 1, column: -183]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(2);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, 1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 21, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3250, 0, false);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000072; line: 1, column: -3247]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte byte0 = (byte)109;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)109;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (byte)109, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)93, (byte)93, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000073; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer((-1290));
      int int0 = 236;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1494), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 21, 21, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000074; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)92;
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1#ZJAD4QdF");
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      iOContext0.allocTokenBuffer();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext1.allocNameCopyBuffer((byte)92);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 200, byteArrayInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-785), 76, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("1#ZJAD4QdF");
      Locale locale0 = Locale.CHINESE;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) uTF8StreamJsonParser0;
      objectArray0[1] = (Object) byteArrayInputStream0;
      objectArray0[2] = (Object) (byte)92;
      objectArray0[3] = (Object) mockPrintStream0;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "1#ZJAD4QdF", objectArray0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) printStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -785
         //
         verifyException("org.evosuite.runtime.vfs.VFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 607, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte)54, false);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000075; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[6] = (byte)54;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 607, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 248, false);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000076; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteQuadsCanonicalizer0.makeChild(127);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 63, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (-1614), true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000077; line: 1, column: -1609]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)48;
      byte byte0 = (byte)0;
      iOContext0.allocNameCopyBuffer((byte)48);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 31, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)48, (-266), false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: UNKNOWN; line: 1, column: -312]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte) (-83);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 55, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, 3, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 48, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000078; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)99;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-4);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray2, 33, (-1357), false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0._closeInput();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte)99, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x63
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000079; line: 1, column: -1387]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)53;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nfm37,F");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(180);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(37);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 2, false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000080; line: 1, column: 12]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext1.allocTokenBuffer();
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(584);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 584, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 3, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000081; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.allocReadIOBuffer(2);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocNameCopyBuffer(3);
      iOContext0.allocConcatBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@K");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 46, (byte)0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0._skipCR();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 8)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000082; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = null;
      int int0 = 92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)20, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, (byte)89, 92, true);
      uTF8StreamJsonParser0.getText();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 69, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 3335, (byte)59, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseMediumName2(2, (-3388));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1114111, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, (byte)26, (-366), true);
      SerializedString serializedString0 = new SerializedString("=.#Fu&+spA5i0d");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, 1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)91, (-3239), false);
      uTF8StreamJsonParser0.getValueAsDouble((double) 3);
      uTF8StreamJsonParser0._parseNegNumber();
      SerializedString serializedString0 = new SerializedString("");
      uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byte byte0 = (byte) (-118);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-192L));
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1221), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1, true);
      String string0 = "FLOAT";
      SerializedString serializedString0 = new SerializedString("FLOAT");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)42);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1666, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (-1471), true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000083; line: 1, column: -1469]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)102;
      byteArray0[4] = (byte) (-83);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1492);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 224);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild((byte)0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 201, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 1, 3183, false);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000084; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 906, 452, false);
      SerializedString serializedString0 = new SerializedString(".-qG/]n");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000085; line: 1, column: -450]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(7);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2300, (-1366), false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: UNKNOWN; line: 1, column: -3665]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)48;
      iOContext0.allocNameCopyBuffer((byte)48);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte)0, (byte)48, true);
      ByteQuadsCanonicalizer.createRoot();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-89);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)3;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 879, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 5, true);
      try { 
        uTF8StreamJsonParser0.nextIntValue((byte)127);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u\u0003': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000086; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)37;
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)42;
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte)37;
      byteArray1[3] = (byte)42;
      byteArray1[4] = (byte)42;
      byteArray1[5] = (byte)37;
      byteArray1[6] = (byte)42;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray2 = iOContext0.allocWriteEncodingBuffer((int) (byte)37);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2336, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray2, 1, (-2114), true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000087; line: 1, column: -2100]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      byte byte0 = (byte)90;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer(3);
      ObjectCodec objectCodec0 = null;
      int int0 = 16;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 16, 3, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000088; line: 1, column: -10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)63;
      byteArray0[6] = (byte)84;
      byteArray0[7] = (byte)60;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2656), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-24), (-20), true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, (byte)60);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(0, (-2695), 9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte byte0 = (byte)78;
      byte byte1 = (byte)92;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byte byte2 = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2788, 2, false);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000089; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      int int0 = 53;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 53, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 791, 3663, false);
      uTF8StreamJsonParser0.getValueAsString();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int1 = (-269);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte)42, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray0, 53, (-269), true);
      try { 
        uTF8StreamJsonParser1._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000090; line: 1, column: -268]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[3] = (byte)116;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)116;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 44, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.DataInputStream@0000000091; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)56;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)12, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000092; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      int int0 = 309;
      iOContext0.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
      uTF8StreamJsonParser0.nextFieldName();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(3, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x3
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      iOContext0.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 55;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 55, 2, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        uTF8StreamJsonParser0.parseLongName(26, 26, (byte)48);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 26)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-8);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 483, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      uTF8StreamJsonParser0.getTokenLocation();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.withEncoding(jsonEncoding0);
      uTF8StreamJsonParser0._loadToHaveAtLeast(1);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte) (-108);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1940);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 6);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 39, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(1, 26, 31);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)37;
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)42);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 202, (byte) (-20), false);
      SerializedString serializedString0 = new SerializedString(".-qG/]n");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000093; line: 1, column: -220]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 55, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1417, 9, true);
      uTF8StreamJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1288), byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray1, (byte)0, 2, false);
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000094; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2408);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2588, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 33, 1, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-1720));
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: -31]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)43;
      byteArray0[3] = (byte)116;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, (byte)43, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0._closeInput();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(1, (byte)43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000095; line: 1, column: 41]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 55, 2, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(15);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 65536, bufferedInputStream0, objectCodec1, byteQuadsCanonicalizer1, byteArray0, 4, 56320, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -49]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)53;
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)53, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 65536, 3, false);
      uTF8StreamJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler1, (Object) null, false);
      try { 
        uTF8StreamJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000096; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " in a comment", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byte byte0 = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip((-1978L));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      SerializedString serializedString0 = new SerializedString(" in a comment");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 148)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000097; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = iOContext0.withEncoding((JsonEncoding) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext1.allocNameCopyBuffer(91);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2617), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3700, 3700, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000098; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 73, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1063), (-2554), false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((byte)51);
      uTF8StreamJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+", true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 699);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 200, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 117, true);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-1239));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream(198);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)53;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 371, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild(48);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 792, (-950), false);
      uTF8StreamJsonParser0._parsePosNumber(48);
      uTF8StreamJsonParser0.getValueAsString(" hfQC'e$ ;B$LaXE0Ut");
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 73, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1063), (-2554), false);
      uTF8StreamJsonParser0.getText();
      uTF8StreamJsonParser0._parsePosNumber((byte)48);
      uTF8StreamJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 190, 200, false);
      SerializedString serializedString0 = new SerializedString("");
      serializedString0.appendUnquotedUTF8(byteArray1, 1216);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 190
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, true);
      SerializedString serializedString0 = new SerializedString("7");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for ROOT starting at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000001; line: 1, column: 0])
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000099; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)37, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte)42, (-1179), false);
      SerializedString serializedString0 = new SerializedString("@I_S~<Y\"j`hL51");
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000100; line: 1, column: -1219]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte)32;
      sequenceInputStream0.skip(0L);
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-48);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 46, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 57, 255, true);
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 57
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".-qG/]n");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      iOContext2.allocNameCopyBuffer(0);
      iOContext2.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byte[] byteArray2 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-108), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray2, 0, 1, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName((-2315));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext1 = new IOContext(bufferRecycler1, dataInputStream0, false);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-91);
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)43;
      byteArray0[8] = (byte)116;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, dataInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 44, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      InputStream inputStream0 = null;
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1024);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte)100;
      byteArray1[3] = (byte)100;
      byteArray1[4] = (byte)64;
      byteArray1[5] = (byte)100;
      byteArray1[6] = (byte)100;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, (byte) (-85), true);
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)100, 0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.io.DataInputStream@0000000101; line: 1, column: -80]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)126;
      byteArray0[4] = (byte) (-83);
      byteArray0[6] = (byte)126;
      byteArray0[8] = (byte)126;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer((int) (byte)0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape '~' (code 126)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000102; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 1940);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "j@", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      byteArray1[5] = (byte) (-108);
      byteArray1[6] = (byte) (-108);
      byteArray1[7] = (byte) (-108);
      byteArray1[8] = (byte) (-108);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-657), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 117, 500, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleOddName(293);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 293
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)16;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 54, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1544), 2, false);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1544
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.toString();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, (-20), true);
      uTF8StreamJsonParser0.getValueAsString();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 245;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 245, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 248, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2, 236, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(39);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)117;
      byteArrayInputStream0.read(byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      byteArrayInputStream0.read();
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)40);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-98), 3, false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-2461), 1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
      uTF8StreamJsonParser1.getCurrentLocation();
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x94
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000103; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)92;
      byteArray2[1] = (byte)117;
      byteArray2[2] = (byte)117;
      byteArray2[3] = (byte)92;
      byteArray2[4] = (byte) (-4);
      byteArray2[5] = (byte)117;
      byteArray2[6] = (byte)92;
      byteArray2[7] = (byte)92;
      byteArray2[8] = (byte)92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)92, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray2, 3, 1078, true);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext1, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-1796), byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-1834), 1078, false);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfc
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000104; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)8);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2394);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 59, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 116, false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000105; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1610));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream2, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)92, 2, false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000106; line: 1, column: -84]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 535, 6, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 6, 0, true);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: java.lang.String@0000000107; line: 1, column: -526]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 444, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 419, (-3269), true);
      byteArrayInputStream0.read();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 117, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 5, 0, true);
      sequenceInputStream0.read(byteArray0);
      uTF8StreamJsonParser1.overrideStdFeatures((-1779), 52);
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler1, dataInputStream0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byte byte0 = (byte)101;
      byteArray0[1] = (byte)101;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 92, dataInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, (-443), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 102, pipedInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte)7, 2422, false);
      uTF8StreamJsonParser0.getValueAsString("com.fasterxml.jackson.core.base.ParserBase");
      UTF8StreamJsonParser.growArrayBy((int[]) null, 0);
      uTF8StreamJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)48;
      iOContext0.allocNameCopyBuffer((byte)48);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1);
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte)0, (byte)48, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      iOContext0.allocNameCopyBuffer(0);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1528), 2, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 3, true);
      try { 
        uTF8StreamJsonParser1._parsePosNumber((byte) (-83));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00AD' (code 173)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000108; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      IOContext iOContext2 = new IOContext(bufferRecycler0, ".-qG/]n", true);
      iOContext2.allocNameCopyBuffer(0);
      iOContext2.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-108);
      byteArray1[1] = (byte) (-108);
      byteArray1[2] = (byte) (-108);
      byteArray1[3] = (byte) (-108);
      byteArray1[4] = (byte) (-108);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1944), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 3, 224, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(224);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 148)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000109; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-20), (-1842), true);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-20));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 117, byteArrayInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, (byte)0, true);
      try { 
        uTF8StreamJsonParser1._decodeCharForError((byte) (-20));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x25
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000110; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)48;
      byteArray1[5] = (byte) (-59);
      byteArray1[6] = (byte) (-56);
      byteArray1[7] = (byte)48;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-JqG/]n");
      iOContext0.allocTokenBuffer((int) (byte) (-59));
      iOContext0.allocNameCopyBuffer((byte) (-56));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild((byte)48);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1586), byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 182, 0, false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: -165]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " in a comment", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)98, (byte) (-8), true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: java.lang.String@0000000111; line: 1, column: -103]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 98, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-271), 3, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast(0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-14);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)117, 433, false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, (byte) (-14));
      UTF8StreamJsonParser uTF8StreamJsonParser1 = null;
      try {
        uTF8StreamJsonParser1 = new UTF8StreamJsonParser((IOContext) null, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 235, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.base.ParserBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocTokenBuffer();
      bufferRecycler0.allocCharBuffer(3);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)48, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 31, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-67);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 2, 2690, true);
      uTF8StreamJsonParser0.getEmbeddedObject();
      IOContext iOContext2 = new IOContext(bufferRecycler1, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 13, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 3, 744, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbd
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000112; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "+", true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-56);
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)44;
      byte byte1 = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)3;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 1186, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xdc
         //  at [Source: java.lang.String@0000000113; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " Q1u=");
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext2, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding1);
      byteQuadsCanonicalizer0.makeChild(200);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext3, 305, dataInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 1, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfe
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000114; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[5] = (byte)118;
      byteArray0[2] = (byte)117;
      byteArray0[4] = (byte) (-83);
      byteArray0[6] = (byte)117;
      byteArray0[8] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer((int) (byte)0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)117, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 236, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000115; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte byte0 = (byte) (-2);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 93);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-998), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      try { 
        uTF8StreamJsonParser0._parseName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000116; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte) (-83));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-543), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-2548), 3, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(56);
      try { 
        uTF8StreamJsonParser0._parseName(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting double-quote to start field name
         //  at [Source: java.lang.String@0000000117; line: 1, column: 2549]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.markSupported();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      int[] intArray0 = new int[2];
      uTF8StreamJsonParser0.getTextOffset();
      intArray0[0] = 0;
      uTF8StreamJsonParser0._decodeCharForError(0);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(2591);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 590, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, 0, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(590);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte) (-91));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 8, 3, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000118; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      byte[] byteArray0 = new byte[6];
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)101;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.withEncoding(jsonEncoding0);
      byteQuadsCanonicalizer0.makeChild((byte)101);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)54, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-1305), false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-125));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000119; line: 1, column: -1301]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      boolean boolean0 = true;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext1 = new IOContext(bufferRecycler0, pipedInputStream0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2387), pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-1482), 1, true);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-2387));
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)111;
      byteArray0[4] = (byte) (-83);
      byteArray0[6] = (byte)111;
      byteArray0[8] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer((int) (byte)0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)111, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 236, false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000120; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byte byte0 = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[0] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte) (-64);
      byteArray1[2] = (byte)99;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 91, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 114, 114, true);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(49);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 0 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-4);
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byte byte1 = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byte byte2 = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 144;
      int int1 = 9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 144, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-224), 9, true);
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // InputStream.read() returned 0 characters when trying to read 233 bytes
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte) (-83));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-543), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)92, (-98), false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: java.lang.String@0000000121; line: 1, column: -183]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte) (-83));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2049), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1, false);
      uTF8StreamJsonParser0._decodeEscaped();
      uTF8StreamJsonParser0._closeInput();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte) (-83), 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xffffffad
         //  at [Source: java.lang.String@0000000122; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 248, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[5] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)116;
      byteArray0[3] = (byte)116;
      byteArray0[8] = (byte)0;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      uTF8StreamJsonParser0.getValueAsString();
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000123; line: 1, column: -125]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)92);
      bufferRecycler1.allocCharBuffer(0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 56, 2579, false);
      uTF8StreamJsonParser0.getValueAsString();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 56
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 92, 3, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-129), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 117, 3022, false);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 825);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, dataInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-64);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 825, dataInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 34, (byte) (-64), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((byte) (-4));
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte) (-108);
      byteArray0[5] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-108), (byte) (-108), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(1);
      uTF8StreamJsonParser0.getValueAsInt();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)116;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte)8;
      byte byte0 = (byte) (-5);
      byteArray0[6] = (byte) (-5);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-20), (-1621), false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 8, (-35));
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-35), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte)77, true);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x4d
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000124; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte)0;
      byte byte0 = (byte) (-16);
      byteArray0[0] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000125; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-25);
      byteArray0[1] = (byte)53;
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)53;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)85;
      byteArray0[7] = (byte) (-25);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(92);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(255);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 13, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte)85, (byte) (-25), true);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x35
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000126; line: 1, column: -107]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(4096);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)106;
      byteArray0[3] = (byte) (-47);
      byteArray0[4] = (byte) (-109);
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)120;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2168, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)106, (byte)106, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte)114, (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte)108, 2396, false);
      uTF8StreamJsonParser1.getTextLength();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte)53;
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[0] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte)91, false);
      try { 
        uTF8StreamJsonParser0.parseMediumName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000127; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 93);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-19), false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfe
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000128; line: 1, column: -18]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 120, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-296), 1848, false);
      uTF8StreamJsonParser0.getCodec();
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(0, 120);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: java.lang.String@0000000129; line: 1, column: 417]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2823);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2045, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)53, (-1962), true);
      uTF8StreamJsonParser0.getText();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 982, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2823, (-2912), false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser1._skipCR();
      int[] intArray0 = new int[5];
      intArray0[0] = 982;
      intArray0[1] = 2045;
      intArray0[2] = 2;
      intArray0[3] = (int) (byte)53;
      intArray0[4] = 3;
      UTF8StreamJsonParser.growArrayBy(intArray0, 2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 8);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 192, 1, false);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)117;
      byteArray0[4] = (byte)92;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)56;
      byteArray0[8] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(2591);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 590, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, 0, true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(590);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)116;
      byteArray0[8] = (byte)0;
      int int0 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.allocNameCopyBuffer(128);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000130; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)78);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 489, (byte) (-108), true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)78);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('N' (code 78)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000131; line: 1, column: -594]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)117;
      byteArray0[4] = (byte) (-83);
      byteArray0[6] = (byte)117;
      byteArray0[8] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext1.allocWriteEncodingBuffer((int) (byte)0);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, byteQuadsCanonicalizer0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (-1), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 2, 3, false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000132; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-12);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "&@5>;I4lZ<mbGq1", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)12;
      byteArray1[1] = (byte)12;
      byteArray1[2] = (byte)12;
      byteArray1[3] = (byte)12;
      byteArray1[4] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 92, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 272, 0, false);
      try { 
        uTF8StreamJsonParser0.parseLongName(47, 0, (-4014));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 12)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000133; line: 1, column: -270]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-5799));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-3375), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, 2, false);
      uTF8StreamJsonParser0.nextToken();
      uTF8StreamJsonParser0.getTokenLocation();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 160, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (byte) (-2), 99, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 3200;
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectCodec2, byteQuadsCanonicalizer0, byteArray0, (byte)0, 0, false);
      uTF8StreamJsonParser0.loadMore();
      uTF8StreamJsonParser0.getInputSource();
      uTF8StreamJsonParser0._loadToHaveAtLeast(173);
      uTF8StreamJsonParser0.getValueAsString("_xiw+Hb;:(aX");
      int int1 = 2576;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "_xiw+Hb;:(aX", false, 'S', 2576);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 2, 57, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      uTF8StreamJsonParser0._releaseBuffers();
      uTF8StreamJsonParser0._loadToHaveAtLeast(1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbQc29H", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      int int0 = 55;
      int int1 = (-2513);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2513), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000134; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, bufferedInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)16;
      iOContext0.allocWriteEncodingBuffer(901);
      iOContext0.allocTokenBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 32, 32, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000135; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[5] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)116;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = iOContext2.allocWriteEncodingBuffer(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)53, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray1, (byte)43, 123, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000136; line: 1, column: 204]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      int int0 = 47;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int1 = 91;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 47, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 55, 91, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-36);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1141, true);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[5] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)116;
      byteArray0[8] = (byte)0;
      int int0 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000137; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      byte[] byteArray0 = null;
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, (byte[]) null, 2, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      int int0 = 1313;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)9);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1313, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 240, 240, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName2(2596, 240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 240
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (-2), true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000138; line: 1, column: -2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 26, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 55, 4, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: -48]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-78);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-592));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      iOContext0.allocConcatBuffer();
      byteArray1[0] = (byte)117;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3653, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)117, (byte)117, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("", 31);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[1] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)116;
      byteArray0[8] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1959), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 92, 98, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-91), (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 6, 92, true);
      uTF8StreamJsonParser1.getValueAsInt((int) (byte)0);
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(116);
      PipedInputStream pipedInputStream1 = new PipedInputStream((byte)115);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte)115;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream1, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-1962), (-2386), true);
      try { 
        uTF8StreamJsonParser0._matchToken("E3#", 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(77);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = (-98);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-98), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-98), (-98), false);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 77, (byte)48);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, (-1533), true);
      try { 
        uTF8StreamJsonParser1._handleOddName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)16;
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3127, (-3166), true);
      try { 
        uTF8StreamJsonParser0._handleOddName(98);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000139; line: 1, column: -3165]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 248, false);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getValueAsInt();
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfc
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000140; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)117;
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext1.allocWriteEncodingBuffer((int) (byte)117);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 236;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)117, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 236, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000141; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0, 1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)117;
      byteArray1[2] = (byte)92;
      byteArray1[3] = (byte)92;
      byteArray1[4] = (byte)117;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, 2478, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext2.allocWriteEncodingBuffer(1);
      iOContext0.allocTokenBuffer();
      int int0 = 759;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-82), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-46), (-81), false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xd2
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000142; line: 1, column: -32]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1780, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, (byte) (-84), false);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xd7
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000143; line: 1, column: -81]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)41;
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)99;
      byteArray1[2] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-1), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-1540), 45, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1540
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 34, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 1, (byte)99, false);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00AD' (code 173)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: java.lang.String@0000000144; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(3);
      iOContext0.allocConcatBuffer();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte)114;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 256, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1144, 1, false);
      uTF8StreamJsonParser0.getValueAsInt(2048);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      uTF8StreamJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)42);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((byte) (-20));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1811, 1, true);
      uTF8StreamJsonParser0._decodeCharForError((byte)0);
      uTF8StreamJsonParser0._skipCR();
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000145; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)40);
      iOContext0.allocConcatBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4828), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-83), (-3461), true);
      uTF8StreamJsonParser0.getTextCharacters();
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000146; line: 1, column: -3376]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 99, (byte) (-2), true);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2459, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-4), 0, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("Z}`1F#", 500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)54;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)54;
      byteArray0[6] = (byte)34;
      byteArray0[7] = (byte) (-71);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      ByteQuadsCanonicalizer.createRoot();
      iOContext1.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(1);
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 110, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)54, 1, false);
      uTF8StreamJsonParser0._finishString();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("?hd!R]L", (byte)54);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)92);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "H", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 46, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00AD' (code 173)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000147; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)37);
      int int0 = 32;
      PipedInputStream pipedInputStream0 = new PipedInputStream((byte)115);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)42;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1338), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 240, 47, false);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[2] = (byte)0;
      byte[] byteArray1 = new byte[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray1[0] = (byte)42;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 1021);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 97);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)37, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 97, (byte)37, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-202), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 248, 65, false);
      try { 
        uTF8StreamJsonParser1._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte)117;
      byteArray0[7] = (byte)117;
      byteArray0[8] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)117, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 236, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000148; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(6);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(110);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 110, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 743, 1, true);
      uTF8StreamJsonParser0._decodeEscaped();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q4#ce?`-*tbc29H", true);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) mockFileOutputStream0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-60);
      byteArray0[6] = (byte) (-2);
      byteArray0[7] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 690, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 1)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.SequenceInputStream@0000000149; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2570), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 1, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000150; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-388), 707, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("YV+Pix4pg+d6OBv%l{");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -388
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-83));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: java.lang.String@0000000151; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)40);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-108), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 2924, 287, false);
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000152; line: 1, column: -2633]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      iOContext2.withEncoding(jsonEncoding1);
      byteQuadsCanonicalizer0.makeChild(427);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-4), byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (byte)92, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 99, (byte) (-2), true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 27, 1992, false);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (-1004), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 110, 99, true);
      try { 
        uTF8StreamJsonParser2._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.lang.String@0000000153; line: 1, column: -9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer(2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      iOContext1.allocNameCopyBuffer(1);
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-293), sequenceInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 318, 55, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 1, sequenceInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, (byte) (-128), (byte) (-128), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 57);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2749, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 318, 1, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)40);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 489, (byte) (-108), true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)40);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000154; line: 1, column: -594]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ",#,ZDk89Nm;`gjD";
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocTokenBuffer();
      iOContext1.allocNameCopyBuffer(0);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-6118), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 396, 31, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(513);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: java.lang.String@0000000155; line: 1, column: -362]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-108);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(92);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 242, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1786, (-1021), true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(117);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000156; line: 1, column: -2804]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      pipedInputStream0.close();
      iOContext0.allocReadIOBuffer((int) (byte)20);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, (-472), (-2453), true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      uTF8StreamJsonParser0._parsePosNumber((byte)20);
      uTF8StreamJsonParser0.getCurrentLocation();
      uTF8StreamJsonParser0._nameStartRow = 402;
      uTF8StreamJsonParser0.loadMore();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000157; line: 1, column: -7358]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 248, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 3);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2617), mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 2, (-2479), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(743);
      ByteQuadsCanonicalizer.createRoot();
      int int0 = 98;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 110, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, (byte)117, true);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)): expected a hex-digit for character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000158; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-83), (byte) (-83), true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("Invalid UTF-8 start byte 0x", "Invalid UTF-8 start byte 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Invalid UTF-8 start byte 0x\u0000\u0000\u0000': was expecting Invalid UTF-8 start byte 0x
         //  at [Source: java.lang.String@0000000159; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-1673));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1);
      IOContext iOContext2 = new IOContext(bufferRecycler0, pushbackInputStream0, false);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 1, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)111, 2, true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-592));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      iOContext0.allocConcatBuffer();
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)92;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1082, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 1, 98, false);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000160; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-y'*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "@ZO[cwJ;vkHjFRKo";
      byteArrayInputStream0.close();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, uTF8StreamJsonParser0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, pushbackInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (-1142), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._matchToken("@ZO[cwJ;vkHjFRKo", 2257);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(3335);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 12, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 3335, (-2960), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)92;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3408, dataInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, (-258), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("q4#ce?`-*tbc29H", (byte)117);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byte byte0 = (byte)99;
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1180));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-108), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 240, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther((byte)99, (byte) (-1));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x63
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000161; line: 1, column: -1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(1, 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x1
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000162; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-4);
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte) (-4);
      byteArray0[0] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)99;
      iOContext0.allocNameCopyBuffer(0);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (byte)99, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xff
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000163; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 126, (-612), true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 250, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 1, 126, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000164; line: 1, column: -611]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      byte byte0 = (byte)16;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-16);
      byteArray0[1] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = 1542;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferedInputStream1, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1430, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 199, 2, false);
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xf0
         //  at [Source: java.io.BufferedInputStream@0000000165; line: 1, column: -194]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocConcatBuffer();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)8, 3, true);
      uTF8StreamJsonParser0._skipCR();
      uTF8StreamJsonParser0.getTokenLocation();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 34, 117, true);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext0, (byte)8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 0, (-3034), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser2._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)102;
      byteArray0[4] = (byte) (-83);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1492);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 224);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 5, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-499), 224, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -499
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 2, 57, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = (-129);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-129));
      byteQuadsCanonicalizer0.makeChild(180);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, sequenceInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2346), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 34, 3, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidOther(8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x8
         //  at [Source: java.io.SequenceInputStream@0000000166; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)0;
      int int0 = 129;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 42);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)37, pushbackInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 239, (byte)0, true);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000167; line: 1, column: -237]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, (InputStream) null, objectCodec1, byteQuadsCanonicalizer1, byteArray0, (byte)69, 2, false);
      uTF8StreamJsonParser0.getTokenLocation();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild((-1149));
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 291, (InputStream) null, objectCodec0, byteQuadsCanonicalizer2, byteArray0, 1, 80, true);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      uTF8StreamJsonParser1._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-y'*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "Invalid UTF-8 tart byte 0x";
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)46, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1478), true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("q4#ce?`-y'*tbc29H", "@ZO[cwJ;vkHjFRKo");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'q4#ce?`-y'*tbc29H': was expecting @ZO[cwJ;vkHjFRKo
         //  at [Source: java.lang.String@0000000168; line: 1, column: -1477]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      iOContext0.allocWriteEncodingBuffer((-730));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1363), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 543, false);
      uTF8StreamJsonParser0.getValueAsString("NaN");
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.fasterxml.jackson.core.json.JsonReadContext");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.json.JsonReadContext", false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 3);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-62);
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte) (-82);
      byteArray0[5] = (byte)101;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)10, 273, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, " in a comment", false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-91);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)98);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 11, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, (-1373), 904, false);
      uTF8StreamJsonParser0._getByteArrayBuilder();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishAndReturnString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)9;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)99;
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte)45;
      byteArray1[3] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1, 3, 3);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-755));
      byteArrayInputStream0.skip((byte) (-4));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, (-2174), 128, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2174
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteQuadsCanonicalizer0.makeChild(1933);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 16, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 45, 126, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 45
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3135));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2145), dataInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 0, true);
      Object object0 = uTF8StreamJsonParser0.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-94), dataInputStream0, objectCodec1, byteQuadsCanonicalizer1, (byte[]) null, (-2145), 50, true);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte) (-121);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte) (-6);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 240, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-123), 240, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(byteArrayOutputStream0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) objectOutputStream0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream1.mark(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-111), 0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.releaseBuffered((OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[3] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = (-1215);
      int int1 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000169; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 248, false);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfc
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000170; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 51, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 7, (-907), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-y'*tbc29H", true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = "Invalid UTF-8 start byte 0x";
      byteArrayInputStream0.close();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)117, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, (-1478), true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("q4#ce?`-y'*tbc29H", "@ZO[cwJ;vkHjFRKo");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: java.lang.String@0000000171; line: 1, column: -1476]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocTokenBuffer(3);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte) (-4);
      byteArray0[5] = (byte)99;
      byteArray0[6] = (byte)122;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)122);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-1), (byte) (-4), true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("Internal error: total len assumed to be ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfc
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000172; line: 1, column: 0]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocConcatBuffer();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-114);
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-57);
      byteArray0[3] = (byte)78;
      iOContext0.constructTextBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 694, (byte)78, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-573), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 3, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000173; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-4);
      byte byte0 = (byte)16;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-2);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      byteArrayInputStream0.reset();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-639), 1069);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = (-781);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1312, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1908, (-781), false);
      uTF8StreamJsonParser0.getValueAsString("");
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(3);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 3, (-1392), false);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte) (-20);
      byteArray1[1] = (byte)37;
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-85);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1538, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 58, (-3838), true);
      try { 
        uTF8StreamJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000174; line: 1, column: -3837]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)42);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2580));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 116, (-2580), false);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000175; line: 1, column: -2691]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-2521));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 0, (-2960), true);
      try { 
        uTF8StreamJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing ''' for name
         //  at [Source: UNKNOWN; line: 1, column: -2959]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectCodec0, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext3 = iOContext0.withEncoding(jsonEncoding1);
      iOContext3.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1082, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1082, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((byte)57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      InputStream inputStream0 = null;
      byte[] byteArray0 = new byte[2];
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 1170;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 715, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1170, false);
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getValueAsLong();
      uTF8StreamJsonParser0.getCurrentLocation();
      uTF8StreamJsonParser0._decodeEscaped();
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 2)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000176; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((-30));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 93);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._decodeCharForError(3);
      try { 
        uTF8StreamJsonParser0._handleUnexpectedValue(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 1)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000177; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[4] = (byte) (-83);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1492);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 224);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild((byte)0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 201, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 1, 3198, false);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000178; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte)37;
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)37;
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 51, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 7, (-907), true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000179; line: 1, column: -912]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      iOContext0.allocNameCopyBuffer((-2605));
      ObjectCodec objectCodec0 = null;
      int int0 = 1144;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1232), byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte)117, (-1567), true);
      uTF8StreamJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      int int1 = 116;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 116, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (-1962), 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 117
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-16);
      byteArray0[4] = (byte) (-16);
      byteArray0[5] = (byte) (-16);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1849);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte) (-16), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 3926, (byte)110, true);
      uTF8StreamJsonParser0.getText();
      bufferedInputStream0.read();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (byte) (-16), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 3, (byte) (-16), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1903, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 0, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 39, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1508, (-3084), false);
      uTF8StreamJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)68;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)21, false);
      uTF8StreamJsonParser0.getTokenLocation();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-82), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 31, 52, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1024, (-3935), false);
      uTF8StreamJsonParser2.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 3, 53);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 484, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 1540, 0, false);
      uTF8StreamJsonParser0.getValueAsInt((-1379));
      uTF8StreamJsonParser0.overrideStdFeatures(3, 0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-32);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pushbackInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, (byte) (-29), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext1.allocTokenBuffer();
      iOContext1.allocNameCopyBuffer(1);
      iOContext1.allocConcatBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte) (-77);
      byteArray0[2] = (byte)78;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 126, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 52, (-3988), true);
      uTF8StreamJsonParser0.getValueAsString("");
      uTF8StreamJsonParser0.getValueAsInt(1);
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      sequenceInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-777), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-2722), (-2266), true);
      int int0 = 73;
      int int1 = 49;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("y'?7", (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2722
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2215), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-3994), 255, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("Z}`1F#", (-1736));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3994
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken((String) null, ";15>XmP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, (byte[]) null, 0, 1, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 47;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 47, 846, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte) (-56);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1709), mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 69, false);
      uTF8StreamJsonParser0._handleApos();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-3498), mockFileInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1, 69, false);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((byte)44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u00C8' (code 200)): Expected space separating root-level values
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000180; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      String string0 = ".-qG/]n";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream1, 1756);
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, byteQuadsCanonicalizer1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 13, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 101, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 1421, false);
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer@0000000181; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 93);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      uTF8StreamJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[7] = (byte)0;
      iOContext0.allocNameCopyBuffer(1);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string value");
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(110);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 117, 1, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape (CTRL-CHAR, code 0)
         //  at [Source: java.lang.String@0000000182; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)42;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((byte)42);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-2580));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 116, (-2580), false);
      try { 
        uTF8StreamJsonParser0._decodeCharForError(200);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0x0
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000183; line: 1, column: -2694]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, (InputStream) null, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 3, 3, false);
      uTF8StreamJsonParser0._closeInput();
      uTF8StreamJsonParser0._decodeCharForError(19);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-413));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 49);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 6, (-255), true);
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = 0;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[3];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 3, true);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 0, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1214, 2, true);
      String string0 = "";
      try { 
        uTF8StreamJsonParser1._reportInvalidToken("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2480, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 78, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-1236));
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)37;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4597, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-3064), 180, false);
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1236), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1991, 1, false);
      uTF8StreamJsonParser1._parsePosNumber((-1));
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((-1236), (-1236), 1991);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3064
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 8, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 99, (byte) (-2), true);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: java.lang.String@0000000184; line: 1, column: -99]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      pipedInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, (-472), (-2453), true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      uTF8StreamJsonParser0._parsePosNumber((byte)20);
      uTF8StreamJsonParser0.loadMore();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000185; line: 1, column: -7358]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 0, 2, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      iOContext0.allocBase64Buffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      pipedInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 40, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      try { 
        uTF8StreamJsonParser0.loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      iOContext1.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 126, (-612), true);
      uTF8StreamJsonParser0.getValueAsString("$VA%LUES");
      uTF8StreamJsonParser0.getValueAsInt((-1129));
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-592));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)117;
      byteArray1[1] = (byte)92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 126, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray1, 3, 1450, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2408, byteArrayInputStream0, objectCodec1, (ByteQuadsCanonicalizer) null, byteArray1, (byte)117, (byte)117, true);
      uTF8StreamJsonParser1.getValueAsString("q4#ce?`-*tbc29H");
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser1.getTextOffset();
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: java.lang.String@0000000186; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 0, 2, false);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      int int0 = 2422;
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 2422, (InputStream) null, objectCodec2, byteQuadsCanonicalizer1, byteArray0, 2422, 1, false);
      int int1 = 47;
      uTF8StreamJsonParser0._loadToHaveAtLeast(47);
      uTF8StreamJsonParser1.close();
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext1, 2, (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 47, false);
      try { 
        uTF8StreamJsonParser2.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000187; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int int0 = (-4031);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2056, (-4031), false);
      uTF8StreamJsonParser0._loadToHaveAtLeast((-868));
      try { 
        uTF8StreamJsonParser0._parseName(369);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('q' (code 113)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000188; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 126, (-612), true);
      uTF8StreamJsonParser0.getValueAsString("$VA%LUES");
      UTF8StreamJsonParser.growArrayBy((int[]) null, 3);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1363), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1285), false);
      assertEquals(3, byteArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-1363), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      String string0 = uTF8StreamJsonParser0.getValueAsString("NaN");
      assertEquals("NaN", string0);
      assertEquals(3, byteArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(3, byteArrayInputStream0.available());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals((-1363), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      int[] intArray0 = UTF8StreamJsonParser.growArrayBy((int[]) null, 1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(intArray0);
      
      try { 
        uTF8StreamJsonParser0._matchToken("NaN", 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'N\u0000\u0000\u0000': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000189; line: 1, column: -1280]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1492);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      byteQuadsCanonicalizer0.makeChild(56);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-4170), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 2, 46, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)84;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)93;
      byteArray1[3] = (byte)7;
      byteArray1[4] = (byte)93;
      byteArray1[5] = (byte)84;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)21, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (byte)93, (-1677), true);
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2215), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-3994), 255, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3994
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      byte[] byteArray0 = null;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding1);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = null;
      int int0 = 92;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, (byte)20, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, (byte)89, 92, true);
      uTF8StreamJsonParser0.getText();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, 69, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 3335, (byte)59, true);
      try { 
        uTF8StreamJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000190; line: 1, column: 60]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(56);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-1791), (InputStream) null, objectCodec0, byteQuadsCanonicalizer1, (byte[]) null, 58, 2, true);
      uTF8StreamJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)117;
      byteArray0[4] = (byte) (-83);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 21, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-703), 32768, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -703
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = iOContext0.allocWriteEncodingBuffer();
      byteArray0[0] = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 91);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, (-4031), (byte)76, true);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (byte) (-16), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 3, (byte) (-4), false);
      uTF8StreamJsonParser1.getValueAsInt(42);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser1.getTokenLocation();
      try { 
        uTF8StreamJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '\u00FC\u0000\u0000\u0000\u0000\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000191; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 2245);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)99;
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte)9;
      byteArray1[6] = (byte)9;
      byteArray1[7] = (byte)99;
      byteArray1[8] = (byte)99;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: java.lang.String@0000000192; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 130, (-612), true);
      String string0 = "$VA%LUES";
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("@ZO[cwJ;vkHjFRKo", "Invalid UTF-8 start byte 0x");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '@ZO[cwJ;vkHjFRKo': was expecting Invalid UTF-8 start byte 0x
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000193; line: 1, column: -611]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      byteArrayInputStream0.read();
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, 2, 93);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)48;
      byteArray1[1] = (byte)48;
      byteArray1[2] = (byte)48;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1330, byteArrayInputStream2, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 2, 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(2);
      byte byte0 = (byte)48;
      iOContext0.allocNameCopyBuffer(3);
      iOContext0.allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      bufferedInputStream0.markSupported();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-2827), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 463, 235, true);
      ByteQuadsCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      pipedInputStream0.close();
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 127, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 3, 1, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(3955);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      iOContext2.allocTokenBuffer();
      iOContext1.allocNameCopyBuffer(13);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 2984, 215, false);
      uTF8StreamJsonParser0.getValueAsString("");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (-612), (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 1, 2, true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser1.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      IOContext iOContext3 = new IOContext(bufferRecycler0, jsonLocation0, true);
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser2 = new UTF8StreamJsonParser(iOContext4, 13, (InputStream) null, objectCodec2, (ByteQuadsCanonicalizer) null, (byte[]) null, 2, (-428), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser2.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.releaseConcatBuffer((char[]) null);
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3658, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 46, 31, false);
      uTF8StreamJsonParser0.nextBooleanValue();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      try { 
        uTF8StreamJsonParser1._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000194; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, (InputStream) null, objectCodec2, byteQuadsCanonicalizer0, byteArray0, 3, 3, false);
      uTF8StreamJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1813, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2063), 1431, false);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2063
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[3];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 3, true);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000195; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 1, true);
      uTF8StreamJsonParser0._inputBuffer = byteArray0;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(69);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 98, 72, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue((-601));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte)0;
      iOContext0.allocNameCopyBuffer(1);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)37, 0, true);
      byteArrayInputStream0.read(byteArray0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextLongValue(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 126, (-612), true);
      String string0 = "$VA%~LUES";
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 0, 1942, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.parseLongName((-612), 1820, 1531);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte) (-108);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-756), (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)40, 1, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1);
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayBuilder0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-32);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte) (-123);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-89);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 3, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 1, false);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      uTF8StreamJsonParser0.releaseBuffered((OutputStream) byteArrayOutputStream0);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.toString();
      ObjectCodec objectCodec0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2), 91, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte) (-83));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 12, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -83
         //
         verifyException("com.fasterxml.jackson.core.io.CharTypes", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      iOContext1.allocTokenBuffer();
      iOContext1.allocNameCopyBuffer(0);
      iOContext1.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-48), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)92, (-449), false);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000196; line: 1, column: -536]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)92;
      byteArray0[4] = (byte) (-83);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer1.makeChild(1492);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 224);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      byteQuadsCanonicalizer0.makeChild((byte)0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 224, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 242, 2969, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._loadToHaveAtLeast(12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-8);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 483, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      uTF8StreamJsonParser0.getTokenLocation();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext3, 1, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1._loadToHaveAtLeast(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-33);
      byteArray0[19] = (byte)41;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[1] = (int) (byte) (-33);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 10, false);
      uTF8StreamJsonParser0._loadToHaveAtLeast(2);
      intArray0[2] = (int) (byte)41;
      // Undeclared exception!
      try { 
        byteQuadsCanonicalizer0.calcHash(intArray0, 3157);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer.createRoot();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      IOContext iOContext1 = new IOContext(bufferRecycler0, dataInputStream1, true);
      DataInputStream dataInputStream2 = new DataInputStream((InputStream) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 145, dataInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 95, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 2, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer0, (byte[]) null, 2, 3, false);
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getValueAsLong();
      uTF8StreamJsonParser0.getCurrentLocation();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)42;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 51, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 7, (-907), true);
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000197; line: 1, column: -895]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, mockFileInputStream0, false);
      iOContext1.allocNameCopyBuffer(2750);
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 18, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 39, 3318, false);
      int int0 = (-14);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      iOContext1.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 126, (-612), true);
      uTF8StreamJsonParser0.getValueAsString("$VA%LUES");
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.getTextOffset();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1082, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 1082, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parseName((byte)57);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byteArrayInputStream0.close();
      iOContext1.allocBase64Buffer();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      try { 
        uTF8StreamJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc
         //  at [Source: java.io.ByteArrayInputStream@0000000198; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.markSupported();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 190, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-2657), (byte)0, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName(2, (-105), 3237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2657
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-777), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-2722), (-2266), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((byte)84, 73, 49);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2722
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4000, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-2154), true);
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: java.lang.String@0000000199; line: 1, column: -2147]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)89;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)118;
      byteArray0[4] = (byte) (-94);
      byteArray0[5] = (byte) (-52);
      byteArray0[6] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)80;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 4, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, (byte)80, 207, false);
      uTF8StreamJsonParser0.close();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 80
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)115;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2048, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1697, 3, false);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      uTF8StreamJsonParser0._getText2(jsonToken0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)69;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-20);
      byteArray1[3] = (byte) (-20);
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-20);
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1154, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 13, (byte)42, false);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.FIELD_NAME;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      iOContext0.allocTokenBuffer();
      ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.release();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2480, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 78, (-2052), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken((String) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)26;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)26;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("7");
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)26;
      byteArray1[2] = (byte)26;
      byteArray1[3] = (byte)26;
      byteArray1[4] = (byte)106;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 9, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 47, 1, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'j\u001A': was expecting 
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000200; line: 1, column: -42]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)89;
      byteArray0[8] = (byte)20;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 56, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)89, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("INT", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbe
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000201; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 164, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, 0, true);
      try { 
        uTF8StreamJsonParser0.parseLongName(2, (-32768), 164);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000202; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2056, (-4031), false);
      uTF8StreamJsonParser0.getValueAsInt((-179));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0.nextTextValue();
      try { 
        uTF8StreamJsonParser0._reportInvalidInitial(32);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0x20
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000203; line: 1, column: -4030]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1676);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)0;
      intArray0[1] = (int) (byte)0;
      intArray0[2] = (int) (byte)0;
      UTF8StreamJsonParser.growArrayBy(intArray0, 39);
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)115;
      byteArray1[1] = (byte)115;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray1, 3, 9, true);
      try { 
        uTF8StreamJsonParser0._reportInvalidInitial(12);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xc
         //  at [Source: java.io.DataInputStream@0000000204; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string0 = "#dc`&zQ&";
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      String string1 = "$VALUES";
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 110, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, (-354), false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-8);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 483, sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, true);
      uTF8StreamJsonParser0.getTokenLocation();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, sequenceInputStream0, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 1, 93, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-12);
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      iOContext0.allocNameCopyBuffer((byte)7);
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 49, (byte)0, 52, (byte)7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)68;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)21, false);
      uTF8StreamJsonParser0.getTokenLocation();
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      uTF8StreamJsonParser0._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = (-1215);
      int int1 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)116;
      intArray0[1] = 3;
      intArray0[2] = (int) (byte) (-91);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (byte)116, 69, (byte)43, 703);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)54, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-940), (-940), false);
      uTF8StreamJsonParser0.getTokenLocation();
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-1670), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, 240, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser1.slowParseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 146, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, 0, true);
      uTF8StreamJsonParser0.getTextLength();
      byte byte0 = (byte)0;
      IOContext iOContext2 = new IOContext(bufferRecycler0, uTF8StreamJsonParser0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext2, (byte)0, (InputStream) null, objectCodec1, (ByteQuadsCanonicalizer) null, (byte[]) null, (byte)43, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseMediumName(2605);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 1, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 16)): has to be escaped using backslash to be included in string value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000205; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 93);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.markSupported();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream1, 2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte) (-2);
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte) (-2);
      byteArray1[4] = (byte) (-2);
      byteArray1[5] = (byte) (-2);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray1, 1, 254, false);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xfe
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000206; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocNameCopyBuffer((-2605));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1144, 819, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-124), byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, (byte) (-83), 0, false);
      try { 
        uTF8StreamJsonParser0._reportInvalidChar(200);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xc8
         //  at [Source: java.lang.String@0000000207; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)0;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      byteArray0[3] = (byte)50;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)89;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte)20;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 56, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)0, (byte)89, true);
      uTF8StreamJsonParser0.getText();
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xbe
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000208; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)16;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte) (-16);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1542);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferedInputStream0, true);
      iOContext1.allocTokenBuffer(3);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext2, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 3, (byte)116, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName(1987);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-12);
      byteArray0[21] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)0;
      byte byte0 = (byte)80;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (byte) (-12));
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)7, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 3, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName((byte)80);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000209; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byte[] byteArray1 = new byte[7];
      byteArray1[3] = (byte)48;
      byteArray1[1] = (byte)69;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      byteQuadsCanonicalizer0.makeChild(391);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray1, 1, 100, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName(280);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-91);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = (-1215);
      int int1 = 92;
      boolean boolean0 = true;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, (InputStream) null, objectCodec1, byteQuadsCanonicalizer0, byteArray0, 2, (byte) (-126), false);
      try { 
        uTF8StreamJsonParser0.parseMediumName(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000210; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      iOContext0.allocConcatBuffer();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, (byte[]) null, 3, (-2264), true);
      uTF8StreamJsonParser0.nextFieldName();
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 3;
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 3, 3, 0, 125);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000211; line: 1, column: -2263]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-116), (byte)0, true);
      int[] intArray0 = new int[0];
      try { 
        uTF8StreamJsonParser0._parseName((byte)42);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): was expecting double-quote to start field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000212; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      try { 
        uTF8StreamJsonParser0._parseName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: java.io.ByteArrayInputStream@0000000213; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((byte)0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte) (-116), (byte)0, true);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, (byte)6, (byte)0, 2368, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2368
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-4001), byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 101, 2, true);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.lang.String@0000000214; line: 1, column: -97]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte) (-20);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)42, byteArrayInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray1, 2853, 110, false);
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000215; line: 1, column: -2741]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)111;
      byteArray0[2] = (byte)111;
      byteArray0[6] = (byte)111;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 11, (byte)111, true);
      uTF8StreamJsonParser0.getValueAsInt((-734));
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      iOContext0.allocReadIOBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-85), 1502, false);
      Base64Variant base64Variant0 = null;
      int int0 = 39;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 39);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -85
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 31;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(2);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      pipedInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 31, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      int int1 = (-2894);
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-2894));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte byte0 = (byte)0;
      pipedInputStream0.close();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)57;
      byteArray0[5] = (byte)57;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      int int0 = 123;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)57, pipedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 123, (-529), true);
      try { 
        uTF8StreamJsonParser0._parsePosNumber(123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocNameCopyBuffer((-2605));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte) (-83), (-1015));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream1, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, false);
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart((-2605), false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\uF5D3' (code -2605)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000216; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-157), (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte)116, 34, true);
      try { 
        uTF8StreamJsonParser0._handleInvalidNumberStart(0, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000217; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-2605));
      iOContext0.allocConcatBuffer();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 4, 4, true);
      try { 
        uTF8StreamJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('u' (code 117)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: java.lang.String@0000000218; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(844);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 452);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 0, false);
      uTF8StreamJsonParser0.getTokenLocation();
      try { 
        uTF8StreamJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: com.fasterxml.jackson.core.io.IOContext@0000000219; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[0];
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-32768), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 1, 0, true);
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(1, jsonLocation0.getLineNr());
      
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: java.lang.Object@0000000220; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      ByteQuadsCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, "&@5>;I4lZ<mbGq1", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 91, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 13, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 0);
      try { 
        uTF8StreamJsonParser0.parseLongName(0, 3, 123);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: java.lang.String@0000000221; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      InputStream inputStream0 = null;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = null;
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 146, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, 0, true);
      try { 
        uTF8StreamJsonParser0.parseLongName(2, (-32768), 146);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 2)): has to be escaped using backslash to be included in name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000222; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)54, (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      boolean boolean0 = true;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      try { 
        uTF8StreamJsonParser0.parseMediumName2((byte)12, 1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 12)): has to be escaped using backslash to be included in name
         //  at [Source: java.io.ByteArrayInputStream@0000000223; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      iOContext0.allocWriteEncodingBuffer((-730));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-1363), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, (-1285), false);
      uTF8StreamJsonParser0.getValueAsString("NaN");
      int int0 = 1408;
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseLongName((-1363), 16, 1408);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1363
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteArrayInputStream0.read(byteArray0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (byte)92, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 2, 3, false);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextIntValue(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)54;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 2, dataInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-5841), 482, true);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 middle byte 0xc
         //  at [Source: java.io.ByteArrayInputStream@0000000224; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 1, 1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1688, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (-424), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000225; line: 1, column: -423]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[9];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".-qG/]n");
      iOContext0.allocTokenBuffer();
      iOContext0.allocNameCopyBuffer((-816));
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 3, (byte) (-76), false);
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape (CTRL-CHAR, code 0)
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000226; line: 1, column: -77]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 146;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = null;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 146, (InputStream) null, objectCodec0, (ByteQuadsCanonicalizer) null, (byte[]) null, 3, 0, true);
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getTextLength();
      uTF8StreamJsonParser0.getValueAsLong();
      uTF8StreamJsonParser0.getCurrentLocation();
      try { 
        uTF8StreamJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000227; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 55, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 91, true);
      uTF8StreamJsonParser0.getText();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-3135));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-65);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 67, dataInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2832), 2, true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2832
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-519);
      int int0 = 39;
      intArray0[1] = 39;
      intArray0[2] = (-678);
      UTF8StreamJsonParser.growArrayBy(intArray0, 146);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("[.;Y)?\"$vI!+EJbG!}s", "%?d!rk-PTl)f!:k:7Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"%?d!rk-PTl)f!:k:7Q\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.setEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      int int0 = 0;
      byte[] byteArray0 = new byte[0];
      iOContext1.constructTextBuffer();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 0, byteArrayInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 0, 0, false);
      try { 
        uTF8StreamJsonParser0.getFloatValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not numeric, can not use numeric value accessors
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1134));
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, (-2311), (byte) (-2), true);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 8);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: java.lang.String@0000000228; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      byte[] byteArray0 = new byte[6];
      iOContext0.allocWriteEncodingBuffer();
      byteArray0[0] = (byte) (-4);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)99;
      byteArray0[5] = (byte)99;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 91, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, 248, false);
      String string0 = "";
      uTF8StreamJsonParser0._skipCR();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(125);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((OutputStream) byteArrayBuilder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000229; line: 2, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-85);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, (InputStream) null, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (byte) (-85), 1502, false);
      int int0 = 39;
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 39);
      try { 
        uTF8StreamJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) byteArrayBuilder0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000230; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "H", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 31;
      PipedInputStream pipedInputStream0 = new PipedInputStream(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      pipedInputStream0.close();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 31, pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (-2251), 0, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      uTF8StreamJsonParser0.setCodec(objectCodec1);
      int int1 = (-2894);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber((-2894));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2251
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-129));
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte)78;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)78;
      byteArray0[7] = (byte)78;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 114, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte) (-119), 2104, true);
      uTF8StreamJsonParser0.setCodec((ObjectCodec) null);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._parsePosNumber(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 1);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (-2928), true);
      int[] intArray0 = new int[21];
      intArray0[0] = 1;
      intArray0[6] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-402);
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = (-2072);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.parseEscapedName(intArray0, 54, 2, (-91), 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -91
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      InputStream inputStream0 = null;
      ByteQuadsCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      byte[] byteArray0 = null;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy((int[]) null, (-3351));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 806;
      intArray0[0] = 806;
      // Undeclared exception!
      try { 
        UTF8StreamJsonParser.growArrayBy(intArray0, (-852));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ByteQuadsCanonicalizer.createRoot();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 9, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1, 3, false);
      ByteQuadsCanonicalizer.createRoot();
      uTF8StreamJsonParser0.getTokenLocation();
      uTF8StreamJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertTrue(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)116;
      byteArray0[6] = (byte)43;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, bufferedInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, (-3374), (byte)0, true);
      assertEquals(9, byteArray0.length);
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(JsonEncoding.UTF32_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF32_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertArrayEquals(new byte[] {(byte)53, (byte)0, (byte) (-91), (byte)91, (byte) (-126), (byte)116, (byte)43, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._reportInvalidToken("was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name", "was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3374
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)75;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 46, pipedInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, (byte)1, (byte)1, true);
      assertEquals(5, byteArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(46, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)1, (byte)0, (byte)0, (byte)75}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      ObjectCodec objectCodec1 = uTF8StreamJsonParser0.getCodec();
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertSame(objectCodec1, objectCodec0);
      assertEquals(5, byteArray0.length);
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, pipedInputStream0.available());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(46, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-98), (byte)1, (byte)0, (byte)0, (byte)75}, byteArray0);
      assertNotNull(objectCodec1);
      
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant((Base64Variant) null, "WG6jxdc1n D2XP", true, 'U', 1290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",#,ZDk89Nm;`gjD", true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(bufferRecycler1);
      
      byteArrayInputStream0.mark((-457));
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(160);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 0, 0, true);
      assertEquals(3, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(2, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertFalse(bufferRecycler0.equals((Object)bufferRecycler1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.readValueAsTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.mark(631);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      byteArrayInputStream0.close();
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild((-1610));
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      SerializedString serializedString0 = new SerializedString("");
      assertEquals("", serializedString0.toString());
      assertEquals("", serializedString0.getValue());
      assertEquals(0, serializedString0.charLength());
      assertNotNull(serializedString0);
      
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream2.available());
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream2);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream2, false);
      assertEquals(5, byteArray0.length);
      assertEquals(5, byteArrayInputStream2.available());
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext1, iOContext0);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream1);
      assertNotSame(byteArrayInputStream2, byteArrayInputStream0);
      assertSame(iOContext0, iOContext1);
      assertEquals(5, byteArray0.length);
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(5, byteArrayInputStream2.available());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(iOContext1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild(0);
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer2);
      assertEquals(0, byteQuadsCanonicalizer2.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer2.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer2.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.size());
      assertFalse(byteQuadsCanonicalizer2.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer2.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer2.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer2.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertNotNull(byteQuadsCanonicalizer2);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 32767, byteArrayInputStream2, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 1, 57, false);
      assertEquals(5, byteArray0.length);
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer2.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer2.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer2.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.size());
      assertFalse(byteQuadsCanonicalizer2.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer2.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer2.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer2.totalCount());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(32767, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(5, byteArrayInputStream2.available());
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer2));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream1));
      assertFalse(byteArrayInputStream2.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)92, (byte)92, (byte)92, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken(", copyCount=", (-1595));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)42;
      byteArray0[7] = (byte)0;
      char[] charArray0 = iOContext0.allocNameCopyBuffer(1);
      assertEquals(200, charArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(charArray0);
      
      char[] charArray1 = iOContext0.allocConcatBuffer();
      assertNotSame(charArray1, charArray0);
      assertEquals(4000, charArray1.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ObjectCodec objectCodec0 = null;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)42, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3435, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1204, 0, false);
      assertEquals(9, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3435, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)42, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteArrayInputStream byteArrayInputStream1 = (ByteArrayInputStream)uTF8StreamJsonParser0.getInputSource();
      assertSame(byteArrayInputStream0, byteArrayInputStream1);
      assertSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(9, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(3435, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(9, byteArrayInputStream1.available());
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)37, (byte)37, (byte)42, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      boolean boolean0 = true;
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000231; line: 1, column: -1185]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-4);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(6, byteArray0.length);
      assertEquals(6, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF8, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(3);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 614, (byte) (-4));
      assertEquals(6, byteArray0.length);
      assertEquals((-608), byteArrayInputStream1.available());
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream1, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 1023, (-1205), false);
      assertEquals(6, byteArray0.length);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals((-608), byteArrayInputStream1.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals((-608), byteArrayInputStream1.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(jsonLocation0);
      
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      String string0 = uTF8StreamJsonParser0._getText2(jsonToken0);
      assertEquals("null", string0);
      assertSame(iOContext0, iOContext1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertEquals(JsonEncoding.UTF8, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals((-608), byteArrayInputStream1.available());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string0);
      
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing '\"' for name
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000232; line: 1, column: -1204]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext1);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-94);
      char[] charArray0 = iOContext1.allocNameCopyBuffer(1);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(200, charArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(charArray0);
      
      byteArray0[1] = (byte) (-1);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-293), sequenceInputStream0, objectCodec0, (ByteQuadsCanonicalizer) null, byteArray0, 318, 55, false);
      assertEquals(2, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertFalse(iOContext1.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_LE, iOContext1.getEncoding());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-293), uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-94), (byte) (-1)}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0._matchToken("", (byte) (-94));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertNotNull(iOContext1);
      
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)8;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (-2854), sequenceInputStream0, objectCodec0, byteQuadsCanonicalizer0, byteArray0, 0, 3, false);
      assertEquals(3, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-2854), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-60), (byte)8}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.getTextOffset();
      assertEquals(0, int0);
      assertSame(iOContext0, iOContext1);
      assertSame(iOContext1, iOContext0);
      assertEquals(3, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_BE, iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(JsonEncoding.UTF16_BE, iOContext1.getEncoding());
      assertTrue(iOContext1.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-2854), uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertArrayEquals(new byte[] {(byte) (-66), (byte) (-60), (byte)8}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, "q4#ce?`-*tbc29H", false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)117, (byte) (-83), (byte)92}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      char[] charArray0 = iOContext0.allocTokenBuffer();
      assertEquals(4000, charArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(charArray0);
      
      char[] charArray1 = iOContext0.allocNameCopyBuffer((-2605));
      assertNotSame(charArray1, charArray0);
      assertEquals(200, charArray1.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNotNull(charArray1);
      
      char[] charArray2 = iOContext0.allocConcatBuffer();
      assertNotSame(charArray2, charArray1);
      assertNotSame(charArray2, charArray0);
      assertEquals(4000, charArray2.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(charArray2.equals((Object)charArray1));
      assertFalse(charArray2.equals((Object)charArray0));
      assertNotNull(charArray2);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, byteArrayInputStream0, (ObjectCodec) null, (ByteQuadsCanonicalizer) null, byteArray0, 1144, 819, false);
      assertEquals(3, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-83), (byte)92}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      int int0 = uTF8StreamJsonParser0.getValueAsInt((-1794));
      assertEquals((-1794), int0);
      assertEquals(3, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-83), (byte)92}, byteArray0);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      assertEquals(3, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-83), (byte)92}, byteArray0);
      assertNotNull(jsonLocation0);
      
      int int1 = uTF8StreamJsonParser0.getTextOffset();
      assertEquals(0, int1);
      assertEquals(3, byteArray0.length);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-83), (byte)92}, byteArray0);
      
      try { 
        uTF8StreamJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid UTF-8 start byte 0xad
         //  at [Source: java.lang.String@0000000233; line: 1, column: -322]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(43);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = byteQuadsCanonicalizer0.makeChild((-129));
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer2);
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer1);
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer2.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer2.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer2.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer2.totalCount());
      assertFalse(byteQuadsCanonicalizer2.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer2.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.size());
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer1));
      assertNotNull(byteQuadsCanonicalizer2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-82);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer3 = ByteQuadsCanonicalizer.createRoot();
      assertNotSame(byteQuadsCanonicalizer3, byteQuadsCanonicalizer2);
      assertNotSame(byteQuadsCanonicalizer3, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer3, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer3.totalCount());
      assertEquals(0, byteQuadsCanonicalizer3.size());
      assertEquals(0, byteQuadsCanonicalizer3.spilloverCount());
      assertEquals(839877741, byteQuadsCanonicalizer3.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer3.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer3.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer3.primaryCount());
      assertTrue(byteQuadsCanonicalizer3.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer3.bucketCount());
      assertFalse(byteQuadsCanonicalizer3.equals((Object)byteQuadsCanonicalizer2));
      assertFalse(byteQuadsCanonicalizer3.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer3.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-841);
      int[] intArray1 = UTF8StreamJsonParser.growArrayBy(intArray0, 0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(1, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-841)}, intArray0);
      assertArrayEquals(new int[] {(-841)}, intArray1);
      assertNotNull(intArray1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2);
      assertNotNull(bufferedInputStream0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 3, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer2, byteArray0, 292, 0, false);
      assertEquals(7, byteArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer2.spilloverCount());
      assertEquals(64, byteQuadsCanonicalizer2.bucketCount());
      assertEquals(839877741, byteQuadsCanonicalizer2.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer2.totalCount());
      assertFalse(byteQuadsCanonicalizer2.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer2.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.size());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(3, uTF8StreamJsonParser0.getFeatureMask());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer3));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer2));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer3));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer1));
      assertArrayEquals(new byte[] {(byte)84, (byte) (-82), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.slowParseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(dataInputStream0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, dataInputStream0, true);
      assertFalse(fileDescriptor0.valid());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(1676);
      assertNotSame(byteQuadsCanonicalizer0, byteQuadsCanonicalizer1);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)115;
      byteArray0[1] = (byte)0;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 0, dataInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, 1, 1, false);
      assertEquals(2, byteArray0.length);
      assertFalse(fileDescriptor0.valid());
      assertNull(iOContext0.getEncoding());
      assertTrue(iOContext0.isResourceManaged());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(64, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertEquals(0, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(byteQuadsCanonicalizer0.equals((Object)byteQuadsCanonicalizer1));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)115, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 2025, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 55296, 3, true);
      assertEquals(1, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2025, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      Object object0 = uTF8StreamJsonParser0.getObjectId();
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(1, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2025, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNull(object0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, (-1172), bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1252, 2975, true);
      assertEquals(1, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, uTF8StreamJsonParser1.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser1.getCurrentToken());
      assertFalse(uTF8StreamJsonParser1.hasTextCharacters());
      assertEquals(0L, uTF8StreamJsonParser1.getTokenCharacterOffset());
      assertEquals(1, uTF8StreamJsonParser1.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartArrayToken());
      assertFalse(uTF8StreamJsonParser1.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser1.isClosed());
      assertNull(uTF8StreamJsonParser1.getCurrentName());
      assertFalse(uTF8StreamJsonParser1.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser1.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser1.canReadObjectId());
      assertNull(uTF8StreamJsonParser1.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser1.canReadTypeId());
      assertFalse(uTF8StreamJsonParser1.isExpectedStartObjectToken());
      assertEquals(1, uTF8StreamJsonParser1.getTokenColumnNr());
      assertEquals((-1172), uTF8StreamJsonParser1.getFeatureMask());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(uTF8StreamJsonParser1.equals((Object)uTF8StreamJsonParser0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertNotNull(uTF8StreamJsonParser1);
      
      int int0 = uTF8StreamJsonParser0.nextIntValue(110);
      assertEquals(0, int0);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(uTF8StreamJsonParser0, uTF8StreamJsonParser1);
      assertEquals(1, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(JsonToken.VALUE_NUMBER_INT, uTF8StreamJsonParser0.getCurrentToken());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertEquals(7, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals((-55292), uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(2025, uTF8StreamJsonParser0.getFeatureMask());
      assertTrue(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertEquals((-55292L), uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(uTF8StreamJsonParser0.equals((Object)uTF8StreamJsonParser1));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(bufferRecycler0);
      
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      assertNull(iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertNotNull(iOContext0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 3);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      assertNotNull(bufferedInputStream0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = ByteQuadsCanonicalizer.createRoot();
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertNotNull(byteQuadsCanonicalizer1);
      
      int int0 = 9;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 9, bufferedInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer1, byteArray0, 1, 3, false);
      assertEquals(2, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(9, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      ByteQuadsCanonicalizer byteQuadsCanonicalizer2 = ByteQuadsCanonicalizer.createRoot();
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer2, byteQuadsCanonicalizer1);
      assertEquals(0, byteQuadsCanonicalizer2.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer2.size());
      assertEquals(0, byteQuadsCanonicalizer2.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.tertiaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer2.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer2.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer2.totalCount());
      assertEquals(0, byteQuadsCanonicalizer2.bucketCount());
      assertTrue(byteQuadsCanonicalizer2.maybeDirty());
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer2.equals((Object)byteQuadsCanonicalizer1));
      assertNotNull(byteQuadsCanonicalizer2);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser0.getTokenLocation();
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer2);
      assertEquals(2, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(9, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer2));
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      assertNotNull(jsonLocation0);
      
      uTF8StreamJsonParser0._skipCR();
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer0);
      assertNotSame(byteQuadsCanonicalizer1, byteQuadsCanonicalizer2);
      assertEquals(2, byteArray0.length);
      assertEquals(JsonEncoding.UTF16_LE, iOContext0.getEncoding());
      assertFalse(iOContext0.isResourceManaged());
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, byteQuadsCanonicalizer1.size());
      assertEquals(0, byteQuadsCanonicalizer1.bucketCount());
      assertTrue(byteQuadsCanonicalizer1.maybeDirty());
      assertEquals(839877741, byteQuadsCanonicalizer1.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer1.primaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.secondaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer1.totalCount());
      assertEquals(0, byteQuadsCanonicalizer1.spilloverCount());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertEquals(9, uTF8StreamJsonParser0.getFeatureMask());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer0));
      assertFalse(byteQuadsCanonicalizer1.equals((Object)byteQuadsCanonicalizer2));
      assertArrayEquals(new byte[] {(byte)48, (byte)0}, byteArray0);
      
      try { 
        uTF8StreamJsonParser0.nextLongValue(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: UNKNOWN; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertNotNull(bufferRecycler0);
      
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(bufferRecycler1);
      
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertNotNull(iOContext0);
      
      byte byte0 = (byte)117;
      byte byte1 = (byte)92;
      byte[] byteArray0 = new byte[7];
      byte byte2 = (byte)40;
      byteArray0[0] = (byte)40;
      byteArray0[2] = (byte)92;
      byte byte3 = (byte) (-108);
      byteArray0[3] = (byte) (-108);
      byteArray0[4] = (byte)92;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)117;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)92, (byte) (-108), (byte)92, (byte)92, (byte)117}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      byteArrayInputStream0.close();
      assertEquals(7, byteArray0.length);
      assertEquals(7, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)92, (byte) (-108), (byte)92, (byte)92, (byte)117}, byteArray0);
      
      int int0 = 98;
      boolean boolean0 = true;
      ObjectCodec objectCodec0 = null;
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertNotNull(byteQuadsCanonicalizer0);
      
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 32767, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 0, (byte)40, true);
      assertEquals(7, byteArray0.length);
      assertFalse(iOContext0.isResourceManaged());
      assertNull(iOContext0.getEncoding());
      assertTrue(byteQuadsCanonicalizer0.maybeDirty());
      assertEquals(0, byteQuadsCanonicalizer0.size());
      assertEquals(0, byteQuadsCanonicalizer0.spilloverCount());
      assertEquals(0, byteQuadsCanonicalizer0.bucketCount());
      assertEquals(0, byteQuadsCanonicalizer0.totalCount());
      assertEquals(0, byteQuadsCanonicalizer0.primaryCount());
      assertEquals(839877741, byteQuadsCanonicalizer0.hashSeed());
      assertEquals(0, byteQuadsCanonicalizer0.tertiaryCount());
      assertEquals(0, byteQuadsCanonicalizer0.secondaryCount());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartObjectToken());
      assertFalse(uTF8StreamJsonParser0.isExpectedStartArrayToken());
      assertEquals(1, uTF8StreamJsonParser0.getTokenLineNr());
      assertNull(uTF8StreamJsonParser0.getLastClearedToken());
      assertFalse(uTF8StreamJsonParser0.canReadTypeId());
      assertEquals(1, uTF8StreamJsonParser0.getTokenColumnNr());
      assertFalse(uTF8StreamJsonParser0.hasCurrentToken());
      assertFalse(uTF8StreamJsonParser0.hasTextCharacters());
      assertEquals(32767, uTF8StreamJsonParser0.getFeatureMask());
      assertNull(uTF8StreamJsonParser0.getCurrentToken());
      assertFalse(uTF8StreamJsonParser0.canReadObjectId());
      assertEquals(0L, uTF8StreamJsonParser0.getTokenCharacterOffset());
      assertFalse(uTF8StreamJsonParser0.requiresCustomCodec());
      assertEquals(0, uTF8StreamJsonParser0.getCurrentTokenId());
      assertEquals(0, uTF8StreamJsonParser0.getFormatFeatures());
      assertFalse(uTF8StreamJsonParser0.isClosed());
      assertNull(uTF8StreamJsonParser0.getCurrentName());
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
      assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
      assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
      assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
      assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
      assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
      assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
      assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
      assertFalse(bufferRecycler1.equals((Object)bufferRecycler0));
      assertArrayEquals(new byte[] {(byte)40, (byte)0, (byte)92, (byte) (-108), (byte)92, (byte)92, (byte)117}, byteArray0);
      assertNotNull(uTF8StreamJsonParser0);
      
      try { 
        uTF8StreamJsonParser0.nextIntValue(63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: com.fasterxml.jackson.core.util.BufferRecycler@0000000234; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, pipedInputStream0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer1 = byteQuadsCanonicalizer0.makeChild(0);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteQuadsCanonicalizer0.toString();
      pipedInputStream0.skip(0L);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, (-223), pipedInputStream0, objectCodec0, byteQuadsCanonicalizer1, byteArray0, (byte)0, 93, true);
      try { 
        uTF8StreamJsonParser0.nextIntValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: java.io.PipedInputStream@0000000235; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "IwZ+FH|", false);
      ByteQuadsCanonicalizer.createRoot();
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)117;
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, 1, (InputStream) null, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-5578), (-476), true);
      // Undeclared exception!
      try { 
        uTF8StreamJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5578
         //
         verifyException("com.fasterxml.jackson.core.json.UTF8StreamJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      byteQuadsCanonicalizer0.makeChild((-129));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)84;
      ByteQuadsCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext0, 1, mockFileInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (-2665), 0, false);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext1, (-2535), sequenceInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)84, (-129), true);
      try { 
        uTF8StreamJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte)12, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      uTF8StreamJsonParser0.getValueAsString((String) null);
      UTF8StreamJsonParser uTF8StreamJsonParser1 = new UTF8StreamJsonParser(iOContext0, 15, byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, 702, 55, false);
      String string0 = uTF8StreamJsonParser1.getValueAsString("$VALUES");
      assertNotNull(string0);
      assertEquals("$VALUES", string0);
      
      JsonLocation jsonLocation0 = uTF8StreamJsonParser1.getTokenLocation();
      assertEquals((-1L), jsonLocation0.getCharOffset());
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals(0, jsonLocation0.getColumnNr());
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte) (-42);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)54;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)80;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1834), (byte)0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, byteArrayInputStream0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ByteQuadsCanonicalizer byteQuadsCanonicalizer0 = ByteQuadsCanonicalizer.createRoot();
      UTF8StreamJsonParser uTF8StreamJsonParser0 = new UTF8StreamJsonParser(iOContext1, (byte) (-42), byteArrayInputStream0, (ObjectCodec) null, byteQuadsCanonicalizer0, byteArray0, (byte)0, 7, true);
      try { 
        uTF8StreamJsonParser0._parseName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: java.io.ByteArrayInputStream@0000000010; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }
}
