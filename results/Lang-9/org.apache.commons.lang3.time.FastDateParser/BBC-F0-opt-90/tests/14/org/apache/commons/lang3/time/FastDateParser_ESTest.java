/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 04:22:36 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "1isu5)*");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("+", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(45);
      assertEquals(1945, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("7", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTPNT");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("5=ro>a,\"RJ", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=GMTPNT,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2143), "+");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "1isu5)*");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("+", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("]Sj5dG1aUF}*{G", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2311));
      assertEquals((-311), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-434), "]Sj5dG1aUF}*{G");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("1isu5)*", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(32);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("AET", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F:V #=L*~{ImV@=", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(1111);
      FastDateParser fastDateParser0 = new FastDateParser("6TP3pt| ^2U_QG", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("<1<K&R+DfRDvq9", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser(" nIot+in (", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(901);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(669, "+", 669, 0, 669, 669, 669, 0, 669, (-334));
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("+", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("4;.ul", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("sN", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("74z1+Kp8!x`K");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("zffZ;SK5%.sZ.l", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTVST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "zffZvu#;|$;", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("zffZvu#;|$;", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ACT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(81, "3GS{O");
      FastDateParser fastDateParser0 = new FastDateParser("yQ =G-", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("3GS{O");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("F''(9DrlAYx#", timeZone0, locale0);
      assertEquals("F''(9DrlAYx#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("`qe;iZ30@ 7[", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "WqBTFVI}P1");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("_=N@@q=D$w,Q", simpleTimeZone0, locale0);
      assertEquals("_=N@@q=D$w,Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("w^X", timeZone0, locale0);
      assertEquals("w^X", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "WqBTFVI}P1");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("@&=D!#@T", simpleTimeZone0, locale0);
      assertEquals("@&=D!#@T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3322, ">&eK-D#EE");
      FastDateParser fastDateParser0 = new FastDateParser(">&eK-D#EE", simpleTimeZone0, locale0);
      assertEquals(">&eK-D#EE", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(";Q", timeZone0, locale0);
      assertEquals(";Q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("9wbN'[iKMbH44;9", timeZone0, locale0);
      assertEquals("9wbN'[iKMbH44;9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("8cD=P}B}~n}", timeZone0, locale0);
      assertEquals("8cD=P}B}~n}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = fastDateParser0.parse("-c!eeEH|q)u(3", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("E![m3D|A", timeZone0, locale0);
      assertEquals("E![m3D|A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "WqBTFVI}P1");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("2A**#-y%__C'axZGH", simpleTimeZone0, locale0);
      assertEquals("2A**#-y%__C'axZGH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "MIT");
      FastDateParser fastDateParser0 = new FastDateParser("0A'A_[P}@$", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("Vk~|g", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(";Q", "/D4[br>$g)MU_,m~W", "");
      FastDateParser fastDateParser0 = new FastDateParser("/D4[br>$g)MU_,m~W", timeZone0, locale0);
      assertEquals("/D4[br>$g)MU_,m~W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".o-MDM#s_kl])yt", timeZone0, locale0);
      assertEquals(".o-MDM#s_kl])yt", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("M-Y!!eL)`Iiey9+Z3i@", timeZone0, locale0);
      assertEquals("M-Y!!eL)`Iiey9+Z3i@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(",e-filZ", timeZone0, locale0);
      assertEquals(",e-filZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(102, "E)]R(K(o2kTC%\"\"");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("E)]R(K(o2kTC%\"\"", simpleTimeZone0, locale0);
      assertEquals("E)]R(K(o2kTC%\"\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(":Z$uMJ{FWeV#Qx", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2000));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("W", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Da~alGL~/_", timeZone0, locale0);
      assertEquals("Da~alGL~/_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      assertEquals("{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M=&!E\"[$}]}T<k@.Y");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("M=&!E\"[$}]}T<k@.Y", timeZone0, locale0);
      assertEquals("M=&!E\"[$}]}T<k@.Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("?X~pDBaXP/7!5", timeZone0, locale0);
      assertEquals("?X~pDBaXP/7!5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale(";Q", "/D4[br>$g)MU_,m~W", "");
      FastDateParser fastDateParser0 = new FastDateParser("*o4", timeZone0, locale0);
      assertEquals("*o4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zffZv;S|$.;", timeZone0, locale0);
      Locale locale1 = Locale.FRANCE;
      FastDateParser fastDateParser1 = new FastDateParser("=P%l(t`P9o_HA1%Z;w", timeZone0, locale1);
      FastDateParser fastDateParser2 = new FastDateParser("zffZv;S|$.;", timeZone0, locale1);
      String string0 = "";
      try { 
        fastDateParser2.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|CT|CT|C|CS|D|ET|ET|F|KT|KT|LT|M|NT|QT|R|S|WT|ZS|ZT|Z|D|N|O|ogivleSadr ie|R|S|T|A|C|D|ET|E|HD|HS|HT|hT|HT|K|LT|L|O|S|V|X|AT|DT|AS|AT|A|C|D|ET|E|GT|G|S|JT|J|K|N|AT|AT|E|F|IT|M|M\\+10|M\\+20|M\\+30|M\\+40|M\\+50|M\\+60|M\\+70|M\\+80|M\\+90|M\\+00|M\\+10|M\\+20|M\\+30|M\\+40|M-10|M-20|M-30|M-40|M-50|M-60|M-70|M-80|M-90|M-00|M-10|M-20|S|Y|D|er vn\u00E9 'lsa|er vn\u00E9 'aa|er vn\u00E9 'rn|er vn\u00E9 'sal|er vn\u00E9 eCahm|er vn\u00E9 elAlniu|er vn\u00E9 elEt|er vn\u00E9 eNuel-\u00E9ad|er vn\u00E9 eSitPer tMqeo|er vn\u00E9 eTreNue|er vn\u00E9 e ohue|er vn\u00E9 uCnr|er vn\u00E9 uPcfqe|er 'fhnsa|er 'fiu etae|er 'fiu elEt|er 'fiu elOet|er 'laAa|er 'ndr|er 'qa|er 'qoe|er 'retn|er 'r\u00E9i|er 'zrada|er 'uoecnrl|er 'uoed 's|er 'uoed 'us|er 'nohn|er 'no\u00E9i etae|er 'no\u00E9i retl|er 'rus|er 'mk|er 'rl|er 's-ea|er 't rtniu|er 't 'utai etae\\(utai usd|er 't 'utai etae\\(utai usdNuel-alsd u\\)|er 't 'utai retl Tsai\\)|er 't 'utai retl Vcoi\\)|er 't 'uoecnrl|er 't 'uoed 's|er 't 'uoed 'us|er 't eCb|er 't eFdi|er 't elEt\\(ovleGle uSd|er 't elErp etae|er 't elIed \u00E2us|er 't elIeMcure|er 't eLr oe|er 't eNrok|er 't e \u00E7rs|er 't e aosocdnae|er 't uCii|er 't uGonadd 's|er 't uGonadd 'us|er 't uPrga|er 't radie|er eBlve|er eCpVr|er eCobla|er eCuk|er eClmi|er eDvs|er eDmn-'ril|er eFrad eNrna|er eFdi|er eGmi|er eGenih|er eGyn|er eGyn rnas|er eGoge|er eHn og|er eHv|er eKrbt|er eKan\u00EFrk|er eKsi|er eKzlra|er elAr|er elErp etae|er elIed \u00E2us|er elIeMcure|er elIdnseocdnae|er elo\u00E9nIde|er elOz\u00E9itn|er elUanatr|er elUuuy|er el\u00C9utu|er el\u00CEeCrsms|er el\u00CEed ie|er el\u00CEed hei|er el \u00E9no|er eMgdn|er eMlii|er eMuie|er eMwo|er eMamr|er eNuu|er eNu|er eNrok|er eNuel-a\u00E9oi|er eNvsiis|er ePlo|er ePpuseNuel-une|er ePtoalvkKmhtk|er ePhpi|er eRtea|er eSkai|er eSnaor|er eSoa|er eTht|er eTmrLse|er eTklu|er eTna|er eTvl|er eVaiotk|er eVso|er eWk|er eWli tFtn|er eYktrnug|er e \u00E7rs|er e aaao|er e lsMrhl|er e advs|er e aqie|er e aosocdnae|er e ecels|er e ersasrlsatriusfa\u00E7ie|er e lsCcs|er e lsCo|er e lsFlln|er e lsSlmn|er uBnlds|er uBotn|er uBue|er uB\u00E9i|er uCii|er uGaa|er uGonadd 's|er uGonadd 'us|er uIkus|er uKrhzsa|er umrde eGenih|er uNpl|er uPksa|er uPrga|er uPru|er uSrnm|er uTdiitn|er uTrmnsa|er uVnau|er uVnzea|er oml 'fiu uSd|er oml 'lsa|er oml 'mzne|er oml 'rbe|er oml 'aa|er oml 'ne|er oml 'rn|er oml eCie|er oml eCre|er oml eGoged u|er oml elAlniu|er oml elEt|er oml elEt\\(ovleGle uSd|er oml elOet\\(utai\\)|er oml eNuel-\u00E9ad|er oml eSitPer tMqeo|er oml eSmr|er oml eTreNue|er oml e ohue|er oml e lsMrans|er oml uCnr|er oml uGle|er oml uJpn|er oml uPcfqe|er tnaddAsrlecnrl Asrled u\\)|er tnaddAsrlecnrl Asrled u/ovleGle usd|er tnaddAsrlecnrl Trior uNr\\)|er tnaddAsrleoinae\\(uesad|er tnaddAsrleoinae\\(amne|er tnaddAsrleoinae\\(itra|er tnaddIr\u00EB|er tnadd hta|er tnadd ua|er tnadd 'utai cietl cnr\\)|er tnadd odHw|er tnadd ocu|er tnadd ao|er tnaddsPtar|K|OT|S|C|D|O|RT|RT|RT|S|S|G|OT|otnySadr ie|RT|S|HT|HT|IT|AT|AT|AT|D|ET|E|H|IT|M|S|S|U|V|Y|C|D|FT|F|OT|P|R|S|U|ZT|ZT|MT|RT|D|E|ET|G|hlpie tnadTm|HT|K|MT|MT|OT|S|W|YT|Y|OT|YT|E|OT|AT|AT|AT|B|C|G|rdeoys ie|RT|R|S|YT|AT|ep nvre oron|F|J|K|L|M|O|V|LT|T|Y|Z|E|LT|OT|U|AT|A|ET|E|F|GT|G|I|I|IA|ST|ST|J|AT|ET)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      try { 
        fastDateParser0.parse("EAT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"EAT\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(669, "+", 669, 0, 669, (-1559), 669, 0, (-932), (-334));
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("+", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject(" is not a supported timezone name");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \" is not a supported timezone name\" does not match \\+
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTART", timeZone0, locale0);
      Locale locale1 = Locale.KOREAN;
      FastDateParser fastDateParser1 = new FastDateParser("GMTART", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "WqBTFVI}P1");
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("WqBTFVI}P1", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("WqBTFVI}P1", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("M=&!E\"[$}]}T<k@.Y", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("FastDateParser[M=&!E\"[$}]}T<k@.Y,,GMT]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F:V #=L*~{ImV@=", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("F:V #=L*~{ImV@=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("K[d<ZXHI#X}[[X", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("Lo;z'jbb3?CFa~bs", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("F:V #=L*~{ImV@=", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++):", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2143), "+");
      FastDateParser fastDateParser0 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("de", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Heure de Greenwich", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("Heure de Greenwich", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(669, "+", 669, 0, 669, (-1559), 669, 0, (-932), (-334));
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("K[d<ZXHI#X}[[X", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("VST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-223), "=;3A&,z>R8RKaV}UX");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("=8pe#NLpvRZL*A12", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[=8pe#NLpvRZL*A12,en_GB,=;3A&,z>R8RKaV}UX]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Heure de Greenwich", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "zffZ;SK5%.sZ.l");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("F", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(8);
      fastDateParser0.parse("?=D=SmhM6LL~ABh#7", parsePosition0);
      assertEquals(9, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("MTAGT");
      FastDateParser fastDateParser0 = new FastDateParser("MTAGT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6W=1sRWPM\"[n");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5&<kyyamn^$V^", timeZone0, locale0);
      assertEquals("5&<kyyamn^$V^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("Fz+$sdvk(i96v>Uq5o", timeZone0, locale0);
      assertEquals("Fz+$sdvk(i96v>Uq5o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "zffZvu#;|$;", 1, 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("zffZvu#;|$;", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertTrue(timeZone0.useDaylightTime());
  }
}
