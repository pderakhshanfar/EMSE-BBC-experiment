/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 09:07:53 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.LinkedList;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}Xb\"m.Y#<6x");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("a}Xb\"m.Y#<6x", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("a}XbWm.Y#<6x", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser$3", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "3S^umM+Nd%");
      FastDateParser fastDateParser0 = new FastDateParser("WZxLIrXY|:lU<Ot", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("\"k!~=:r:_C", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2531));
      assertEquals((-531), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("F$%2L]=fZmO}+S", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "H2S>@T");
      Locale locale0 = new Locale("I`>r");
      FastDateParser fastDateParser0 = new FastDateParser("H2S>@T", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("H2S>@T", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3477), "05.ln");
      Locale locale0 = new Locale("05.ln");
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTBST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("Greenwich Zeit", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      locale0.toLanguageTag();
      int int0 = (-1);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "3S^umM+Nd%");
      String string0 = "WZxLIrXY|:lU<Ot";
      FastDateParser fastDateParser0 = new FastDateParser("WZxLIrXY|:lU<Ot", simpleTimeZone0, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("WZxLIrXY|:lU<Ot", simpleTimeZone0, locale1);
      Locale locale2 = new Locale(string0);
      ParsePosition parsePosition0 = new ParsePosition(int0);
      fastDateParser0.isNextNumber();
      int int1 = (-1081);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("$#<", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("OJuMe')\"~C7F)j(");
      Locale locale0 = Locale.TAIWAN;
      timeZone0.getDisplayName(locale0);
      Locale locale1 = new Locale("\u683C\u6797\u5A01\u6CBB\u6642\u9593");
      FastDateParser fastDateParser0 = new FastDateParser("\u683C\u6797\u5A01\u6CBB\u6642\u9593", timeZone0, locale1);
      fastDateParser0.hashCode();
      Locale.getISOLanguages();
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale2 = Locale.GERMANY;
      FastDateParser fastDateParser1 = new FastDateParser("6H~z?Qo^3r},F~(", timeZone1, locale1);
      FastDateParser fastDateParser2 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale0);
      Object object0 = new Object();
      fastDateParser0.equals("*n (bf\"i`XEA1e*cG");
      fastDateParser2.parse("*n (bf\"i`XEA1e*cG");
      String string0 = fastDateParser2.toString();
      assertEquals("FastDateParser[*n (bf\"i`XEA1e*cG,zh_TW,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(VsP^[|)YF");
      Locale locale0 = Locale.CHINESE;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("(VsP^[|)YF", timeZone0, locale0);
      fastDateParser0.parseObject("(VsP^[|)YF", parsePosition0);
      fastDateParser0.parse("(t[h_Rpyc/r4", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("J7p9_C%$H");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      try { 
        fastDateParser0.parse("z`Ho-e'Cc");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"z`Ho-e'Cc\" does not match \\]
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("_Y3eZ&J", timeZone0, locale0);
      assertEquals("_Y3eZ&J", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(94, "a}XbWm.Y#<6_;Prx");
      FastDateParser fastDateParser0 = new FastDateParser("a}XbWm.Y#<6_;Prx", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(94, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3477), "05.ln");
      Locale locale0 = new Locale("05.ln");
      FastDateParser fastDateParser0 = new FastDateParser("@)nY_\"01,}:&m", simpleTimeZone0, locale0);
      assertEquals("@)nY_\"01,}:&m", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("<", timeZone0, locale0);
      assertEquals("<", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(";s'Q>W", timeZone0, locale0);
      assertEquals(";s'Q>W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("9t`e3x}?LX;{qP:'0", timeZone0, locale0);
      assertEquals("9t`e3x}?LX;{qP:'0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("82/PKT!S>0-0GDx9", timeZone0, locale0);
      assertEquals("82/PKT!S>0-0GDx9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("5Id'L_lu3x", timeZone0, locale0);
      assertEquals("5Id'L_lu3x", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("4uJ5d]vj56?;", timeZone0, locale0);
      assertEquals("4uJ5d]vj56?;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "3S^umM+Nd%");
      FastDateParser fastDateParser0 = new FastDateParser("3S^umM+Nd%", simpleTimeZone0, locale0);
      assertEquals("3S^umM+Nd%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3477), "05.ln");
      Locale locale0 = new Locale("05.ln");
      FastDateParser fastDateParser0 = new FastDateParser("05.ln", simpleTimeZone0, locale0);
      assertEquals("05.ln", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("/!M`|mY+3|};", timeZone0, locale0);
      assertEquals("/!M`|mY+3|};", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(".tco&X.u~3B;", timeZone0, locale0);
      assertEquals(".tco&X.u~3B;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("-F=C. 9s}u.~^IA/", timeZone0, locale0);
      assertEquals("-F=C. 9s}u.~^IA/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(")'=", timeZone0, locale0);
      assertEquals(")'=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("y");
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4);
      fastDateParser0.parse("9n@8NJ?mm41'6=", parsePosition0);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+Ew+|yY|z+|''|'[^']++(''[^']*+*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+Ew+|yY|z+|''|'[^']++(''[^']*+*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+Ew+|yY|z+|''|'[^']++(''[^']*+*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("{<6M:ja!H|", timeZone0, locale0);
      assertEquals("{<6M:ja!H|", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$4");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("7_?.?S>g$lf0?/'qr2n", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(36);
      assertEquals(1936, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale0);
      try { 
        fastDateParser0.parse("u+L\t;P9dP");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"u+L\t;P9dP\" does not match \\*
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}Xb\"m.Y#<6x");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("a}Xb\"m.Y#<6x", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("a}Xb\"m.Y#<6x");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"a}Xb\"m.Y#<6x\" does not match (AM|PM)\\}
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = new Locale("|TneF");
      FastDateParser fastDateParser0 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}{");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("><&gDR%[08+{8fU:", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(41, "><&gDR%[08+{8fU:");
      FastDateParser fastDateParser1 = new FastDateParser("><&gDR%[08+{8fU:", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*n (bf\"i`XEA1e*cG", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Greenwich Zeit", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}{");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2158, "cJ>X)Rn");
      Locale locale0 = new Locale("cJ>X)Rn", "cJ>X)Rn", "cJ>X)Rn");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("cJ>X)Rn", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9n@8NJ?mm41'6=");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("J7p9_C%$H");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("]", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\]", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "H2S>@T");
      Locale locale0 = new Locale("I`>r");
      FastDateParser fastDateParser0 = new FastDateParser("H2S>@T", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=H2S>@T,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "H2S>@T");
      Locale locale0 = new Locale("I`>r");
      FastDateParser fastDateParser0 = new FastDateParser("H2S>@T", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("a}XbWm.Y#<6x");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("\"k!~=:r:_C", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("\"k!~=:r:_C", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3477), "05.ln");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("1;h,inb", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(508);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("PST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EAT");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("de-DE", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("0#[{:?W oO/hI|_d");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("9n@8NJ?mm'16");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("$H#yG", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "3S^umM+Nd%");
      FastDateParser fastDateParser0 = new FastDateParser("WZxLIrXY|:lU<Ot", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("Greenwich Zeit", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+MH+|+MM+|S+hW+|+a+|d+|h+|k+m+|s+|w+|y+|z+|''|'[^']++h''[^']*+)*+'|^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+MH+|+MM+|S+hW+|+a+|d+|h+|k+m+|s+|w+|y+|z+|''|'[^']++h''[^']*+)*+'|^'A-Za-z]++", fastDateParser0.getPattern());
  }
}
