/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 11:49:53 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("sxswYV.6-`0\"SD+", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(35);
      assertEquals(1935, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTNSS");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(";9N9=UGm64d;Tve&K", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      Object object0 = fastDateParser0.parseObject(";9N9=UGm64d;Tve&K", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi6|");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("hi6|", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "@8c3]Wh");
      FastDateParser fastDateParser0 = new FastDateParser("@8c3]Wh", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-722), "$0%k");
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(566, "GMTNST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTNST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3500));
      assertEquals((-1500), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("$0%k", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("sxswYV.6-`0\"SD+", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2093));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("6", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("#");
      Locale locale0 = new Locale("#");
      FastDateParser fastDateParser0 = new FastDateParser("#", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("q%)E2jDV_5m+vMz", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      String string0 = "zm&m /JW\\rl";
      FastDateParser fastDateParser0 = new FastDateParser("zm&m /JW\rl", timeZone0, locale0);
      Locale locale1 = Locale.ITALY;
      FastDateParser fastDateParser1 = new FastDateParser("zm&m /JW\rl", timeZone0, locale1);
      FastDateParser fastDateParser2 = new FastDateParser(string0, timeZone0, locale0);
      int int0 = 94;
      fastDateParser2.adjustYear(int0);
      try { 
        fastDateParser1.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"zm&m /JW\\rl\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACST|ACT|ACWST|AEST|AFT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CET|CHAST|CHOT|ChST|CHUT|CKT|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EAST|EAT|ECT|EET|EGT|EST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HKT|HOVT|HST|ICT|IOT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHST|LINT|MAGT|MART|MAWT|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NFT|NOVT|NPT|NRT|NST|NUT|NZST|OMST|Ora del Bangladesh|Ora del Bhutan|Ora del Brasile|Ora del Brunei|Ora del Cile|Ora del Kirghizistan|Ora del Nepal|Ora del Pakistan|Ora del Paraguay|Ora del Per\u00F9|Ora del Tagikistan|Ora del Terr\\. Britannico dell'Oceano Indiano|Ora del Turkmenistan|Ora del Venezuela|Ora dell'Afghanistan|Ora dell'Africa centrale|Ora dell'Africa occidentale|Ora dell'Africa orientale|Ora dell'Argentina|Ora dell'Armenia|Ora dell'Azerbaigian|Ora dell'Ecuador|Ora dell'Europa centrale|Ora dell'Europa occidentale|Ora dell'Europa orientale|Ora dell'Indocina|Ora dell'Indonesia centrale|Ora dell'Indonesia occidentale|Ora dell'Indonesia orientale|Ora dell'Isola Christmas|Ora dell'Isola della Fenice|Ora dell'Isola di Pasqua|Ora dell'Isola Macquarie|Ora dell'Uruguay|Ora dell'Uzbekistan|Ora della Birmania/Myanmar|Ora della Bolivia|Ora della Colombia|Ora della Georgia|Ora della Groenlandia occidentale|Ora della Groenlandia orientale|Ora della Guyana|Ora della Guyana Francese|Ora della Malaysia|Ora della Nuova Caledonia|Ora delle Azzorre|Ora delle Falkland|Ora delle Galapagos|Ora delle Isole Cocos|Ora delle Isole Cook|Ora delle Isole Gilbert|Ora delle Isole Marchesi|Ora delle Isole Marshall|Ora delle Isole Salomone|Ora delle Line Islands|Ora delle Maldive|Ora delle Seychelles|Ora delle Terre Australi e Antartiche Francesi|Ora di Acre|Ora di Alma-Ata|Ora di Anadyr|Ora di Aqtau|Ora di Aqtobe|Ora di Capo Verde|Ora di Chatham standard|Ora di Choibalsan|Ora di Chuuk|Ora di Davis|Ora di Dumont-d'Urville|Ora di Ekaterinburg|Ora di Fernando de Noronha|Ora di Figi|Ora di Gambier|Ora di Hong Kong|Ora di Hovd|Ora di Irkutsk|Ora di Jakutsk|Ora di Kosrae|Ora di Krasnojarsk|Ora di Magadan|Ora di Mauritius|Ora di Mawson|Ora di Nauru|Ora di Niue|Ora di Norfolk|Ora di Novosibirsk|Ora di Omsk|Ora di Oral|Ora di Palau|Ora di Papua Nuova Guinea|Ora di Petropavlovsk-Kamchatski|Ora di Pohnpei|Ora di Qyzylorda|Ora di Reunion|Ora di Rothera|Ora di Sakhalin|Ora di Samara|Ora di Samoa|Ora di Singapore|Ora di Suriname|Ora di Syowa|Ora di Tahiti|Ora di Timor Leste|Ora di Tokelau|Ora di Tonga|Ora di Tuvalu|Ora di Ulaanbaatar|Ora di Ust-Nera|Ora di Vanuatu|Ora di Vladivostok|Ora di Vostok|Ora di Wake|Ora di Wallis e Futuna|Ora estiva britannica|Ora estiva centrale \\(Australia del Sud\\)|Ora estiva centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora estiva del Cile|Ora estiva del Paraguay|Ora estiva dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora estiva dell'Europa centrale|Ora estiva dell'Europa occidentale|Ora estiva dell'Europa orientale|Ora estiva dell'Isola di Pasqua|Ora estiva dell'Isola Macquarie|Ora estiva della Groenlandia occidentale|Ora estiva della Groenlandia orientale|Ora estiva delle Azzorre|Ora estiva di Figi|Ora estiva di Lord Howe|Ora estiva di Norfolk|Ora estiva di Samoa|Ora estiva irlandese|Ora estiva orientale \\(Tasmania\\)|Ora estiva orientale \\(Victoria\\)|Ora legale Cuba|Ora legale dell'Alaska|Ora legale dell'Atlantico occidentale|Ora legale della costa occidentale USA|Ora legale della Nuova Zelanda|Ora legale delle Isole Hawaii|Ora legale di Chatham|Ora legale di Israele|Ora legale di Saint-Pierre e Miquelon|Ora legale di Terranova|Ora legale Iran|Ora legale USA centrale|Ora legale USA occidentale|Ora legale USA orientale|Ora media del Ghana|Ora media di Greenwich|Ora solare Cuba|Ora solare del Giappone|Ora solare del golfo|Ora solare del Sudafrica|Ora solare dell'Alaska|Ora solare dell'Amazzonia|Ora solare dell'Arabia|Ora solare dell'Atlantico occidentale|Ora solare dell'India|Ora solare della Cina|Ora solare della Corea|Ora solare della costa occidentale USA|Ora solare della Georgia Australe|Ora solare della Nuova Zelanda|Ora solare delle Isole Hawaii|Ora solare di Saint-Pierre e Miquelon|Ora solare di Terranova|Ora solare Iran|Ora solare USA centrale|Ora solare USA occidentale|Ora solare USA orientale|Ora standard Australia centro-occidentale|Ora standard centrale \\(Australia del Sud\\)|Ora standard centrale \\(Australia del Sud/Nuovo Galles del Sud\\)|Ora standard centrale \\(Territori del Nord\\)|Ora standard dell'Australia occidentale|Ora standard dell'Australia orientale \\(Nuovo Galles del Sud\\)|Ora standard di Chamorro|Ora standard di Israele|Ora standard di Lord Howe|Ora standard di Mosca|Ora standard di Pitcairn|Ora standard di Samoa|Ora standard orientale \\(Queensland\\)|Ora standard orientale \\(Tasmania\\)|Ora standard orientale \\(Victoria\\)|ORAT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMST|PONT|PST|PWT|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Tempo universale coordinato|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WET|WFT|WGT|WIB|WIT|WITA|WSST|XJT|YAKT|YEKT)(\\p{IsNd}++)&(\\p{IsNd}++) /
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ZpQr/T`Q>@Da.p/<sO", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("PST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("ZpQr/T`Q>@Da.p/<sO", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTECT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yuvc5kT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yuvc5kT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("1004eP");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m{q#>1g-},,,mI-jBg");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("`VVq^e\"]*Q57.u:b", timeZone0, locale0);
      assertEquals("`VVq^e\"]*Q57.u:b", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Z^vwo~+yIQWZW", timeZone0, locale0);
      assertEquals("Z^vwo~+yIQWZW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("=+S}#uk~=", timeZone0, locale0);
      assertEquals("=+S}#uk~=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("S<fp+F9O%:v", timeZone0, locale0);
      assertEquals("S<fp+F9O%:v", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";9N9=UGm64d;Tve&K");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":=)3f2:", timeZone0, locale0);
      assertEquals(":=)3f2:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("k8j3]h", timeZone0, locale0);
      assertEquals("k8j3]h", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("77}B( w*\"AU", timeZone0, locale0);
      assertEquals("77}B( w*\"AU", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6E(M-\u0006{a");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("6E(M-\u0006{a", timeZone0, locale0);
      assertEquals("6E(M-\u0006{a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("3H5lNHbn8|s4/(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("49wi}Vm$PjOowYtFIS", timeZone0, locale0);
      assertEquals("49wi}Vm$PjOowYtFIS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("9&6!k2", timeZone0, locale0);
      assertEquals("9&6!k2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yuvc5kT");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("1004eP", timeZone0, locale0);
      assertEquals("1004eP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Huvc5kT");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("004eP", timeZone0, locale0);
      assertEquals("004eP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("/)Q]1YK9.(3L?D[X", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(362);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("$0%k", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3H5lNHbn8|s4/(");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(" D.", timeZone0, locale0);
      try { 
        fastDateParser0.parse("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642\" does not match  (\\p{IsNd}++)\\.
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(")Wk>_mWP7;&nTuu\"L", timeZone0, locale0);
      assertEquals(")Wk>_mWP7;&nTuu\"L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yuv=kT");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("yuv=kT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("004eP");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("?c?@\bfNYfr K.", timeZone0, locale0);
      assertEquals("?c?@\bfNYfr K.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("-[E,EI6", timeZone0, locale0);
      assertEquals("-[E,EI6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("*2%jAH\"!S", timeZone0, locale0);
      assertEquals("*2%jAH\"!S", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("!)k_.{}Fl<:y%", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("sxswYV.6-`0\"SD+", timeZone0, locale0);
      try { 
        fastDateParser0.parse("#9jt");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"#9jt\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      Locale locale1 = Locale.PRC;
      FastDateParser fastDateParser1 = new FastDateParser("$0%k", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDateParser fastDateParser1 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("sxswYV.6-`0\"SD+", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1013), "x7}0J+Y");
      Locale locale0 = new Locale("3]y|N6;hwbaeF&(]|G", "x7}0J+Y");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("x7}0J+Y", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Huvc5kT");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Huvc5kT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("004eP");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hi6|");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("hi6|", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("34c~,]:gQ/dy_TW^xF");
      boolean boolean0 = fastDateParser0.equals(date0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\$0%(\\p{IsNd}++)", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(V tZG~?Om0tx`{C\"8");
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", "DkL`llDT!B");
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(" locale does not support dates before 1868 AD)\n", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.GERMAN;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser(" locale does not support dates before 1868 AD)\n", timeZone0, locale0);
      fastDateParser0.parseObject(" locale does not support dates before 1868 AD)\n", parsePosition0);
      fastDateParser0.parse(" locale does not support dates before 1868 AD)\n", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[,,de_DE,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(V tZG~?Om0tx`{C\"8");
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", "DkL`llDT!B");
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("sxswYV.6-`0\"SD+", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("r8", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("?I8]");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("M", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("34V~ ,]JgQ/dy_@ ^A1");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("h''9SZms(-?~Gkq('_", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
  }
}
