/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:33:00 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(V tZG~?Om0tx`{C\"8");
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", "DkL`llDT!B");
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("(V tZG~?Om0tx`{C\"8", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "H_p}wyJ5.u0y");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("@rNc\"mu", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "],BJ");
      FastDateParser fastDateParser0 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("\u0003 8AE)@;d&", "(V tZG~?Om0tx`{C\"8");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-393));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("6Tj76`{I", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("Unparseable date: \"", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(83, "GMTCTT");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTCTT", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("\u0003 8AE)@;d&", "(V tZG~?Om0tx`{C\"8");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"");
      Locale locale0 = Locale.GERMANY;
      ParsePosition parsePosition0 = new ParsePosition((-1));
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(V tZG~?Om0tx`{C\"8");
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", "DkL`llDT!B");
      FastDateParser fastDateParser0 = new FastDateParser("\"", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("MMr Nz@:b_'R~", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      assertEquals("$0%k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("_Cw", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("_Cw", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("?0Y<#Rt.8Wa+zy,<Ys", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "H_p}wyJ5.u0y");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("@rNc\"mu", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("\"{tbn?>x'X{gIb<aAuo");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\"{tbn?>x'X{gIb<aAuo\" does not match @
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"");
      Locale locale0 = new Locale("GMTIET", "GMTIET");
      FastDateParser fastDateParser0 = new FastDateParser("DH<4S`Q%E0_uIG", timeZone0, locale0);
      assertEquals("DH<4S`Q%E0_uIG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("^a=dOF");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("^a=dOF", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("s;)G\"^O<kqic a]leYL", timeZone0, locale0);
      assertEquals("s;)G\"^O<kqic a]leYL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":DSFFq:YM", timeZone0, locale0);
      assertEquals(":DSFFq:YM", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8;XD%Td/Zd[eB,");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("8;XD%Td/Zd[eB,", timeZone0, locale0);
      assertEquals("8;XD%Td/Zd[eB,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"");
      Locale locale0 = new Locale("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", "(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|");
      FastDateParser fastDateParser0 = new FastDateParser("5,]_zjj^V~zF", timeZone0, locale0);
      assertEquals("5,]_zjj^V~zF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Dq;'qJj[\"H ku");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("k33Sf/n/OOj.A>xu0", timeZone0, locale0);
      assertEquals("k33Sf/n/OOj.A>xu0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("E2pGB1s6'Mw\"?GBFjZZ", timeZone0, locale0);
      assertEquals("E2pGB1s6'Mw\"?GBFjZZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("0Ds+,eO", timeZone0, locale0);
      assertEquals("0Ds+,eO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("/$F}3x!?X4Y", timeZone0, locale0);
      assertEquals("/$F}3x!?X4Y", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Dq;'qJj[\"H ku");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".S-\u0001.Rk[/O-HPd>P", timeZone0, locale0);
      assertEquals(".S-\u0001.Rk[/O-HPd>P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(V tZG~?Om0tx`{C\"8");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("~w(", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2856));
      assertEquals((-856), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "],BJ");
      FastDateParser fastDateParser0 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1413);
      assertEquals(3313, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("_E#\" Ei");
      FastDateParser fastDateParser0 = new FastDateParser("_E#\" Ei", timeZone0, locale0);
      assertEquals("_E#\" Ei", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Dq;'qJj[\"H ku");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, "N$s-&9UftJd~phB.");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Dq;'qJj[\"H ku", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Z>wro^SWzBF?7A", timeZone0, locale0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("(6m''{{kIfX#UN", timeZone0, locale0);
      assertEquals("(6m''{{kIfX#UN", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = new Locale("$0%k", "68#\\'H");
      FastDateParser fastDateParser0 = new FastDateParser("68#\\'H", timeZone0, locale0);
      assertEquals("68#\\'H", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("$0%k");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("$0%k", timeZone0, locale0);
      try { 
        fastDateParser0.parse("$0%k");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"$0%k\" does not match \\$0%(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = new Locale("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, "");
      FastDateParser fastDateParser0 = new FastDateParser("1W<", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject(".#:ZRbPA");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \".#:ZRbPA\" does not match 1(\\p{IsNd}++)<
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      Locale locale1 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("?0Y<#Rt.8Wa+zy,<Ys", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("9'l2", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("9'l2", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("9'l2", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("4p\r?", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1299, "]V7>\"/6g+xs");
      FastDateParser fastDateParser0 = new FastDateParser("w#<E*", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("1vpnv6+U>L");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, "N$s-&9UtJd~phB.");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("7>\"/6g+xs", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1013), "x7}0J+Y");
      Locale locale0 = new Locale("3]y|N6;hwbaeF&(]|G", "x7}0J+Y");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("x7}0J+Y", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("EqF7C.Lq:]W&N,");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("Heure de Greenwich", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8-Gkl<:R^D)M7.[R%");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1299, "]V7>\"/6g+xs");
      FastDateParser fastDateParser0 = new FastDateParser("w#<E*", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)#<(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)\\*", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4), "wq|40s");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=wq|40s,offset=-4,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("\u0003 8AE)@;d&", "(V tZG~?Om0tx`{C\"8");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("\u0003 8ae)@;d&", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("\u0003 8AE)@;d&", "(V tZG~?Om0tx`{C\"8");
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("GMT", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MrrbN@:b_'R", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(41);
      fastDateParser0.parseObject(" locale does not support dates before 1868 AD)\n", parsePosition0);
      assertEquals("java.text.ParsePosition[index=42,errorIndex=-1]", parsePosition0.toString());
      assertEquals(42, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(")");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(")", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[),de_DE,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(19, "N$s-&9UftJd~phB.");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Dq;'qJj[\"H ku", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1W<");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"");
      Locale locale0 = new Locale("GMTIET", "GMTIET");
      FastDateParser fastDateParser0 = new FastDateParser("m9dDEa41$gcVd/U", timeZone0, locale0);
      assertEquals("m9dDEa41$gcVd/U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("Wz@-:lVAIf)K", timeZone0, locale0);
      assertEquals("Wz@-:lVAIf)K", fastDateParser0.getPattern());
  }
}
