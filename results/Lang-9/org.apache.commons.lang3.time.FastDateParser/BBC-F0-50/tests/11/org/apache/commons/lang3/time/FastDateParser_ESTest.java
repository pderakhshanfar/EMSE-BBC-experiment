/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:17:29 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("w&yy,/tBa?4]bR6Y0", timeZone0, locale0);
      assertEquals("w&yy,/tBa?4]bR6Y0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("K", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parseObject("38Co't7", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      ParsePosition parsePosition0 = new ParsePosition(10);
      FastDateParser fastDateParser0 = new FastDateParser("-xPP>'U*6XL0o-hH#", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("-xPP>'U*6XL0o-hH#", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-651), "org.apache.commons.lang3.time.FastDateParser$2");
      FastDateParser fastDateParser0 = new FastDateParser("k@>K", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2000));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,TH", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3418), 1);
      Locale locale0 = Locale.forLanguageTag("s(iT*AQW0vYLC");
      FastDateParser fastDateParser0 = new FastDateParser("s(iT*AQW0vYLC", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3418));
      assertEquals((-1418), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      ParsePosition parsePosition0 = new ParsePosition((-925));
      FastDateParser fastDateParser0 = new FastDateParser("@U", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("^Q){}W", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,TH", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3418), 1);
      Locale locale0 = Locale.forLanguageTag("s(iT*AQW0vYLC");
      FastDateParser fastDateParser0 = new FastDateParser("W~Z,TH", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-210));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,TH", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3435), 1);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("M03Vd(<", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("EB:s&|q0S?ot", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z'0t", timeZone0, locale0);
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("Z'0t", timeZone0, locale1);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8~<o5tt[TS->tVW");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("8~<o5tt[TS->tVW", timeZone0, locale0);
      assertEquals("8~<o5tt[TS->tVW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-390));
      parsePosition0.setIndex(0);
      fastDateParser0.parse("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", parsePosition0);
      fastDateParser0.parse("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", parsePosition0);
      assertEquals(8, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=8,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,d\"Z'H", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3418), 1);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("W~Z,d\"Z'H", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("W~Z,d\"Z'H");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"W~Z,d\"Z'H\" does not match (\\p{IsNd}++)~(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Ile Macquarie|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 de Norfolk|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT),(\\p{IsNd}++)\"(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Ile Macquarie|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 de Norfolk|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z'0t", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPLT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@U");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("_MF.BUZo101rh^", timeZone0, locale0);
      assertEquals("_MF.BUZo101rh^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@U");
      Locale locale0 = Locale.forLanguageTag("@U");
      FastDateParser fastDateParser0 = new FastDateParser("^;'veW:)-VC", timeZone0, locale0);
      assertEquals("^;'veW:)-VC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("H>:!yQenUt}y^>V]$");
      FastDateParser fastDateParser0 = new FastDateParser("H>:!yQenUt}y^>V]$", timeZone0, locale0);
      assertEquals("H>:!yQenUt}y^>V]$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=LU.N&}Q}");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("=LU.N&}Q}", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("=LU.N&}Q}", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("9]iDyj)'", timeZone0, locale0);
      assertEquals("9]iDyj)'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "NET");
      FastDateParser fastDateParser0 = new FastDateParser("7", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("NET", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getTimeZone("(The ");
      FastDateParser fastDateParser0 = new FastDateParser("6Fpu^", timeZone0, locale0);
      assertEquals("6Fpu^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5;tF8[JhB%P6_", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(36);
      assertEquals(1936, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("cw");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("4YQJ-Hw6A[3~", timeZone0, locale0);
      assertEquals("4YQJ-Hw6A[3~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("3N9'@l^7'3Hs", timeZone0, locale0);
      assertEquals("3N9'@l^7'3Hs", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("2MTIST", timeZone0, locale0);
      assertEquals("2MTIST", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("1-FWynVt!8<7$'Z", timeZone0, locale0);
      assertEquals("1-FWynVt!8<7$'Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,TH", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3418), 1);
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("M03Vd(<", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2684);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("R)\"[", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("*i!|?:/Me\",Uv", timeZone0, locale0);
      assertEquals("*i!|?:/Me\",Uv", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(")t;A", timeZone0, locale0);
      assertEquals(")t;A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("6r");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("y/MvLST");
      FastDateParser fastDateParser0 = new FastDateParser("y/MvLST", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("dS<.}p+", timeZone0, locale0);
      assertEquals("dS<.}p+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8~<o5tt[TS->tVW");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("W@%%{", timeZone0, locale0);
      assertEquals("W@%%{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("G");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("G", timeZone0, locale0);
      assertEquals("G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("?'cDGZITAUp1,tmt4", timeZone0, locale0);
      assertEquals("?'cDGZITAUp1,tmt4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z'0t", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("EAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("$i+EWHW", timeZone0, locale0);
      assertEquals("$i+EWHW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(":tOsp!boG]ZR12;4ZfT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTNET");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"GMTNET\" does not match :
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("y/MvLST");
      FastDateParser fastDateParser0 = new FastDateParser("y/MvLST", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("(The ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"(The \" does not match (\\p{IsNd}++)/(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale1 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("SST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, ">59wk.6");
      FastDateParser fastDateParser1 = new FastDateParser(".", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("`", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("G#GG8<0]lH%RfC", timeZone0, locale0);
      Object object0 = new Object();
      boolean boolean0 = fastDateParser0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("cw");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1947, "\"N[P}m%L6Uvi)v3Yv");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"N[P}m%L6Uvi)v3Yv", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(1947, timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("y", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr_CA", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser(".", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals(".", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1947, "\"N[P}m%L6Uvi)v3Yv");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\"N[P}m%L6Uvi)v3Yv", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[\"N[P}m%L6Uvi)v3Yv,zh_TW,\"N[P}m%L6Uvi)v3Yv]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("(The ", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "W~Z,dH", 0, 0, 4, 4, 0, 0, 0, 0, 0, (-3418), 1);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("W~Z,dH", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[EB:s&|q0S?ot,de_DE,GMT]", timeZone0, locale0);
      assertEquals("FastDateParser[EB:s&|q0S?ot,de_DE,GMT]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(";KKzrSM7{Ok3{", timeZone0, locale0);
      assertEquals(";KKzrSM7{Ok3{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("Z'0");
      FastDateParser fastDateParser0 = new FastDateParser("Z'0", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("AST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }
}
