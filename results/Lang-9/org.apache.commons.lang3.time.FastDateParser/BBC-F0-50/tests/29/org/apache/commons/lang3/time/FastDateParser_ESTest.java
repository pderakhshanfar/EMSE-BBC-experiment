/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:19:05 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("F", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4KG\"U`mV +X}nt'");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zE%<u0sSjkw`EzDt", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(10);
      Object object0 = fastDateParser0.parseObject("G0aG<mZnxMKLb0WW%Q", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("h'4rLz(_", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateParser0.parseObject("h'4rLz(_", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zE%<u0sSjkw`EzDt", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";7Q", 0, 0, 0, 740, 0, 0, (-2964), 1240, 14);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(";7Q", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1479, "");
      Locale locale0 = new Locale("", "ja");
      FastDateParser fastDateParser0 = new FastDateParser("dib!", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=1479,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1171, "_eR)d_");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("_eR)d_", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2996));
      assertEquals((-996), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";7Q", 0, 0, 0, 740, 0, 0, 0, 1240, 14);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(";7Q", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(";7Q", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("zE%<u0sSjkw`EzDt", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("?vH@FV", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1986));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(";~(E+", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse(";~(E+", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zE%<u0sSjkw`EzDt", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("9,d|", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K|M+|S+|W+|Z+|a+|d+}h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.JAPAN;
      Locale locale2 = Locale.US;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K|M+|S+|W+|Z+|a+|d+}h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale2);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = new Locale("", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(11);
      Date date0 = fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("Zf$&>P)#'(@S9&=s", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "+1(");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("\ts]@0>4y&L", simpleTimeZone0, locale0);
      assertEquals("\ts]@0>4y&L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "V^FK+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D>UK-2Eks8sKqq K", simpleTimeZone0, locale0);
      assertEquals("D>UK-2Eks8sKqq K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1479, "");
      Locale locale0 = new Locale("", "ja");
      FastDateParser fastDateParser0 = new FastDateParser("=`3V3/k;Z", simpleTimeZone0, locale0);
      assertEquals("=`3V3/k;Z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("^k:2({_Q{KN^x:", simpleTimeZone0, locale0);
      assertEquals("^k:2({_Q{KN^x:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = new Locale("Au<wgwWLCAaSiz[", "");
      TimeZone timeZone0 = TimeZone.getTimeZone("Au<wgwWLCAaSiz[");
      FastDateParser fastDateParser0 = new FastDateParser("7` 3v9Nga[M3e)<C|B", timeZone0, locale0);
      assertEquals("7` 3v9Nga[M3e)<C|B", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = new Locale("Z6f", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("6_V>l-4h'%P/ERC", timeZone0, locale0);
      assertEquals("6_V>l-4h'%P/ERC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5", timeZone0, locale0);
      assertEquals("5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("43-ielxw?#e9.", simpleTimeZone0, locale0);
      assertEquals("43-ielxw?#e9.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = new Locale("Z6f", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("3E`eWk2Q_bd DS5;_6", timeZone0, locale0);
      assertEquals("3E`eWk2Q_bd DS5;_6", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("2", timeZone0, locale0);
      assertEquals("2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = new Locale("", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("0lQ", timeZone0, locale0);
      assertEquals("0lQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "z%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("<S#@@!z.cu+6J7_", simpleTimeZone0, locale0);
      assertEquals("<S#@@!z.cu+6J7_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("-:@/1/MjpT 0-NqO", timeZone0, locale0);
      assertEquals("-:@/1/MjpT 0-NqO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(",c!n", timeZone0, locale0);
      assertEquals(",c!n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";7Q", 0, 0, 0, 740, 561, 0, 0, 1240, 14);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(")KD1a#*)z", simpleTimeZone0, locale0);
      assertEquals(")KD1a#*)z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1731, "zE%<u0sSjkw`EzDt");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("h(m/`O(OMVF$baMvrX", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse(";7Q");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \";7Q\" does not match (\\p{IsNd}++)\\((\\p{IsNd}++)/`
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(" not in (", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(1);
      assertEquals(2001, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "V^FK+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("E'@4'Eb\"-UH:h97M", simpleTimeZone0, locale0);
      assertEquals("E'@4'Eb\"-UH:h97M", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("W@]gY6yk5", timeZone0, locale0);
      assertEquals("W@]gY6yk5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("~$qQ1a", timeZone0, locale0);
      assertEquals("~$qQ1a", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("a<~\"J>\";ZA~{F");
      FastDateParser fastDateParser0 = new FastDateParser("a<~\"J>\";ZA~{F", timeZone0, locale0);
      try { 
        fastDateParser0.parse("FastDateParser[a<~\"J>\";ZA~{F,ja_JP_JP_#u-ca-japanese,GMT]");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"FastDateParser[a<~\"J>\";ZA~{F,ja_JP_JP_#u-ca-japanese,GMT]\" does not match (\u5348\u524D|\u5348\u5F8C)<~\"
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "V^FK+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";wfrqTo<iB\"Hy[*", simpleTimeZone0, locale0);
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser1 = new FastDateParser(";wfrqTo<iB\"Hy[*", simpleTimeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = new Locale("Z6f", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("8cbq", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(36, "");
      FastDateParser fastDateParser1 = new FastDateParser("8cbq", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = new Locale("Z6f", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("{H_>E*(SuFP35*7h[?8", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("FastDateParser[{H_>E*(SuFP35*7h[?8,z6f_Z6F,GMT]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = new Locale("Au<wgwWLCAaSiz[", "");
      TimeZone timeZone0 = TimeZone.getTimeZone("Au<wgwWLCAaSiz[");
      FastDateParser fastDateParser0 = new FastDateParser("@", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals("yFZ^=jC$*`aZ_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = new Locale("Z6f", "Z6f");
      TimeZone timeZone0 = TimeZone.getTimeZone("Z6f");
      FastDateParser fastDateParser0 = new FastDateParser("{H_>E*(SuFP35*7h[?8", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1018), "Z6f");
      Locale locale0 = new Locale("9,d|");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zE%<u0sSjkw`EzDt", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1986), "zE%<u0sSjkw`EzDt");
      Locale locale0 = new Locale("");
      FastDateParser fastDateParser0 = new FastDateParser("9,d|", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "V^FK+");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(";wfrqTo<iB\"Hy[*", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject(";wfrqTo<iB\"Hy[*");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \";wfrqTo<iB\"Hy[*\" does not match ;(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";7Q", 0, 0, 0, 740, 561, 0, 0, 1240, 14);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(";7Q", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh_CN", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("a<~\"J>\";ZA~{F");
      FastDateParser fastDateParser0 = new FastDateParser("a<~\"J>\";ZA~{F", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("a<~\"J>\";ZA~{F", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Zf$&>P)#'(@S9&=s", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(22799);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("FastDateParser[Zf$&>P)#'(@S9&=s,it_IT,GMT]", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("Zf$&>P)#'(@S9&=s", timeZone0, locale0);
      fastDateParser0.toString();
      fastDateParser0.parse("JST");
      fastDateParser0.adjustYear(928);
      ParsePosition parsePosition0 = new ParsePosition(22799);
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";7Q", 0, 0, 0, 740, 561, 0, 0, 1240, 14);
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser(";7Q", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone("IET");
      FastDateParser fastDateParser0 = new FastDateParser("djf6", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("u5m&[~?", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = new Locale("Au<wgwWLCAaSiz[", "");
      TimeZone timeZone0 = TimeZone.getTimeZone("Au<wgwWLCAaSiz[");
      FastDateParser fastDateParser0 = new FastDateParser("yFZ^=jC$*`aZ_", timeZone0, locale0);
      assertEquals("yFZ^=jC$*`aZ_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, "D+|E+|F+|G+|H+|K|M+|S+|W+|Z+|a+|d+}h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K|M+|S+|W+|Z+|a+|d+}h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }
}
