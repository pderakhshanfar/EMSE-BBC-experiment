/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:17:33 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+dS+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|yy|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("GMTIET", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("5", timeZone0, locale0);
      fastDateParser0.parseObject("5", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "GMTSST");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("a@-b*;#e~J@|{?", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1446), "(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2457));
      assertEquals((-457), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(0, 0);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("`s'0q$;UQ+<mW,14L?", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("4nSL$y6dD-", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match 4
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.ITALY;
      ParsePosition parsePosition0 = new ParsePosition(2);
      FastDateParser fastDateParser0 = new FastDateParser("6", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      ParsePosition parsePosition0 = new ParsePosition(2);
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "(p{I&Nd}+{)");
      FastDateParser fastDateParser0 = new FastDateParser("(p{I&Nd}+{)", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = new Locale("(p{IsNd}++)", "(p{IsNd}++)", "(p{IsNd}++)");
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("Q]fIeG{K}^afc+PF", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zV2:]^v3Fkf<k", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("EAT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("2%qVZ.N:9s");
      Locale locale0 = new Locale("2%qVZ.N:9s", "2%qVZ.N:9s");
      FastDateParser fastDateParser0 = new FastDateParser("2%qVZ.N:9s", timeZone0, locale0);
      fastDateParser0.equals((Object) null);
      FastDateParser fastDateParser1 = new FastDateParser("zV2:s^v3Fkf<k", timeZone0, locale0);
      fastDateParser1.parse("SST");
      fastDateParser0.equals((Object) null);
      String string0 = fastDateParser1.getPattern();
      assertEquals("zV2:s^v3Fkf<k", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("zV2:s^v3Fkf<k", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTCTT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("m_W^'0,u9", timeZone0, locale0);
      assertEquals("m_W^'0,u9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "a@-b*;#e~J@|{?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("hS>U@M#c sQ^", simpleTimeZone0, locale0);
      assertEquals("hS>U@M#c sQ^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=mGspo", timeZone0, locale0);
      assertEquals("=mGspo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("<R3,~'li=", timeZone0, locale0);
      assertEquals("<R3,~'li=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("_h;Ad", timeZone0, locale0);
      assertEquals("_h;Ad", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":2!Cf#AIl8ou_", timeZone0, locale0);
      assertEquals(":2!Cf#AIl8ou_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("9ehH", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "a@-b*;#e~J@|{?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("w8?&1SJx=Ccypp'o>", simpleTimeZone0, locale0);
      assertEquals("w8?&1SJx=Ccypp'o>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("7sYChfXeR;1mNwyO", timeZone0, locale0);
      assertEquals("7sYChfXeR;1mNwyO", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("3@", timeZone0, locale0);
      assertEquals("3@", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("F-oD", simpleTimeZone0, locale0);
      assertEquals("F-oD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("hM,{D$U_HiW", timeZone0, locale0);
      assertEquals("hM,{D$U_HiW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("*_'?;,p<Ya", timeZone0, locale0);
      assertEquals("*_'?;,p<Ya", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser(")9R", timeZone0, locale0);
      assertEquals(")9R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(">Dee");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("d.HC>Ye,x9NQdZ( f", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(91);
      assertEquals(1991, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'G++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'G++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      fastDateParser0.adjustYear(11);
      String string0 = fastDateParser0.getPattern();
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^'G++(''[^']*+)*+'|[^'A-Za-z]++", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}2{3\"qVZ.Sms");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("}2{3\"qVZ.Sms", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("}2{3\"qVZ.Sms", parsePosition0);
      assertNull(object0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("/$32?", timeZone0, locale0);
      assertEquals("/$32?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("{7Fhub1y\"Q-v[^", timeZone0, locale0);
      try { 
        fastDateParser0.parse("{7Fhub1y\"Q-v[^");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"{7Fhub1y\"Q-v[^\" does not match \\{7(\\p{IsNd}{1}+)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      try { 
        fastDateParser0.parse("IST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"IST\" does not match \\(
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("}2{3\"qVZ.Sms");
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("@,J&S ", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("@,J&S ", timeZone0, locale0);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{I&Nd}+{)");
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "(p{I&Nd}+{)");
      FastDateParser fastDateParser0 = new FastDateParser("(p{I&Nd}+{)", simpleTimeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("(p{I&Nd}+{)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPRT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("m@gT jHjOb!*", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("AS", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("2{\"qVZ.S9s");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("h", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2{\"qVZ.S9s");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "(p{I&Nd}+{)");
      FastDateParser fastDateParser0 = new FastDateParser("(p{I&Nd}+{)", simpleTimeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\(", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H(|K+|M+|S+|W+|Z+3a+|d+|h+|k+|m||s+|w+|y+|z+s''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H(|K+|M+|S+|W+|Z+3a+|d+|h+|k+|m||s+|w+|y+|z+s''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zh", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("a0Qt]^F", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1650);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("a0Qt]^F", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(p{IsNd}++)");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("GMTJST", "2y YLq}f+a", "dVb!USrvq0");
      FastDateParser fastDateParser0 = new FastDateParser("dVb!USrvq0", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2y YLq}f+a");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("ML#[,>Obyl- L$", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("5q");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      FastDateParser fastDateParser0 = new FastDateParser("1yy 4FH?Ni'", timeZone0, locale0);
      assertEquals("1yy 4FH?Ni'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(42, "a@-b*;#e~J@|{?");
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("2Hzj(j", simpleTimeZone0, locale0);
      assertEquals("2Hzj(j", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H(|K+|M+|S+|W+|Z+3a+|d+|h+|k+|m||s+|w+|y+|z+s''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H(|K+|M+|S+|W+|Z+3a+|d+|h+|k+|m||s+|w+|y+|z+s''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[D+|E+|F+|G+|H(|K+|M+|S+|W+|Z+3a+|d+|h+|k+|m||s+|w+|y+|z+s''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++,zh_TW,GMT]", string0);
  }
}
