/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:04:46 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1762), ".1jUdnBV'|bt#");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("afpi|OMI|h})&-1'u", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(3418);
      assertEquals(5318, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-649), "GMTVST");
      FastDateParser fastDateParser0 = new FastDateParser("GMTVST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals((-649), timeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "yUx3%nx+;!/", 1, 1, 3, 1, 3, 3, 3, 1, 3);
      FastDateParser fastDateParser0 = new FastDateParser("yUx3%nx+;!/", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1762), "");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("afpi|OMI|h})&-1'u", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4218));
      assertEquals((-2218), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTEAT");
      FastDateParser fastDateParser0 = new FastDateParser("KX^%7cx", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(89);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("KX^%7cx", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "GMTEAT");
      FastDateParser fastDateParser0 = new FastDateParser("Fd~^Jo_VxG\"g>G", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject(",G:=x`b-]|1DKjQH", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(X_t,AoJm<%T");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("(X_t,AoJm<%T", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1762), "");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("afpi|OMI|h})&-1'u", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1923));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("FastDateParser[afpi|OMI|h})&-1'u,en_GB,]", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("z9cZs0)3g7MHIT8", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("w(jL", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("z9cZs0)3g7MHIT8", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(",M4E0B+&3", timeZone0, locale0);
      try { 
        fastDateParser0.parse("z9cZs0)3g7MHIT8");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"z9cZs0)3g7MHIT8\" does not match ,(\\p{IsNd}{1}+)4(\u571F|\u571F\u66DC\u65E5|\u65E5|\u65E5\u66DC\u65E5|\u6708|\u6708\u66DC\u65E5|\u6728|\u6728\u66DC\u65E5|\u6C34|\u6C34\u66DC\u65E5|\u706B|\u706B\u66DC\u65E5|\u91D1|\u91D1\u66DC\u65E5)0
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zoF\"[2d$|,j", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPRT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("zoF\"[2d$|,j", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("ACT", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      ParsePosition parsePosition0 = new ParsePosition(3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "yUx3^%n?x+;!/", 1, 1, 3, 3, 1, 3, 3, 3, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("yUx3^%n?x+;!/", simpleTimeZone0, locale0);
      fastDateParser0.parse("yUx3^%n?x+;!/", parsePosition0);
      fastDateParser0.parseObject("VK$|8PUJT]~ sHT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=5,errorIndex=-1]", parsePosition0.toString());
      assertEquals(5, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("_&R=T9^ou5", timeZone0, locale0);
      assertEquals("_&R=T9^ou5", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(">8Q=$tAqU A9k/o:", timeZone0, locale0);
      assertEquals(">8Q=$tAqU A9k/o:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("=J=(WT%:rY?>TY5n%x", timeZone0, locale0);
      assertEquals("=J=(WT%:rY?>TY5n%x", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(";e0P]\"x,T`@{-", timeZone0, locale0);
      assertEquals(";e0P]\"x,T`@{-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, "2(nH/g)^0Yt7LHe");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("6QWtx", simpleTimeZone0, locale0);
      assertEquals("6QWtx", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(730, "2(nH/g)^0Yt7LHe");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("5|:B'rs6A?6qx6c", simpleTimeZone0, locale0);
      assertEquals("5|:B'rs6A?6qx6c", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("m14P9^kk", timeZone0, locale0);
      assertEquals("m14P9^kk", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(",M4E0B+&3", timeZone0, locale0);
      assertEquals(",M4E0B+&3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("2S/.5#oiDBP-&$", timeZone0, locale0);
      assertEquals("2S/.5#oiDBP-&$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "[`+M*CBU");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("a. E\"I*\"k", simpleTimeZone0, locale0);
      assertEquals("a. E\"I*\"k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(",G:=x`b-]|1DKjQH", timeZone0, locale0);
      assertEquals(",G:=x`b-]|1DKjQH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(")X|r{3=QEmH", timeZone0, locale0);
      assertEquals(")X|r{3=QEmH", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(719, "2(nH/g)^0Yt7LHe");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("D8M]", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(33);
      assertEquals(2033, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("S(AvL", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+Es+|w+|y+|z+|v'|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+Es+|w+|y+|z+|v'|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = new Locale("U;{qqqxKa7 M");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"?}Z7iCi", timeZone0, locale0);
      assertEquals("\"?}Z7iCi", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("`{WL", timeZone0, locale0);
      assertEquals("`{WL", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "[`+M*CBU");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("[`+M*CBU", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = fastDateParser0.parse("[`+M*CBU", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-10), "$");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("$", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("|]SQ>Jf zwd:5r(~{", timeZone0, locale0);
      try { 
        fastDateParser0.parse("U;{qqqxKa7 M");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"U;{qqqxKa7 M\" does not match \\|\\](\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("39", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("wxBNyS3v\"h");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"wxBNyS3v\"h\" does not match 39
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      Locale locale1 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("@jYPQ.=C", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("@jYPQ.=C", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("zmz9cZs0)3giMHIT8", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTCST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("U;{qqqxKa7 M");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("z9cZs0)3g7MHIT8", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(";[M)A8up^#c");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = new Locale("U;{qqqxKa7 M");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("UY=N>c(XmF[FW", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("72@tBvQ]N6JKg*T8[");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("H", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9:RSOP");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("hp(}K%", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("9:RSOP");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("<m", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("<(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D%#(GV@32\"F^", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("fr", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(719, "");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Ffm", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("Ffm", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      ParsePosition parsePosition0 = new ParsePosition(3);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "yUx3^%n?x+;!/", 1, 1, 3, 3, 1, 3, 3, 3, 1, 1, 1);
      FastDateParser fastDateParser0 = new FastDateParser("yUx3^%n?x+;!/", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("VK$|8PUJT]~ sHT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("-GMTNE", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[-GMTNE,zh_CN,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("z9cZs0)3g7MHIT8");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("#hZPdlW(>@JE`vg*y", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(719, "2(nH/g)^0Yt7LHe");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("w(jL", simpleTimeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2(nH/g)^0Yt7LHe");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yyF^8)7StU3`Ys?", timeZone0, locale0);
      assertEquals("yyF^8)7StU3`Ys?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(719, "2(nH/g)^0Yt7LHe");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[2(nH/g)^0Yt7LHe,en_CA,2(nH/g)^0Yt7LHe]", simpleTimeZone0, locale0);
      assertEquals("FastDateParser[2(nH/g)^0Yt7LHe,en_CA,2(nH/g)^0Yt7LHe]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("zmz9cZs0)3giMHIT8", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "JP");
      FastDateParser fastDateParser0 = new FastDateParser("W(Z?L", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }
}
