/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 10:11:20 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("k4J", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(94);
      assertEquals(1994, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("MN5Z`nd^Qb/GD", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      fastDateParser0.parse("MN5Z`nd^Qb/GD", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("{", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":,0gTeohU[(;K8");
      Locale locale0 = new Locale(":,0gTeohU[(;K8", "", "Hv$=`d;C19n@");
      FastDateParser fastDateParser0 = new FastDateParser(":,0gTeohU[(;K8", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":,0gTeohU[(;K8");
      Locale locale0 = new Locale(":,0gTeohU[(;K8", "", "Hv$=`d;C19n@");
      FastDateParser fastDateParser0 = new FastDateParser(":,0gTeohU[(;K8", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1043), ".UfJ/FRN}vc6AW");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAET", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "EWwEV;", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("2i$I?7JW7vai", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-4053));
      assertEquals((-2053), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "EWEV;");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("EWEV;", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1927);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("8Iv3[/6i/", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "FastDateParser[");
      Locale locale0 = new Locale("FastDateParser[");
      FastDateParser fastDateParser0 = new FastDateParser("*b#~eN7qdTL$ig+4P", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMT", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "*b#~eN7qdTL$ig+4P");
      Locale locale0 = new Locale("FastDateParser[");
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("]L7Pb4q@\"", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(100);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("]L7Pb4q@\"", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale1 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      locale0.getUnicodeLocaleAttributes();
      FastDateParser fastDateParser1 = new FastDateParser("D+|+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      fastDateParser1.toString();
      fastDateParser1.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = new Locale("K", "K");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("K", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      assertEquals("(p{IsNd}{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "`6QMr.W");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("`6QMr.W", simpleTimeZone0, locale0);
      assertEquals("`6QMr.W", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(89, "*%");
      FastDateParser fastDateParser0 = new FastDateParser("^wVKR#i]e>zI", simpleTimeZone0, locale0);
      assertEquals("^wVKR#i]e>zI", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Zk7q5,)=/hQ`g4Q_", timeZone0, locale0);
      assertEquals("Zk7q5,)=/hQ`g4Q_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(">o", timeZone0, locale0);
      assertEquals(">o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "*b#~eN7qdTL$ig+4P");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("<6td&", simpleTimeZone0, locale0);
      assertEquals("<6td&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3), "*b#~eN7qdTL$ig+4P");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("m_HZ;?^i9xe", simpleTimeZone0, locale0);
      assertEquals("m_HZ;?^i9xe", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4746, ".UfJ/FRN}vc6AW");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("9yoKsJ= ", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = fastDateParser0.parse("n<y", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("8y*IJ{5L0_^&*pJ", timeZone0, locale0);
      assertEquals("8y*IJ{5L0_^&*pJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "^!6");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("yz6)EbM@rvm", simpleTimeZone0, locale0);
      assertEquals("yz6)EbM@rvm", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("5c2`m]#n");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("5c2`m]#n", timeZone0, locale0);
      assertEquals("5c2`m]#n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "^!6");
      Locale locale0 = new Locale("*b#~eN7qdTL$ig+4P");
      FastDateParser fastDateParser0 = new FastDateParser("HwW7Z3 xg1_wf8", simpleTimeZone0, locale0);
      assertEquals("HwW7Z3 xg1_wf8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "EWwEV;", 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("2i$I?7JW7vai", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4746, ".UfJ/FRN}vc6AW");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("1>i", simpleTimeZone0, locale0);
      assertEquals("1>i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("GMTNST", " D0_Y_^w3cp},'8", "GMTNST");
      FastDateParser fastDateParser0 = new FastDateParser(" D0_Y_^w3cp},'8", timeZone0, locale0);
      assertEquals(" D0_Y_^w3cp},'8", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("{[/D/ijGED11", simpleTimeZone0, locale0);
      assertEquals("{[/D/ijGED11", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(".p[LJs3rB@YnU;", simpleTimeZone0, locale0);
      assertEquals(".p[LJs3rB@YnU;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("G_=d()FEyyFH-l7X", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTART");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTART\" does not match (ap\\. J\\.-C\\.|ap\\. J\\.-C\\.|BC|BC)_=(\\p{IsNd}++)\\(\\)(\\p{IsNd}++)(dim\\.|dimanche|jeu\\.|jeudi|lun\\.|lundi|mar\\.|mardi|mer\\.|mercredi|sam\\.|samedi|ven\\.|vendredi)(\\p{IsNd}{2}+)(\\p{IsNd}{1}+)(\\p{IsNd}++)-
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(",O>luSLbi=~d", timeZone0, locale0);
      assertEquals(",O>luSLbi=~d", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4746, ".UfJ/FRN}vc6AW");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser(")mB@Y))MCv^rjDO+z", simpleTimeZone0, locale0);
      assertEquals(")mB@Y))MCv^rjDO+z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("MN5Z`nd^Qb/D", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4746, ".UfJ/FRN}vc6AW");
      Locale locale0 = new Locale(".UfJ/FRN}vc6AW");
      FastDateParser fastDateParser0 = new FastDateParser("=Z4}i", simpleTimeZone0, locale0);
      assertEquals("=Z4}i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("?", timeZone0, locale0);
      assertEquals("?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("$rx2", timeZone0, locale0);
      assertEquals("$rx2", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hLB_D&,_<JIkU");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hLB_D&,_<JIkU", timeZone0, locale0);
      try { 
        fastDateParser0.parse("GMTPST");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTPST\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("]L7Pb4q@\"", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse(":hd:");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \":hd:\" does not match \\]
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser1 = new FastDateParser("{", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}{", timeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser1 = new FastDateParser("(p{IsNd}{", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("MN5Z`nd^Qb/GD", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("MN5Z`nd^Qb/G7", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("@)xd2W", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "EWwEV;");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("ACT", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hLB_D&,_<JIkU");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("hLB_D&,_<JIkU", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4dK4Y*J");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\{", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("]L7Pb4q@\"", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getVariant());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "]L7Pb4q@\"");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("]L7Pb4q@\"", simpleTimeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("]L7Pb4q@\"", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("{");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("{", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("@K=*|lBF=|n7]a", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[7,en_CA,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ":,0gTeohU[(;K8");
      Locale locale0 = new Locale(":,0gTeohU[(;K8", "", "Hv$=`d;C19n@");
      FastDateParser fastDateParser0 = new FastDateParser(":,0gTeohU[(;K8", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("w#q8c&X%[4S", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("4#v3?s:\"]S9S:W+a", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("s''hG!wz=", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }
}
