/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:52:19 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      System.setCurrentTimeMillis(0L);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".GTC f(LA", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(90);
      assertEquals(1890, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("WU|V,Q{.3VRCI)2{d", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("2*XLV?", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZYY{gBAO0IL1m");
      FastDateParser fastDateParser0 = new FastDateParser("ZYY{gBAO0IL1m", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-99), "|TvB,Qy[z1OO");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("|TvB,Qy[z1OO", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("G\"/4mr+}/f~cz2W0&M", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3869));
      assertEquals((-1869), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser0 = new FastDateParser("K <dV:k_KlLM27rt={", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("],fyg-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(94);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("],fyg-", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("]fyg-", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMTVST", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("WU|V,Q{.3VRCI)2{d", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser((String) null, timeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("z(tz~", timeZone0, locale0);
      Locale locale1 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser1 = new FastDateParser("z(tz~", timeZone0, locale1);
      fastDateParser0.equals(locale0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\"IfCi`(]P76]jbW");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("\"IfCi`(]P76]jbW", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse(" DhtH0`pXu0=M!j1!p=", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("yNySjAA)|ay", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      fastDateParser0.parse("79F[i}", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getTimeZone("CST");
      FastDateParser fastDateParser0 = new FastDateParser("yy", timeZone0, locale0);
      try { 
        fastDateParser0.parse("JDq),FS!");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"JDq),FS!\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZYY{gBAO0IL1m");
      FastDateParser fastDateParser0 = new FastDateParser("ZYY{gBAO0IL1m", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZYY{gBAO0IL1m");
      FastDateParser fastDateParser0 = new FastDateParser("ZYY{gBAO0IL1m", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTPNT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("_Sd,4Ws''kY`b~}", timeZone0, locale0);
      assertEquals("_Sd,4Ws''kY`b~}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("3yyy", timeZone0, locale0);
      assertEquals("3yyy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(107, "Wx9");
      FastDateParser fastDateParser0 = new FastDateParser("_Z~{3wq8?,", simpleTimeZone0, locale0);
      assertEquals("_Z~{3wq8?,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|Yq");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("^B2S_OQQ", timeZone0, locale0);
      assertEquals("^B2S_OQQ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("S?t[Ib52CwY?nYX", timeZone0, locale0);
      assertEquals("S?t[Ib52CwY?nYX", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("=\"|gs*DS?\"V'", timeZone0, locale0);
      assertEquals("=\"|gs*DS?\"V'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "lj8T:@'A*z6q0_");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("<WFbCN0+?", simpleTimeZone0, locale0);
      assertEquals("<WFbCN0+?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(":,", timeZone0, locale0);
      assertEquals(":,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("G>d9.adR*r`hxd", timeZone0, locale0);
      assertEquals("G>d9.adR*r`hxd", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser(",z8uRH?]T~:lBMP", timeZone0, locale0);
      assertEquals(",z8uRH?]T~:lBMP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7N4F_k6={1Aam_k");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("7N4F_k6={1Aam_k", timeZone0, locale0);
      assertEquals("7N4F_k6={1Aam_k", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("6Tj^h.o-JS,L", timeZone0, locale0);
      assertEquals("6Tj^h.o-JS,L", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("5#{[Uh^Un,FRIl*W`C", timeZone0, locale0);
      assertEquals("5#{[Uh^Un,FRIl*W`C", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-562), "GMT");
      FastDateParser fastDateParser0 = new FastDateParser("4yC&vvW", simpleTimeZone0, locale0);
      assertEquals("4yC&vvW", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("2#k`)", timeZone0, locale0);
      assertEquals("2#k`)", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("0id.Q-90", timeZone0, locale0);
      assertEquals("0id.Q-90", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("/O", timeZone0, locale0);
      assertEquals("/O", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("");
      FastDateParser fastDateParser0 = new FastDateParser("-ilA;", timeZone0, locale0);
      assertEquals("-ilA;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("*", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("):U3f,7+Mg\tw}", timeZone0, locale0);
      assertEquals("):U3f,7+Mg\tw}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".GTC f(LA", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(90);
      assertEquals(1990, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7N4F_k6={1Aam_k");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("GdG`*KyY_>i}%", timeZone0, locale0);
      assertEquals("GdG`*KyY_>i}%", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-99), "|TvB,Qy[z1OO");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("}xlt$Usx$/", simpleTimeZone0, locale0);
      assertEquals("}xlt$Usx$/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("K;)_4SoVS3", timeZone0, locale0);
      assertEquals("K;)_4SoVS3", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("H]?;^W", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|Yq");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("$`|`=,.b/'", timeZone0, locale0);
      assertEquals("$`|`=,.b/'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTMIT", timeZone0, locale0);
      try { 
        fastDateParser0.parse("Di?*D");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"Di?*D\" does not match (\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("Wz36#", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Wz36#", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("3Kyy", timeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      FastDateParser fastDateParser1 = new FastDateParser("3Kyy", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("],fyg-", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("Wz36#", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("I1<", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("Hlq&", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("7pWKBLu");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals(0, pattern0.flags());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "]{G@y");
      FastDateParser fastDateParser0 = new FastDateParser("]{G@y", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=]{G@y,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("S?t[Ib52CwY?nYX");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"S?t[Ib52CwY?nYX\" does not match (\\p{IsNd}++)\\+\\|(dim\\.|dimanche|jeu\\.|jeudi|lun\\.|lundi|mar\\.|mardi|mer\\.|mercredi|sam\\.|samedi|ven\\.|vendredi)\\+\\|(\\p{IsNd}++)\\+\\|(ap\\. J\\.-C\\.|ap\\. J\\.-C\\.|BC|BC)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Ile Macquarie|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 de Norfolk|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Ile Macquarie|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 de Norfolk|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "]{G@y");
      FastDateParser fastDateParser0 = new FastDateParser("]{G@y", simpleTimeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CA", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("],fyg-", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("],fyg-", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("h1", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(489);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTEAT", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("],fyg-", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[],fyg-,fr_FR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("MTVST", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("3Ap024`$[X/F~V*");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("3Kyy", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }
}
