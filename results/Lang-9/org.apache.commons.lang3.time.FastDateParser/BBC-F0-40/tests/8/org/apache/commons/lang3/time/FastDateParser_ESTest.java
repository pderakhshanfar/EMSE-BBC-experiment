/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:53:33 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[7,zh,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = new Locale("#&fX^");
      FastDateParser fastDateParser0 = new FastDateParser("#&fX^", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Object object0 = fastDateParser0.parseObject("GMTIST", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "O$MD", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("2&qO", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(2, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("&F?bU-MJI#Dzc^ z", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3613));
      assertEquals((-1613), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("8XeUVd$rT52^pQ", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2001);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("8XeUVd$rT52^pQ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("\" does not match ");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("GMT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2472);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("wZp", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1686, "7&nt");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("}z%,-)9:Xn", simpleTimeZone0, locale0);
      assertEquals("}z%,-)9:Xn", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7&nt");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("^3l1O*TZqMfr2eFL8I", timeZone0, locale0);
      assertEquals("^3l1O*TZqMfr2eFL8I", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yyi2dn", timeZone0, locale0);
      try { 
        fastDateParser0.parse("#S1s7b>Sj +H_");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"#S1s7b>Sj +H_\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(101, "8XeUVd$rT52^pQ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("kkk!bdD{0yP7F>a6u@", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match (\\p{IsNd}++)!
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("ZxVI:q%!s,{BV@", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("JST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("ZxVI:q%!s,{BV@", timeZone0, locale0);
      fastDateParser0.parse("GMTPNT", parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals(3, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("`ai&", timeZone0, locale0);
      assertEquals("`ai&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1204), "E");
      FastDateParser fastDateParser0 = new FastDateParser("_sV^W'xmaO>]du!", simpleTimeZone0, locale0);
      assertEquals("_sV^W'xmaO>]du!", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7&nt");
      Locale locale0 = new Locale("/DxZ*Pl@&m& #", "(p{IsNd}++)", "");
      FastDateParser fastDateParser0 = new FastDateParser("=", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("&Na7wh'*YP", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("<el#BYF#", timeZone0, locale0);
      assertEquals("<el#BYF#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".L6SD25V<!M}y[rkV ");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(":5p{E5U[", timeZone0, locale0);
      assertEquals(":5p{E5U[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".L6SD25V<!M}y[rkV ");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("!K6f", timeZone0, locale0);
      assertEquals("!K6f", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1686, "7&nt");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("5xan}A", simpleTimeZone0, locale0);
      assertEquals("5xan}A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("z>*D4UuGG!O:/", timeZone0, locale0);
      assertEquals("z>*D4UuGG!O:/", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(13, "3");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("3", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("#S1s7b>Sj +H_", timeZone0, locale0);
      assertEquals("#S1s7b>Sj +H_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-515), "/yp5s*\nap!G6yUn");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("/yp5s*\nap!G6yUn", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".L6SD25V<!M}y[rkV ");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(".L6SD25V<!M}y[rkV ", timeZone0, locale0);
      assertEquals(".L6SD25V<!M}y[rkV ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "\"Erlnq#`", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser(",q2&qO", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(93);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("N", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("']aR");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("*~D-+", timeZone0, locale0);
      assertEquals("*~D-+", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".L6SD25V<!M}y[rkV ");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser(")+am)-U3:t|r^O_", timeZone0, locale0);
      assertEquals(")+am)-U3:t|r^O_", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1686, "");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("(GMT[+-]d{0,1}d{2}|[+-]d{2}:?d{2}|", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("G0Gj", timeZone0, locale0);
      assertEquals("G0Gj", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("^.+{_t?C12mY/]", timeZone0, locale0);
      assertEquals("^.+{_t?C12mY/]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("9ss", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(5469);
      assertEquals(7369, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("??,`la", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("$z%,-)9:Xn", timeZone0, locale0);
      assertEquals("$z%,-)9:Xn", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("HHO620TITi,", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("ACT");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"ACT\" does not match (\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      Locale locale1 = Locale.FRANCE;
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(46, "SCT");
      FastDateParser fastDateParser1 = new FastDateParser("MIT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("@}", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("[2<,qUrZ3R[$5", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      Integer integer0 = new Integer(0);
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("IET", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("HHO620TITi,", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("14`<0'h`yq m)d(tG<X");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("8XeUVd$rT52^pQ", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("8", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "WVut|:?o_7o");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("WVut|:?o_7o", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("zho", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("a'L_yLqY/e.", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yyi2dn", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parseObject("yyi2dn", parsePosition0);
      assertEquals("java.text.ParsePosition[index=4,errorIndex=-1]", parsePosition0.toString());
      assertEquals(4, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ja");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("a'L_yLqY/e.", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("2&qO");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("Mr[6Q_0^]", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("4 YXfu8[$");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("admYBWpjqxZ", timeZone0, locale0);
      assertEquals("admYBWpjqxZ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("]", "myx8V;y'[`CC7E5,%e", "(p{IsNd}++)");
      FastDateParser fastDateParser0 = new FastDateParser("ME;@P", timeZone0, locale0);
      assertEquals("ME;@P", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(".L6SD25V<!M}y[rkV ");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("2WZAHg=Oa'%-.n;;DT", timeZone0, locale0);
      assertEquals("2WZAHg=Oa'%-.n;;DT", fastDateParser0.getPattern());
  }
}
