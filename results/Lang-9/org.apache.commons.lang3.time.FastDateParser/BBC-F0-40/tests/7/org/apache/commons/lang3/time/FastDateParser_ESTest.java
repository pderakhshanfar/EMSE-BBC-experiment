/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 09:52:43 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("hvH:d$%H*VtzHhkG", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5,L");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "!'[X", 0, 0, 0, 0, 45, 0, 0, (-1741), 2378);
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("!'[X", simpleTimeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2378);
      assertEquals(4278, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("ZL8QefHh", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(3);
      fastDateParser0.parse("GMTBST", parsePosition0);
      assertEquals("java.text.ParsePosition[index=6,errorIndex=-1]", parsePosition0.toString());
      assertEquals(6, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(641, "y5J0T");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("y5J0T", simpleTimeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDateParser$1");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(";!Itbb", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(21);
      Object object0 = fastDateParser0.parseObject("org.apache.commons.lang3.time.FastDateParser$1", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(",!jn5HVOqN,k`CX<6Z", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "!'[X", 0, 0, 0, 0, 45, 0, 0, (-1741), 2378);
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("!'[X", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(641, "y5J0T");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("y5J0T", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("14%bN9=<n*V`*r:c", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2059));
      assertEquals((-59), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-426), "0-I(");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("0-I(", simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-426));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("0-I(", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("Gtbz:7IHS", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("$0?->(kD^!", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2yUklk)2->:`1", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("%N( &");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"%N( &\" does not match 2(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("QDS`mv");
      Locale locale0 = Locale.KOREA;
      ParsePosition parsePosition0 = new ParsePosition(24);
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("GMT", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("DS`mv");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("DS`mv", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "!'[X", 0, 0, 0, 0, 45, 0, 0, (-1741), 2378);
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("!'[X", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0@Of0O6Ac;/=caS!");
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("0@Of0O6Ac;/=caS!", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("QDS`mv");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("{:Zij+QV;/?", timeZone0, locale0);
      assertEquals("{:Zij+QV;/?", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("<Rl'", timeZone0, locale0);
      assertEquals("<Rl'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MZ[dD(M[BO9!", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("84%w;|2]", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTST");
      FastDateParser fastDateParser0 = new FastDateParser("ZL8Qe7fHUh", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("ART");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTST");
      FastDateParser fastDateParser0 = new FastDateParser("ZL8Qe7fHUh", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("GMTST", parsePosition0);
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "\"4VcUlP8");
      FastDateParser fastDateParser0 = new FastDateParser("^tUhiJ6)f#N)ioo", simpleTimeZone0, locale0);
      assertEquals("^tUhiJ6)f#N)ioo", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("?y' []AS_$JnP", timeZone0, locale0);
      assertEquals("?y' []AS_$JnP", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("QDS`mv");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(">\":uC_|h,e#I|.", timeZone0, locale0);
      assertEquals(">\":uC_|h,e#I|.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("<}Rl'", timeZone0, locale0);
      assertEquals("<}Rl'", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("84%w;|2]", timeZone0, locale0);
      assertEquals("84%w;|2]", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(":cv3>n.", timeZone0, locale0);
      assertEquals(":cv3>n.", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("9Vm`DHYV]v#4", timeZone0, locale0);
      assertEquals("9Vm`DHYV]v#4", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCTT");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("7];.HyUDZ6,", timeZone0, locale0);
      assertEquals("7];.HyUDZ6,", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("6KVqU@o#?OFi|;", timeZone0, locale0);
      assertEquals("6KVqU@o#?OFi|;", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("47c/Gr_{", timeZone0, locale0);
      assertEquals("47c/Gr_{", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("3%['Kql_sL./S7V9", timeZone0, locale0);
      assertEquals("3%['Kql_sL./S7V9", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(575, "0-I(");
      FastDateParser fastDateParser0 = new FastDateParser("@s2]qi?PrKVn1T[m'K(", simpleTimeZone0, locale0);
      assertEquals("@s2]qi?PrKVn1T[m'K(", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("GMTCTT");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("14%bN9=<n*V`*r:c", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("0-I(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("/[w5:&K1miR", timeZone0, locale0);
      assertEquals("/[w5:&K1miR", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("QDS`mv");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser(".O9A2-HIzpSx~pDS\"", timeZone0, locale0);
      assertEquals(".O9A2-HIzpSx~pDS\"", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("-3=WN>JIT=N|S0=7q", timeZone0, locale0);
      assertEquals("-3=WN>JIT=N|S0=7q", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("*'z8A", timeZone0, locale0);
      assertEquals("*'z8A", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("yxZ8", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("8:W&?.oED^iq0#.oD}^+");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("F", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(34);
      assertEquals(1934, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("5?$;A.(lOx;;s&:/f >", timeZone0, locale0);
      assertEquals("5?$;A.(lOx;;s&:/f >", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("`9]Yz$yA", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"\" does not match `9\\]
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("QDS`mv");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("sW)47", timeZone0, locale0);
      try { 
        fastDateParser0.parse("");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"\" does not match (\\p{IsNd}{1}+)(\\p{IsNd}++)\\)47
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZL8Qe7fHUh");
      Locale locale1 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("ZL8Qe7fHUh", timeZone0, locale1);
      FastDateParser fastDateParser1 = new FastDateParser("ZL8Qe7fHUh", timeZone0, locale0);
      fastDateParser0.equals(fastDateParser1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("#CT", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2107, "AST");
      FastDateParser fastDateParser1 = new FastDateParser("#CT", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTCNT", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser(",!jn5HVOqN,k`CX<6Z", timeZone0, locale0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("BST");
      boolean boolean0 = fastDateParser0.equals(locale_LanguageRange0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("ZL8Qe7fHUh");
      FastDateParser fastDateParser0 = new FastDateParser("GMTVST", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("QDS`mv", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("5~]+Jvqq");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("HL$izVX)n!*D2B!C9fF", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("84%w;|2]");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("#CT", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("#", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "E9");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAST", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertFalse(timeZone0.useDaylightTime());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("aD#", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("`9]Yz$yA", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("`9]Yz$yA", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("=:", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("=:", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("hvH:d$%H*VtzHhkG", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[hvH:d$%H*VtzHhkG,en_US,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("diF4-A9v3`3%.", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("84%w;|2]");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MIT");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("Wyy%g", timeZone0, locale0);
      assertEquals("Wyy%g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("wGHZ_kGOPh%`>lIS", timeZone0, locale0);
      assertEquals("wGHZ_kGOPh%`>lIS", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("MMMz\"}E", timeZone0, locale0);
      assertEquals("MMMz\"}E", fastDateParser0.getPattern());
  }
}
