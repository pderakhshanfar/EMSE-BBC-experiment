/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 11:46:20 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/k.|mpRm n`}|", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[/k.|mpRm n`}|,zh_TW,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<q8ayjF7+`g9Ic");
      Locale locale0 = Locale.KOREAN;
      ParsePosition parsePosition0 = new ParsePosition(5);
      FastDateParser fastDateParser0 = new FastDateParser("9K+:#SOo", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("GMTCTT", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(0);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("`>", timeZone0, locale0);
      fastDateParser0.parseObject("`>", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("wv_j3x`J{RrYAFHdm", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("1HtW`qn3Tpx{4`yx");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("aUoj`BOwv^|&~OqjU");
      FastDateParser fastDateParser0 = new FastDateParser("aUoj`BOwv^|&~OqjU", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(575, "SK3g*_Qz;X");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("SK3g*_Qz;X", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(".=os.x@HHR", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("H(5WV", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<q8ayjF7+`g9Ic");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("<q8ayjF7+`g9Ic", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3739));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("<q8ayjF7+`g9Ic", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("9+:#StOo", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "<q8ayjF7+`g9Ic", 0, 0, 0, 170, 0, 0, 0, 170, 3060, 0, 124);
      Locale locale0 = Locale.forLanguageTag("<q8ayjF7+`g9Ic");
      FastDateParser fastDateParser0 = new FastDateParser("<q8ayjF7+`g9Ic", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("GMTART", timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(575, "SK3g*_Qz;X");
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("z*H3x|pBgiYW)k0T", simpleTimeZone0, locale0);
      assertEquals("z*H3x|pBgiYW)k0T", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<q8ayjF7+`g9Ic");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("}oL>8mEq/,Q}", timeZone0, locale0);
      assertEquals("}oL>8mEq/,Q}", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("wv_j3x`J{RrYAFHdm", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(39);
      Date date0 = fastDateParser0.parse("org.apache.commons>lang3.time.FastDateParser$4", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition(1);
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("MIT", timeZone0, locale0);
      fastDateParser0.parse("L7H+m_mP^*K' [", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("%Kd&wb\"y%ofa2Qt_O", timeZone0, locale0);
      try { 
        fastDateParser0.parse("%Kd&wb\"y%ofa2Qt_O");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"%Kd&wb\"y%ofa2Qt_O\" does not match %(\\p{IsNd}{1}+)(\\p{IsNd}++)&(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zi$`PMH", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("GMTPST");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zi$`PMH", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("CAT");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("^.r5+2^Bk*B]N", timeZone0, locale0);
      assertEquals("^.r5+2^Bk*B]N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(">ep0i", timeZone0, locale0);
      assertEquals(">ep0i", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "BST");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("E<=EV", simpleTimeZone0, locale0);
      assertEquals("E<=EV", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser(";.w=ka&", timeZone0, locale0);
      assertEquals(";.w=ka&", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("_8,y*!2M::*(IBD", timeZone0, locale0);
      assertEquals("_8,y*!2M::*(IBD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("7Iu", timeZone0, locale0);
      assertEquals("7Iu", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("5xyO4Mh!@O=");
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("5xyO4Mh!@O=", timeZone0, locale0);
      assertEquals("5xyO4Mh!@O=", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("01|2cgeNvs(mq[W;0vG");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("01|2cgeNvs(mq[W;0vG", timeZone0, locale0);
      assertEquals("01|2cgeNvs(mq[W;0vG", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("-ZT0Xo[Y-3:bKrHt^K", timeZone0, locale0);
      assertEquals("-ZT0Xo[Y-3:bKrHt^K", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("H(KWS,;,V", timeZone0, locale0);
      assertEquals("H(KWS,;,V", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("`z)<O,0^ItWM/}7K2n", timeZone0, locale0);
      assertEquals("`z)<O,0^ItWM/}7K2n", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("wv_j3x`z{xrYIFHdm", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-2606));
      assertEquals((-606), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("9K+:#SOo", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(450);
      assertEquals(2350, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("?~a.aMc_WC;UZY<-D", timeZone0, locale0);
      assertEquals("?~a.aMc_WC;UZY<-D", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("*:z}|GIY?Tz[@q-", timeZone0, locale0);
      assertEquals("*:z}|GIY?Tz[@q-", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("{D@D", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("{D@D", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("$`w`", timeZone0, locale0);
      assertEquals("$`w`", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("zi$`PMH", timeZone0, locale0);
      try { 
        fastDateParser0.parse("zi$`PMH");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"zi$`PMH\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Ile Macquarie|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 de Norfolk|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale1 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("GMTMIT", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("GMTMIT", timeZone0, locale1);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("6", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1762, "FastDateParser[");
      FastDateParser fastDateParser1 = new FastDateParser("6", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("wv_Um`z{xrYIFHdm", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("1HtW`qn3Tpx{4`yx", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("pl:ep#aZsN6@A", "D+|E+|F+G+|H+|K+|9+|+ZW+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'W']++(''[^>*+)*+'|[^'Aa-z]++", "pl:ep#aZsN6@A");
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+G+|H+|K+|9+|+ZW+|Z+|a+|d|h+|k+|m+|s+|w+|y+|z+|''|'W']++(''[^>*+)*+'|[^'Aa-z]++", timeZone0, locale0);
      Integer integer0 = new Integer(12);
      boolean boolean0 = fastDateParser0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("wv_Um`z{xrYIFHdm", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("1HTW`qn3px{4`\"yx", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("18v");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("GMTPLT", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("(\u7D00\u5143\u524D|\u7D00\u5143\u524D|\u897F\u66A6|\u897F\u66A6)(\\p{IsNd}++)", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3601), "org.apache.commons.lang3.time.FastDateParser$NumberStrategy");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("W4jj.I@", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(0, timeZone0.getDSTSavings());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("2.?yyO4M9!@O=", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("2.?yyO4M9!@O=");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"2.?yyO4M9!@O=\" does not match 2\\.\\?(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("aUoj`BOwv^|&~OqjU", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ita", locale1.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("aUoj`BOwv^|&~OqjU", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("aUoj`BOwv^|&~OqjU", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("2.?yyO4M9!@O=", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("2.?yyO4M9!@O=", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("GTEA", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("84D?wSumR.%C&Jy", timeZone0, locale0);
      assertEquals("84D?wSumR.%C&Jy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDateParser fastDateParser0 = new FastDateParser("HzR", timeZone0, locale0);
      assertEquals("HzR", fastDateParser0.getPattern());
  }
}
