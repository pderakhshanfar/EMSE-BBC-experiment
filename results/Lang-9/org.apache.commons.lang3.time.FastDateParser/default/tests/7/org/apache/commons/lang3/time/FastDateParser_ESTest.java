/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:06:15 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/4fqR*I4?3k{O");
      Locale locale0 = new Locale("/4fqR*I4?3k{O", "/4fqR*I4?3k{O", "/4fqR*I4?3k{O");
      FastDateParser fastDateParser0 = new FastDateParser("/4fqR*I4?3k{O", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("/4FQR*I4?3K{O", locale1.getCountry());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.ITALIAN;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("M8:go0|N", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("dbMtcj8dE)!:8U", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("7Ht!ocK4l!^F E}JB", parsePosition0);
      fastDateParser0.parseObject("f9jGqk;E", parsePosition0);
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(">2>hAPl1{\"btZ?eJ", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "$;m%~uQY?K<8m*~");
      FastDateParser fastDateParser0 = new FastDateParser("$;m%~uQY?K<8m*~", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = new Locale("");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1967, "");
      FastDateParser fastDateParser0 = new FastDateParser("Zi\"itB", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("java.util.SimpleTimeZone[id=,offset=1967,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-970), "aD#C_/ab 8my=Yd.>P");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("aD#C_/ab 8my=Yd.>P", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("dbMtcj8dE)!:8U", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3128));
      assertEquals((-1128), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("7Ht!ocK4l!^F E}JB", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(4235);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("7Ht!ocK4l!^F E}JB", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("7Ht!ocK4l!^F E}JB", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W(Rv/T\"}HM{(");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser("W(Rv/T\"}HM{(", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(785);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("W(Rv/T\"}HM{(", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser(" aFPTaB1}Kg|a", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse(" aFPTaB1}Kg|a", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G|H+|+|M+|S+|W+||a+|d+|h+|k+|m|s+|w+|y+|z+|)'|'[^']++('';^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@>x4gx[0X#La");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@>x4gx[0X#La", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("[,", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("dbMtcj8dE)!:8U");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("dbMtcj8dE)!:8U", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      Date date0 = fastDateParser0.parse("dbMtcj8dE)!:8U", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@>x4kz[0X#,a");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser(".e/k#U?UBGDaQf", timeZone0, locale0);
      try { 
        fastDateParser0.parse(")qa9H.Ei|P(");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \")qa9H.Ei|P(\" does not match \\.
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("[K>QD 7Ut", timeZone0, locale0);
      assertEquals("[K>QD 7Ut", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("=y_a~T)S'd8g", timeZone0, locale0);
      assertEquals("=y_a~T)S'd8g", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++('';^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++('';^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("9o1K.JlC", timeZone0, locale0);
      assertEquals("9o1K.JlC", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("/@}s5v:", timeZone0, locale0);
      assertEquals("/@}s5v:", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("3LAOJ", timeZone0, locale0);
      assertEquals("3LAOJ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("E2AT", timeZone0, locale0);
      assertEquals("E2AT", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"nHM{|");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("1i%'ogG3<~Q5$", timeZone0, locale0);
      assertEquals("1i%'ogG3<~Q5$", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("0J(M]T*|9J", timeZone0, locale0);
      assertEquals("0J(M]T*|9J", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/4fqR*I4?3k{O");
      Locale locale0 = new Locale("/4fqR*I4?3k{O", "/4fqR*I4?3k{O", "/4fqR*I4?3k{O");
      FastDateParser fastDateParser0 = new FastDateParser("/4fqR*I4?3k{O", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("/4fqR*I4?3k{O");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ART");
      Locale locale0 = Locale.TAIWAN;
      FastDateParser fastDateParser0 = new FastDateParser(".)7F^g0)t6m>~r ", timeZone0, locale0);
      assertEquals(".)7F^g0)t6m>~r ", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"}HM{|");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("-lG[{[?tr%03'1Tq", timeZone0, locale0);
      assertEquals("-lG[{[?tr%03'1Tq", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("/fqR*I43k{O");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0);
      assertEquals(",", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("d*bMtcj8dE)!:8U", timeZone0, locale0);
      assertEquals("d*bMtcj8dE)!:8U", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("7Ht!ocK4l!^F E}JB", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(32);
      assertEquals(2032, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("7Ht!ocK4l!^F E}JB", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(46);
      assertEquals(1946, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(">)a$aF", timeZone0, locale0);
      assertEquals(">)a$aF", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@>xgxq3~1LU");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("{mPF^\"dLTy", timeZone0, locale0);
      assertEquals("{mPF^\"dLTy", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", timeZone0, locale0);
      try { 
        fastDateParser0.parse("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" does not match (\\p{IsNd}++)\\+\\|(Fri|Friday|Mon|Monday|Sat|Saturday|Sun|Sunday|Thu|Thursday|Tue|Tuesday|Wed|Wednesday)\\+\\|(\\p{IsNd}++)\\+\\|(AD|AD|BC|BC)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Time|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Time|British Summer Time|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Kostanay Standard Time|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Daylight Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIDT|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFST|NFT|Niue Time|Norfolk Summer Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Standard Time|Phoenix Is\\. Time|PHOT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|TRT|Turkey Time|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)\\+\\|(AM|PM)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(\\p{IsNd}++)\\+\\|(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|Acre Time|ACST|ACT|ACWST|ADT|AEDT|AEST|Afghanistan Time|AFT|AKDT|AKST|Alaska Daylight Time|Alaska Standard Time|Alma-Ata Time|ALMT|Amazon Time|AMT|Anadyr Time|ANAT|Aqtau Time|Aqtobe Time|AQTT|Arabia Standard Time|Argentine Time|Armenia Time|ART|AST|Atlantic Daylight Time|Atlantic Standard Time|Australian Central Daylight Time \\(South Australia\\)|Australian Central Daylight Time \\(South Australia/New South Wales\\)|Australian Central Standard Time \\(Northern Territory\\)|Australian Central Standard Time \\(South Australia\\)|Australian Central Standard Time \\(South Australia/New South Wales\\)|Australian Central Western Standard Time|Australian Eastern Daylight Time \\(New South Wales\\)|Australian Eastern Daylight Time \\(Tasmania\\)|Australian Eastern Daylight Time \\(Victoria\\)|Australian Eastern Standard Time \\(New South Wales\\)|Australian Eastern Standard Time \\(Queensland\\)|Australian Eastern Standard Time \\(Tasmania\\)|Australian Eastern Standard Time \\(Victoria\\)|Australian Western Standard Time|AWST|Azerbaijan Time|Azores Summer Time|Azores Time|AZOST|AZOT|AZT|Bangladesh Time|BDT|Bhutan Time|BNT|Bolivia Time|BOT|Bougainville Standard Time|Brasilia Time|British Summer Time|BRT|Brunei Time|BST|BTT|Cape Verde Time|CAT|CCT|CDT|Central African Time|Central Daylight Time|Central European Summer Time|Central European Time|Central Indonesia Time|Central Standard Time|CEST|CET|CHADT|Chamorro Standard Time|CHAST|Chatham Daylight Time|Chatham Standard Time|Chile Summer Time|Chile Time|China Standard Time|Choibalsan Time|CHOT|Christmas Island Time|ChST|CHUT|Chuuk Time|CKT|CLST|CLT|Cocos Islands Time|Colombia Time|Cook Is\\. Time|Coordinated Universal Time|COT|CST|Cuba Daylight Time|Cuba Standard Time|CVT|CXT|Davis Time|DAVT|DDUT|Dumont-d'Urville Time|EASST|EAST|East Indonesia Time|Easter Is\\. Summer Time|Easter Is\\. Time|Eastern African Time|Eastern Daylight Time|Eastern European Summer Time|Eastern European Time|Eastern Greenland Summer Time|Eastern Greenland Time|Eastern Standard Time|EAT|ECT|Ecuador Time|EDT|EEST|EET|EGST|EGT|EST|Falkland Is\\. Time|Fernando de Noronha Time|Fiji Summer Time|Fiji Time|FJST|FJT|FKT|FNT|French Guiana Time|French Southern & Antarctic Lands Time|Galapagos Time|GALT|Gambier Time|GAMT|Georgia Time|GET|GFT|Ghana Mean Time|Gilbert Is\\. Time|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|Greenwich Mean Time|GST|Gulf Standard Time|Guyana Time|GYT|Hawaii Daylight Time|Hawaii Standard Time|HDT|HKT|Hong Kong Time|Hovd Time|HOVT|HST|ICT|IDT|India Standard Time|Indian Ocean Territory Time|Indochina Time|IOT|Iran Daylight Time|Iran Standard Time|IRDT|Irish Summer Time|IRKT|Irkutsk Time|IRST|Israel Daylight Time|Israel Standard Time|IST|Japan Standard Time|JST|KGT|Kirgizstan Time|Korea Standard Time|Kosrae Time|KOST|Kostanay Standard Time|Krasnoyarsk Time|KRAT|KST|LHDT|LHST|Line Is\\. Time|LINT|Lord Howe Daylight Time|Lord Howe Standard Time|Macquarie Island Daylight Time|Macquarie Island Standard Time|Magadan Time|MAGT|Malaysia Time|Maldives Time|Marquesas Time|Marshall Islands Time|MART|Mauritius Time|Mawson Time|MAWT|MDT|MEST|MET|MHT|Middle Europe Summer Time|Middle Europe Time|MIDT|MIST|MMT|Moscow Standard Time|Mountain Daylight Time|Mountain Standard Time|MSK|MST|MUT|MVT|Myanmar Time|MYT|Nauru Time|NCT|NDT|Nepal Time|New Caledonia Time|New Zealand Daylight Time|New Zealand Standard Time|Newfoundland Daylight Time|Newfoundland Standard Time|NFST|NFT|Niue Time|Norfolk Summer Time|Norfolk Time|Novosibirsk Time|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk Time|OMST|Oral Time|ORAT|Pacific Daylight Time|Pacific Standard Time|Pakistan Time|Palau Time|Papua New Guinea Time|Paraguay Summer Time|Paraguay Time|PDT|Peru Time|PET|Petropavlovsk-Kamchatski Time|PETT|PGT|Philippines Standard Time|Phoenix Is\\. Time|PHOT|Pierre & Miquelon Daylight Time|Pierre & Miquelon Standard Time|Pitcairn Standard Time|PKT|PMDT|PMST|Pohnpei Time|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda Time|RET|Reunion Time|Rothera Time|ROTT|Sakhalin Time|SAKT|Samara Time|Samoa Standard Time|SAMT|SAST|SBT|SCT|Seychelles Time|SGT|Singapore Time|Solomon Is\\. Time|South Africa Standard Time|South Georgia Standard Time|Srednekolymsk Time|SRET|SRT|SST|Suriname Time|SYOT|Syowa Time|Tahiti Time|TAHT|Tajikistan Time|TFT|Timor-Leste Time|TJT|TKT|TLT|TMT|Tokelau Time|Tonga Time|TOT|TRT|Turkey Time|Turkmenistan Time|Tuvalu Time|TVT|Ulaanbaatar Time|ULAT|Uruguay Time|Ust-Nera Time|UTC|UYT|Uzbekistan Time|UZT|Vanuatu Time|Venezuela Time|VET|Vladivostok Time|VLAT|VOST|Vostok Time|VUT|Wake Time|WAKT|Wallis & Futuna Time|WAT|WEST|West Indonesia Time|West Samoa Daylight Time|West Samoa Standard Time|Western African Time|Western European Summer Time|Western European Time|Western Greenland Summer Time|Western Greenland Time|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|Xinjiang Standard Time|XJT|YAKT|Yakutsk Time|Yekaterinburg Time|YEKT)\\+\\|'\\|\\[\\^\\]\\+\\+\\('\\[\\^\\]\\*\\+\\)\\*\\+\\|\\[\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("4$E`VD", timeZone0, locale0);
      assertEquals("4$E`VD", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "7D^A");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("7D^A", simpleTimeZone0, locale0);
      try { 
        fastDateParser0.parseObject("GMTIET");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"GMTIET\" does not match 7(\\p{IsNd}++)\\^
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("W?Rv/T\"}HM{|", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("W?Rv/T\"}HM{|");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"W?Rv/T\"}HM{|\" does not match (\\p{IsNd}++)\\?
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"nHM{|");
      Locale locale0 = new Locale("W?Rv/T\"nHM{|", "W?Rv/T\"nHM{|", "W?Rv/T\"nHM{|");
      FastDateParser fastDateParser0 = new FastDateParser("W?Rv/T\"nHM{|", timeZone0, locale0);
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser1 = new FastDateParser("W?Rv/T\"nHM{|", timeZone0, locale1);
      boolean boolean0 = fastDateParser1.equals(fastDateParser0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"nHM{|");
      Locale locale0 = new Locale("W?Rv/T\"nHM{|", "W?Rv/T\"nHM{|", "W?Rv/T\"nHM{|");
      FastDateParser fastDateParser0 = new FastDateParser("W?Rv/T\"nHM{|", timeZone0, locale0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "E");
      FastDateParser fastDateParser1 = new FastDateParser("W?Rv/T\"nHM{|", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@>xgxq3~1LU");
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("@>xgxq3~1LU", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("<u{f/d[V+Q\"MGKKoglc", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"nHM{|");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("W?Rv/T\"nHM{|", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z]_]W]");
      Locale locale0 = new Locale("Z]_]W]", "Z]_]W]", "Z]_]W]");
      FastDateParser fastDateParser0 = new FastDateParser("Z]_]W]", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getTimeZone("~xm8$7Mlc-8H");
      FastDateParser fastDateParser0 = new FastDateParser("~xm8$7Mlc-8H", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("~", pattern0.pattern());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("Z K''O~Cl?[vG_67D8n", timeZone0, locale0);
      TimeZone timeZone1 = fastDateParser0.getTimeZone();
      assertEquals("GMT", timeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W(Rv/T\"}HM{|");
      Locale locale0 = Locale.KOREAN;
      FastDateParser fastDateParser0 = new FastDateParser("W(Rv/T\"}HM{|", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("W(Rv/T\"}HM{|", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("EAT", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("EAT", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"}HM{|");
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("W?Rv/T\"}HM{|", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[W?Rv/T\"}HM{|,fr,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s<B");
      Locale locale0 = new Locale("s<B");
      FastDateParser fastDateParser0 = new FastDateParser("s<B", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7Ht!ocK4l!^F E}JB");
      Locale locale0 = Locale.ITALIAN;
      FastDateParser fastDateParser0 = new FastDateParser("dbMtcj8dE)!:8U", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("7Ht!ocK4l!^F E}JB", parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser("HV#LN]4#", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("8W\"4~ZWB");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("sM8:go09N", timeZone0, locale0);
      assertEquals("sM8:go09N", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("@>x4gx[0X#La");
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("FastDateParser[", timeZone0, locale0);
      assertEquals("FastDateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W?Rv/T\"}HM{|");
      Locale locale0 = Locale.ENGLISH;
      FastDateParser fastDateParser0 = new FastDateParser(":DzT7s1y&9N)[<Vv", timeZone0, locale0);
      assertEquals(":DzT7s1y&9N)[<Vv", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDateParser fastDateParser0 = new FastDateParser(")Z}`W6ojyFeC0+vW", timeZone0, locale0);
      assertEquals(")Z}`W6ojyFeC0+vW", fastDateParser0.getPattern());
  }
}
