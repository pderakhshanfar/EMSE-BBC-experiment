/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:04:52 GMT 2020
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDateParser_ESTest extends FastDateParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("yyfLw$69a0", timeZone0, locale0);
      assertEquals("yyfLw$69a0", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=-");
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("=-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Object object0 = fastDateParser0.parseObject("", parsePosition0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMANY;
      FastDateParser fastDateParser0 = new FastDateParser("7'tiFG<9x#b", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parseObject("7", parsePosition0);
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1088), "-eOxxxt~DKiqo");
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser("-eOxxxt~DKiqo", simpleTimeZone0, locale0);
      boolean boolean0 = fastDateParser0.isNextNumber();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("3[j*<u0lK[", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals("", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2355, ")t|UJZK4U9KRlG");
      FastDateParser fastDateParser0 = new FastDateParser("4;f#>%qD)X~x%fHw>I", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertEquals(")t|UJZK4U9KRlG", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
      Locale locale0 = Locale.FRENCH;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      TimeZone timeZone0 = fastDateParser0.getTimeZone();
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=-");
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("(&>zkYR", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear((-3528));
      assertEquals((-1528), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("E", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("E", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("=}SLF~", timeZone0, locale0);
      try { 
        fastDateParser0.parseObject("=}SLF~");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"=}SLF~\" does not match =\\}(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W&_-YkZ(");
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("W&_-YkZ(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse("W&_-YkZ(", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("W&_-kYJLkZ(");
      Locale locale0 = Locale.ROOT;
      FastDateParser fastDateParser0 = new FastDateParser("W&_-kYJLkZ(", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("(p{IsNd}++)", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDateParser0.getFieldWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("2Zhf53kO*erNi~", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("<3yrMbUO8Wm1zr&?o", timeZone0, locale0);
      assertEquals("<3yrMbUO8Wm1zr&?o", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=-");
      Locale locale0 = Locale.KOREA;
      ParsePosition parsePosition0 = new ParsePosition(0);
      FastDateParser fastDateParser0 = new FastDateParser("GMTCST", timeZone0, locale0);
      Date date0 = fastDateParser0.parse("2L1rp=.q!z!|8", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";-");
      Locale locale0 = new Locale(";-");
      FastDateParser fastDateParser0 = new FastDateParser(";-", timeZone0, locale0);
      Date date0 = fastDateParser0.parse(";-");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("a}5D`^FGrPwOy", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1735));
      // Undeclared exception!
      try { 
        fastDateParser0.parse("a}5D`^FGrPwOy", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDateParser fastDateParser0 = new FastDateParser("H_*-.^2C7", timeZone0, locale0);
      assertEquals("H_*-.^2C7", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      FastDateParser fastDateParser0 = new FastDateParser("^", timeZone0, locale0);
      assertEquals("^", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDateParser fastDateParser0 = new FastDateParser("m?RNLfj", timeZone0, locale0);
      assertEquals("m?RNLfj", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("=-");
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("=-", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      fastDateParser0.parse("=-", parsePosition0);
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = TimeZone.getTimeZone(".\"c1L=N");
      FastDateParser fastDateParser0 = new FastDateParser("({S:x?W#q/G", timeZone0, locale0);
      assertEquals("({S:x?W#q/G", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDateParser fastDateParser0 = new FastDateParser("5M9@~|vQN/}rd89>", timeZone0, locale0);
      assertEquals("5M9@~|vQN/}rd89>", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("2Zh1f53kO*erNi~", timeZone0, locale0);
      assertEquals("2Zh1f53kO*erNi~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.US;
      FastDateParser fastDateParser0 = new FastDateParser("+h08^c#$#", timeZone0, locale0);
      assertEquals("+h08^c#$#", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("/)xNW-]qix", timeZone0, locale0);
      assertEquals("/)xNW-]qix", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("2Zh.f53kO*erNi~", timeZone0, locale0);
      assertEquals("2Zh.f53kO*erNi~", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDateParser fastDateParser0 = new FastDateParser(",M$R-mE]R", timeZone0, locale0);
      assertEquals(",M$R-mE]R", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser(")g!R-#6(.c[?L-Gh8,z", timeZone0, locale0);
      assertEquals(")g!R-#6(.c[?L-Gh8,z", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("@w", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(0);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("2L12rp=.q!z!|8", timeZone0, locale0);
      int int0 = fastDateParser0.adjustYear(2752);
      assertEquals(4652, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("Fas-DateParser[", timeZone0, locale0);
      assertEquals("Fas-DateParser[", fastDateParser0.getPattern());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      FastDateParser fastDateParser0 = new FastDateParser("[W#w", timeZone0, locale0);
      try { 
        fastDateParser0.parse("TTYld-GAFG");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"TTYld-GAFG\" does not match \\[(\\p{IsNd}++)#(\\p{IsNd}++)
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("z<=D83+i", timeZone0, locale0);
      try { 
        fastDateParser0.parse("z<=D83+i");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"z<=D83+i\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACDT|ACST|ACT|ACWST|ADT|AEDT|AEST|AFT|AKDT|AKST|ALMT|AMT|ANAT|AQTT|ART|AST|AWST|AZOST|AZOT|AZT|BDT|BNT|BOT|Bougainville Standard Time|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|Chatham \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|Chatham \uD45C\uC900\uC2DC|Choibalsan \uC2DC\uAC04|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CXT|Davis \uC2DC\uAC04|DAVT|DDUT|EASST|EAST|Easter Is\\. \uC2DC\uAC04|Easter Is\\. \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|Fernando de Noronha \uC2DC\uAC04|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HDT|HKT|Hovd \uC2DC\uAC04|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|Kostanay Standard Time|KRAT|KST|LHDT|LHST|LINT|MAGT|MART|MAWT|MDT|MEST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFST|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|Omsk \uC2DC\uAC04|OMST|Oral \uD45C\uC900\uC2DC|ORAT|PDT|PET|PETT|PGT|Philippines Standard Time|PHOT|Pitcairn \uD45C\uC900\uC2DC|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QOST|QYZT|Qyzylorda \uD45C\uC900\uC2DC|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|Srednekolymsk Time|SRET|SRT|SST|SYOT|Syowa \uC2DC\uAC04|TAHT|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYT|UZT|VET|VLAT|VOST|Vostok \uC2DC\uAC04|VUT|WAKT|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WSST|XJT|YAKT|YEKT|\uAC00\uB098 \uD45C\uC900\uC2DC|\uAC00\uC774\uC544\uB098 \uC2DC\uAC04|\uAC08\uB77C\uD30C\uACE0\uC2A4 \uC2DC\uAC04|\uAC10\uBE44\uC544 \uC2DC\uAC04|\uAC78\uD504\uB9CC \uD45C\uC900\uC2DC|\uADF8\uB8E8\uC9C0\uC57C \uC2DC\uAC04|\uADF8\uB9AC\uB2C8\uCE58 \uD45C\uC900\uC2DC|\uAE38\uBC84\uD2B8 \uAD70\uB3C4 \uC2DC\uAC04|\uAE4C\uBF40\uBCA0\uB974\uB370 \uC2DC\uAC04|\uB098\uC6B0\uB8E8 \uC2DC\uAC04|\uB0A8\uC544\uD504\uB9AC\uCE74 \uD45C\uC900\uC2DC|\uB124\uD314 \uC2DC\uAC04|\uB178\uBE0C\uC2DC\uBE4C\uC2A4\uD06C \uC2DC\uAC04|\uB178\uD37D \uC2DC\uAC04|\uB178\uD37D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274 \uCE7C\uB808\uB3C4\uB2C8\uC544 \uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uC9C8\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB274\uD380\uB4E4\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB274\uD380\uB4E4\uB79C\uB4DC \uD45C\uC900\uC2DC|\uB2C8\uC6B0\uC5D0 \uC2DC\uAC04|\uB300\uC11C\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB300\uC11C\uC591 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uB3D9\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uB3D9\uBD80 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB3D9\uBD80 \uD45C\uC900\uC2DC|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uBE45\uD1A0\uB9AC\uC544\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD038\uC990\uB79C\uB4DC\\)|\uB3D9\uBD80 \uD45C\uC900\uC2DC\\(\uD0DC\uC988\uBA54\uC774\uB2C8\uC544\\)|\uB3D9\uC720\uB7FD \uC2DC\uAC04|\uB3D9\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB4A4\uBABD \uB4A4\uB974\uBE4C \uC2DC\uAC04|\uB77C\uC778 \uAD70\uB3C4 \uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uB85C\uB4DC \uD558\uC6B0 \uD45C\uC900\uC2DC|\uB85C\uC81C\uB77C \uD45C\uC900\uC2DC|\uB9AC\uC720\uB2C8\uC5B8 \uC2DC\uAC04|\uB9C8\uAC00\uB2E8 \uC2DC\uAC04|\uB9C8\uB974\uCF00\uC0AC\uC2A4 \uC2DC\uAC04|\uB9C8\uC15C\uC81C\uB3C4 \uC2DC\uAC04|\uB9D0\uB808\uC774\uC2DC\uC544 \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04|\uB9E4\uCF70\uB9AC \uC12C \uD45C\uC900\uC2DC|\uBAA8\uB9AC\uC154\uC2A4 \uC2DC\uAC04|\uBAA8\uC2A4\uD06C\uBC14 \uD45C\uC900\uC2DC|\uBAA8\uC2A8 \uC2DC\uAC04|\uBAB0\uB514\uBE0C \uC2DC\uAC04|\uBBF8\uC580\uB9C8 \uC2DC\uAC04|\uBC29\uAE00\uB77C\uB370\uC2DC \uC2DC\uAC04|\uBCA0\uB124\uC218\uC5D8\uB77C \uC2DC\uAC04|\uBCFC\uB9AC\uBE44\uC544 \uC2DC\uAC04|\uBD80\uD0C4 \uC2DC\uAC04|\uBE0C\uB77C\uC9C8\uB9AC\uC544 \uC2DC\uAC04|\uBE0C\uB8E8\uB098\uC774 \uC2DC\uAC04|\uBE14\uB77C\uB514\uBCF4\uC2A4\uD1A1 \uC2DC\uAC04|\uBE44\uB204\uC544\uD22C \uC2DC\uAC04|\uC0AC\uB9C8\uB77C \uC2DC\uAC04|\uC0AC\uBAA8\uC544 \uD45C\uC900\uC2DC|\uC0AC\uC6B0\uC2A4 \uC870\uC9C0\uC544 \uD45C\uC900\uC2DC|\uC0AC\uD560\uB9B0 \uC2DC\uAC04|\uC0B0\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC0B0\uC9C0 \uD45C\uC900\uC2DC|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC2DC\uAC04|\uC11C\uBD80 \uADF8\uB9B0\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uBD80 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC11C\uC0AC\uBAA8\uC544 \uC2DC\uAC04|\uC11C\uC0AC\uBAA8\uC544 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC720\uB7FD \uC2DC\uAC04|\uC11C\uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC11C\uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uC138\uACC4 \uD45C\uC900\uC2DC|\uC138\uC774\uC140 \uC2DC\uAC04|\uC194\uB85C\uBAAC \uAD70\uB3C4 \uC2DC\uAC04|\uC218\uB9AC\uB0A8 \uC2DC\uAC04|\uC2F1\uAC00\uD3EC\uB974 \uC2DC\uAC04|\uC544\uB098\uB514\uB974 \uC2DC\uAC04|\uC544\uB78D \uD45C\uC900\uC2DC|\uC544\uB974\uBA54\uB2C8\uC544 \uC2DC\uAC04|\uC544\uB974\uD5E8\uD2F0\uB098 \uC2DC\uAC04|\uC544\uB9C8\uC874 \uC2DC\uAC04|\uC544\uC77C\uB79C\uB4DC \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uC81C\uB974\uBC14\uC774\uC794 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC2DC\uAC04|\uC544\uC870\uB808\uC2A4 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC544\uD504\uAC00\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uC545\uD0C0\uC6B0 \uC2DC\uAC04|\uC545\uD1A0\uBE0C \uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC54C\uB798\uC2A4\uCE74 \uD45C\uC900\uC2DC|\uC54C\uB9C8\uC544\uD0C0 \uC2DC\uAC04|\uC57C\uCE20\uD06C \uC2DC\uAC04|\uC5D0\uC774\uCEE4 \uC2DC\uAC04|\uC5D0\uCFE0\uC544\uB3C4\uB974 \uC2DC\uAC04|\uC601\uAD6D \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC601\uC778\uB3C4 \uC81C\uB3C4 \uC2DC\uAC04|\uC608\uCE74\uD14C\uB9B0\uBC84\uADF8 \uC2DC\uAC04|\uC6B0\uB8E8\uACFC\uC774 \uC2DC\uAC04|\uC6B0\uC2A4\uD2F0\uB124\uB77C \uD45C\uC900\uC2DC|\uC6B0\uC988\uBCA0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uC6B8\uB780\uBC14\uD0C0\uB974 \uC2DC\uAC04|\uC6D4\uB9AC\uC2A4 \uD6C4\uD22C\uB098 \uC2DC\uAC04|\uC6E8\uC774\uD06C \uC2DC\uAC04|\uC774\uB780 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uB780 \uD45C\uC900\uC2DC|\uC774\uB974\uCFE0\uCE20\uD06C \uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC774\uC2A4\uB77C\uC5D8 \uD45C\uC900\uC2DC|\uC778\uB3C4 \uD45C\uC900\uC2DC|\uC778\uB3C4\uCC28\uC774\uB098 \uBC18\uB3C4 \uC2DC\uAC04|\uC77C\uBCF8 \uD45C\uC900\uC2DC|\uC911\uAD6D \uD45C\uC900\uC2DC|\uC911\uBD80 \uC720\uB7FD \uC2DC\uAC04|\uC911\uBD80 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uC77C\uAD11 \uC808\uC57D \uC2DC\uAC04\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uBD80 \uD45C\uC900\uC2DC|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uB0A8\uBD80 \uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544/\uB274\uC0AC\uC6B0\uC2A4\uC6E8\uC77C\uC988\\)|\uC911\uBD80 \uD45C\uC900\uC2DC\\(\uBD81\uBD80 \uC9C0\uC5ED\\)|\uC911\uC559 \uC11C\uBD80 \uD45C\uC900\uC2DC\\(\uC624\uC2A4\uD2B8\uB808\uC77C\uB9AC\uC544\\)|\uC911\uC559 \uC544\uD504\uB9AC\uCE74 \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC2DC\uAC04|\uC911\uC559 \uC720\uB7FD \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uC911\uC559 \uC778\uB3C4\uB124\uC2DC\uC544 \uC2DC\uAC04|\uCC28\uBAA8\uB85C \uD45C\uC900\uC2DC|\uCD94\uD06C \uD45C\uC900\uC2DC|\uCE60\uB808 \uC2DC\uAC04|\uCE60\uB808 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCF54\uC2A4\uB798 \uC2DC\uAC04|\uCF54\uCF54\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uCF5C\uB86C\uBE44\uC544 \uC2DC\uAC04|\uCFE0\uBC14 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uCFE0\uBC14 \uD45C\uC900\uC2DC|\uCFE0\uD06C \uAD70\uB3C4 \uC2DC\uAC04|\uD06C\uB77C\uC2A4\uB178\uC57C\uB974\uC2A4\uD06C \uC2DC\uAC04|\uD06C\uB9AC\uC2A4\uB9C8\uC2A4\uC12C \uC2DC\uAC04|\uD0A4\uB974\uD0A4\uC988\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uC9C0\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD0C0\uD788\uD2F0 \uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD0DC\uD3C9\uC591 \uD45C\uC900\uC2DC|\uD1A0\uCF08\uB77C\uC6B0 \uC2DC\uAC04|\uD1B5\uAC00 \uC2DC\uAC04|\uD22C\uB974\uD06C\uBA54\uB2C8\uC2A4\uD0C4 \uC2DC\uAC04|\uD22C\uBC1C\uB8E8 \uC2DC\uAC04|\uD2F0\uBAA8\uB974-\uB808\uC2A4\uD14C \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC2DC\uAC04|\uD30C\uB77C\uACFC\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD30C\uD0A4\uC2A4\uD0C4 \uC2DC\uAC04|\uD30C\uD478\uC544\uB274\uAE30\uB2C8 \uC2DC\uAC04|\uD314\uB77C\uC6B0 \uC2DC\uAC04|\uD398\uB8E8 \uC2DC\uAC04|\uD398\uD2B8\uB85C\uD30C\uBE14\uB85C\uD504\uC2A4\uD06C-\uCE84\uCC28\uCE20\uD0A4 \uC2DC\uAC04|\uD3EC\uD074\uB79C\uB4DC \uAD70\uB3C4 \uC2DC\uAC04|\uD3F0\uD398\uC774 \uD45C\uC900\uC2DC|\uD504\uB791\uC2A4 \uB0A8\uBD80 \uC9C0\uBC29 \uBC0F \uB0A8\uADF9 \uC9C0\uC5ED \uC2DC\uAC04|\uD504\uB791\uC2A4\uB839 \uAE30\uC544\uB098 \uC2DC\uAC04|\uD53C\uB2C9\uC2A4 \uAD70\uB3C4 \uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD53C\uC5D0\uB974 \uBBF8\uD06C\uB860 \uD45C\uC900\uC2DC|\uD53C\uC9C0 \uC2DC\uAC04|\uD53C\uC9C0 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uC77C\uAD11\uC808\uC57D\uC2DC\uAC04|\uD558\uC640\uC774 \uD45C\uC900\uC2DC|\uD55C\uAD6D \uD45C\uC900\uC2DC|\uD64D\uCF69 \uC2DC\uAC04)<=(\\p{IsNd}{1}+)83\\+
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3);
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale0);
      Locale locale1 = new Locale("NET", "", "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++");
      FastDateParser fastDateParser1 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", simpleTimeZone0, locale1);
      fastDateParser1.equals(fastDateParser0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMAN;
      FastDateParser fastDateParser0 = new FastDateParser("-eOxxxt~DKiqo", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getDefault();
      FastDateParser fastDateParser1 = new FastDateParser("-eOxxxt~DKiqo", timeZone1, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("W&_-YkZ(");
      FastDateParser fastDateParser0 = new FastDateParser("hK68", timeZone0, locale0);
      FastDateParser fastDateParser1 = new FastDateParser("W&_-YkZ(", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDateParser fastDateParser0 = new FastDateParser("*f'8&]5'FsfnM6c`(", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser("p{sNd}{", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
         verifyException("org.apache.commons.lang3.time.FastDateParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("MRg^J\"3?Ui+zF%TD^", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6,-r`.csnF5f'[?");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("(a@!E9nQ&", timeZone0, locale0);
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("\\((\u4E0A\u5348|\u4E0B\u5348)@!(\u661F\u671F\u4E00|\u661F\u671F\u4E00|\u661F\u671F\u4E09|\u661F\u671F\u4E09|\u661F\u671F\u4E8C|\u661F\u671F\u4E8C|\u661F\u671F\u4E94|\u661F\u671F\u4E94|\u661F\u671F\u516D|\u661F\u671F\u516D|\u661F\u671F\u56DB|\u661F\u671F\u56DB|\u661F\u671F\u65E5|\u661F\u671F\u65E5)9", pattern0.toString());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser(">%a'RuK(*", timeZone0, locale0);
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("ko", locale1.getLanguage());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDateParser fastDateParser0 = new FastDateParser("SST", timeZone0, locale0);
      String string0 = fastDateParser0.getPattern();
      assertEquals("SST", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("GMTAST", timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-30));
      // Undeclared exception!
      try { 
        fastDateParser0.parseObject("GMTAST", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDateParser fastDateParser0 = new FastDateParser("2Zhf53kO*erNi~", timeZone0, locale0);
      String string0 = fastDateParser0.toString();
      assertEquals("FastDateParser[2Zhf53kO*erNi~,ko_KR,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(";-");
      Locale locale0 = new Locale(";-");
      FastDateParser fastDateParser0 = new FastDateParser(";-", timeZone0, locale0);
      fastDateParser0.hashCode();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      FastDateParser fastDateParser0 = new FastDateParser("SQVh", timeZone0, locale0);
      Object object0 = fastDateParser0.parseObject("6*[TXj 4n?h9Zt;sn_");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("W&_-YkZ(");
      FastDateParser fastDateParser0 = new FastDateParser("hK68", timeZone0, locale0);
      boolean boolean0 = fastDateParser0.equals(fastDateParser0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Locale locale0 = Locale.US;
      TimeZone timeZone0 = TimeZone.getTimeZone("W&_-kZ(");
      FastDateParser fastDateParser0 = new FastDateParser("W&_-kZ(", timeZone0, locale0);
      assertEquals("W&_-kZ(", fastDateParser0.getPattern());
  }
}
